# Workflow

```{r setup}
#| message: false
#| include: false
id <- "18LX"
library(GeoPressureR)
```

The GeoPressureR workflow follows a series of functions taking as input the raw data, the labels, and the configuration, to produce trajectory outputs.

![GeoPressureR workflow diagram](assets/cheatsheet_workflow.png){fig-align="center" alt="GeoPressureR workflow cheatsheet diagram showing the complete analysis pipeline from raw data to trajectory outputs"} *Extract of the [GeoPressureR cheatsheet](https://github.com/Rafnuss/GeoPressureR?tab=readme-ov-file#cheatsheet) illustrating the workflow*

## Presentation of `geopressuretemplate()`

After performing all preparation steps, you are able to run the entire workflow in a single line:

```{r}
#| eval: false
geopressuretemplate("18LX")
```

The `geopressuretemplate()` function calls on three child functions outlined below. `data/interim/{id}.Rdata` is created in Step 1, and then updated in steps 2 and 3 with the main variables (see below).  

**1. `geopressuretemplate_tag()`**

1. [`tag_create()`](https://raphaelnussbaumer.com/GeoPressureR/reference/tag_create): Initializes the tag object.
2. [`tag_label()`](https://raphaelnussbaumer.com/GeoPressureR/reference/tag_label): Adds labels.
3. [`tag_set_map()`](https://raphaelnussbaumer.com/GeoPressureR/reference/tag_set_map): Sets the spatial and temporal parameters.
4. \*[`geopressure_map()`](https://raphaelnussbaumer.com/GeoPressureR/reference/geopressure_map) Computes the pressure likelihood.
5. \*[`twilight_create()`](https://raphaelnussbaumer.com/GeoPressureR/reference/twilight_create) `|>` [`twilight_read()`](https://raphaelnussbaumer.com/GeoPressureR/reference/twilight_read) `|>` [`geolight_map()`](https://raphaelnussbaumer.com/GeoPressureR/reference/geolight_map): Computes the light likelihood.

**2.`geopressuretemplate_graph()`**

1. [`graph_create()`](https://raphaelnussbaumer.com/GeoPressureR/reference/graph_create): Creates the graph based on tag.
2. \*[`graph_add_wind()`](https://raphaelnussbaumer.com/GeoPressureR/reference/graph_add_wind): Adds wind data to the graph.
3. [`graph_set_movement()`](https://raphaelnussbaumer.com/GeoPressureR/reference/graph_set_movement): Sets the movement model
4. \*[`graph_marginal()`](https://raphaelnussbaumer.com/GeoPressureR/reference/graph_marginal): Computes the marginal distribution map.
5. \*[`graph_most_likely()`](https://raphaelnussbaumer.com/GeoPressureR/reference/graph_most_likely): Computes the most likely path based on the movement model.
6. \*[`graph_simulation()`](https://raphaelnussbaumer.com/GeoPressureR/reference/graph_simulation): Runs simulations to model multiple possible paths.

**3.`geopressuretemplate_pressurepath()`**

Compute pressurepath [`pressurepath_create()`](https://raphaelnussbaumer.com/GeoPressureR/reference/pressurepath_create) of the `path_most_likely` and/or the `path_geopressureviz`. Learn more about pressurepath in the [Pressurepath](pressurepath.html) chapter.

## Configuration the workflow

All parameters of the workflow's function are provided in the [`config.yml`](https://github.com/Rafnuss/GeoPressureTemplate/blob/main/config.yml) file following the structure:

``` yml
tag_id:
  function_name:
    argument: value
```

On top of all GeoPressureR functions, you also need to provide general workflow parameters in `geopressuretemplate`:

``` yaml
default:
  geopressuretemplate:
    likelihood: ["map_pressure", "map_light"]
    outputs: ["marginal", "most_likely", "simulation"]
    pressurepath: ["most_likely"]
```

`likelihood` define which likelihood map to compute and use in the graph model while `outputs` define which outputs to use. In `pressurepath`, you need to set which path to use. The path can also be visualised using [GeoPressureViz](geopressureviz.html).


You can check the configuration used with:

```{r}
#| eval: false
geopressuretemplate_config(id)
```

This is constructed by combining the default parameters used in GeoPressureR overwritten by the parameters you've written in `config.yml` in the config `default` and overwritten by the config `18LX`.

## Tag

The tag workflow simply consists of preparing the tag data and computing the likelihood map.

```{r}
#| eval: false
#| cache: true
tag <- geopressuretemplate_tag(id)
```

At the end of each geopressuretemplate function the interim file (e.g. `data/interim/18LX.Rdata`) is create or updated. Next geopressuretemplate functions will re-use this file to load variables.

## Graph

The graph workflow uses the `tag` computed before to create the graph and produce the outputs according to what you defined in `geopressuretemplate` in `config.yml`

```{r}
#| eval: false
#| cache: true
graph <- geopressuretemplate_graph(id)
```

Because the construction of the graph can be a bit more complicated and takes a lot of time, we've implemented a `tryCatch` approach which returns the `graph` in case the code fails during the processing so that you can troubleshoot the problem more easily.

## Pressurepath

```{r, eval = FALSE}
#| cache: true
geopressuretemplate_pressurepath(id, quiet = FALSE)
```


## Outputs

All the information needed for your analysis should now be contained in `./data/interim/18LX.RData`

```{r}
save_list <- load(glue::glue("./data/interim/{id}.RData"))
print(save_list)
```
