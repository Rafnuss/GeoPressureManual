# Create

In this guide, we explore how to generate a GeoLocator Data Package from a GeoPressureTemplate folder where you've already performed the analysis of the tracks following the [GeoPressureTemplate workflow](geopressuretemplate-workflow.html).

::: callout-important
To be able to follow this guide, you need to have a GeoPressureTemplate project containing:

- An up-to-date `DESCRIPTION` file, including `version`, `contributors`, `licences` as described in [the R packages book](https://r-pkgs.org/description.html). 
- One interim `.RData` file per tag, with all outputs you would like to publish, generated with the [Geopressuretemplate workflow](geopressuretemplate-workflow.html).
- The `tag.csv` and `observations.csv` files in the `data/` folder.
::: 

::: callout-info
If you've not yet performed the GeoPressureR analysis, it is still possible to create a geolocator data package with only the core ressources. 
:::


```{r setup}
#| message: false
library(frictionless)
library(GeoLocatoR)
library(tidyverse)
library(zen4R)
```

## Setup of the example

For this example, we won't be using the Swainson's Warbler nor Great Reed Warbler as we want a full project with multiple tags. Instead, we download [the GeoPressureTemplate of the Woodland Kingfisher geolocator project](https://github.com/Rafnuss/WoodlandKingfisher). Our goal will essentially be to reproduce the [associated GeoLocator Data Package uploaded on Zenodo already](https://zenodo.org/records/13829929).

We can download this GeoPressureTemplate from Github in a temporary folder using the following code:

```{r}
#| code-fold: true
#| message: false
repo <- "Rafnuss/WoodlandKingfisher"

# Create temporary file for the ZIP
temp_zip <- tempfile(fileext = ".zip")

# Download the ZIP file and unzip the repository
download.file(
  glue::glue("https://github.com/{repo}/archive/refs/heads/main.zip"),
  temp_zip,
  mode = "wb"
)
temp_dir <- tempfile()
unzip(temp_zip, exdir = temp_dir)

# return the extraction directory
directory <- file.path(temp_dir, list.files(temp_dir))
```


## Initiate datapackage with metadata

We can generate a GeoLocator Data Package `pkg` from a GeoPressureTemplate folder with `create_gldp_geopressuretemplate()`. This function will read the `DESCRIPTION` file and create a frictionless package with the metadata. At this stage, no data is included in the package.

```{r}
pkg <- create_gldp_geopressuretemplate(directory = directory)
```

::: callout-info

Read the [datapackage specification](https://raphaelnussbaumer.com/GeoLocator-DP/datapackage/) to learn about all recommended metadata that can be added. 

Generally, the information (title, description, license, etc...) between the code (DESCRIPTION file) would be different than the one for the datapackage published. Make sure to update these information accordingly!
:::

```{r}
# title
# pkg$title <- "GeoLocator Data Package: {Species} in {country}"

# Contributors/creators: 
# Default is to take the GeoPressureTemplate authors, but it is common that 
# additional co-authors should be added for the datapackage
pkg$contributors <- list( # required
    list(
      title = "RaphaÃ«l Nussbaumer",
      roles = c("ContactPerson", "DataCurator", "ProjectLeader"),
      email = "raphael.nussbaumer@vogelwarte.ch",
      path = "https://orcid.org/0000-0002-8185-1020",
      organization = "Swiss Ornithological Institute"
    )
  )

# There are no embargo by default (1970-01-01)
pkg$embargo <- "2030-01-01"

# Licences
# Code licenses are often not the same as data licences.
pkg$licenses = list(list(
  name = "CC-BY-4.0", 
  title = "Creative Commons Attribution 4.0",
  path = "https://creativecommons.org/licenses/by/4.0/"
  ))
```

In addition, here are some more optional metadata:

```{r}
# Review the description, often, you want to be more descriptive here.
# pkg$description

# Add keywords
pkg$keywords <- c("Woodland Kingfisher", "intra-african", "multi-sensor geolocator")

# Funding sources
pkg$grants <- c("Swiss Ornithological Intitute")

# Related Identifiers 
# e.g. papers, project pages, derived datasets, etc.
pkg$relatedIdentifiers <- list(
  list(
    relationType = "IsPartOf",
    relatedIdentifier = "10.5281/zenodo.11207081",
    relatedIdentifierType = "DOI"
  )
)
```

You can display all these information at any point with

```{r}
#| collapse: true
print(pkg)
```

## Add the geopressuretemplate data

`add_gldp_geopressuretemplate()` is a key function that read the geopressuretemplate data available and automatically add the most up-to-date available data to the datapackage.

```{r}
pkg <- pkg %>% add_gldp_geopressuretemplate(directory = directory)
```


If `tags.csv` and `observations.csv` are not available (i.e., not stored in the `data/` folder of your project), `tags` and `observations` resources would have been generated by `add_gldp_geopressuretemplate()` based on the available information. You certainly need to edit them manually, adding some key missing information (e.g. `ring_number`).

```{r}
#| eval: false
write.csv(tags(pkg), file = "data/tags.csv", row.names = FALSE)
write.csv(observations(pkg), file = "data/observations.csv", row.names = FALSE)
```


```{r}
#| collapse: true
print(pkg)
```

::: callout-tip
You can now see a lot of new metadata (e.g., number of tags, coverages) as well as the resources (table)! 
:::

## Check the validity of the data package

You can visualize the coverage of the package by ploting the Data Package. Check for the correct number of tags, as well as equipment and retrieval dates.

```{r}
plot(pkg)
```

::: callout-important

Finally, we check that the package is compliant with GeoLocator Data Package standards.

```{r}
#| collapse: true
validate_gldp(pkg)
```

It is quite normal that you'll first see some error here. Try to fix them and re-create the package until the package is valid. If you can't fix them, contact me!

:::


## Upload to Zenodo

### Option 1: Manually

First, create a new deposit on [Zenodo](https://zenodo.org/uploads/new) and [reserve the DOI](https://help.zenodo.org/docs/deposit/describe-records/reserve-doi/#reserve-doi) to be able to define the package `id`.

::: callout-info
The package `id` should be the [concept DOI](https://support.zenodo.org/help/en-gb/1-upload-deposit/97-what-is-doi-versioning), that is, the one that doesn't change with new versions. The DOI displayed on Zenodo is actually the DOI of the first version, but you can retrieve the concept DOI by substracting `1` to your ID number

```{r}
#| eval: false
pkg$id <- "https://doi.org/10.5281/zenodo.{ZENODO_ID - 1}"
# e.g. "10.5281/zenodo.14620590" for a DOI reserved as 10.5281/zenodo.14620591

# Update the bibliographic citation with this new DOI
pkg <- pkg %>% update_gldp_bibliographic_citation()
```
:::

Now, we can write the datapackage to file

```{r}
#| eval: false
write_package(pkg, directory = pkg$version)
```

The content of the folder created can now be uploaded on your Zenodo deposit.

::: callout-tip
You can populate all other fields on Zenodo with the information provided in `datapackage.json`! Note that a datapackage `contributors` corresponds to `creators` on Zenodo and not the `contributors`.
:::

### Option 2: Programatically

A more efficient solution is to create a deposit on Zenodo using the API. For this, you first need to [create a token](https://zenodo.org/account/settings/applications/tokens/new/) and save it to your keyring with:

```{r}
#| eval: false
keyring::key_set_with_value("ZENODO_PAT", password = "{your_zenodo_token}")
```

This allows us to create a `ZenodoManager` object which becomes useful later.

```{r}
zenodo <- ZenodoManager$new(token = keyring::key_get(service = "ZENODO_PAT"))
```

You can create a `zen4R::ZenodoRecord` object from the from `pkg`.

```{r}
z <- gldp_to_zenodo(pkg)
print(z)
```

::: callout-tip
Learn more about [the `zen4R` package](https://github.com/eblondel/zen4R/wiki)!
:::

You can create the deposit on the website. For this we need to reserve the DOI, but without publishing the record yet: there is no data!

```{r}
#| eval: false
z <- zenodo$depositRecord(z, reserveDOI = TRUE, publish = FALSE)
```

You can now open this record on your browser using its link: `z$links$self_html`

We can retrieve the concept DOI to build the pkg `id`

```{r}
#| eval: false
pkg$id <- paste0("https://doi.org/", z$getConceptDOI())
```

We can now upload the data to the deposit with (or do it manually from the website)

```{r}
#| eval: false
write_package(pkg, directory = pkg$version)
for (f in list.files(pkg$version)) {
  zenodo$uploadFile(file.path(pkg$version, f), z)
}
```

::: callout-warning
At this stage, the Zenodo record is still not published. This is voluntarily not done automatically so that you check the record before publishing.
:::

::: callout-tip
A nice feature of Zenodo is that you can share the record BEFORE publication with others (e.g., co-authors) allowing them to check everything before publication.

If any modification of the metadata are made on Zenodo, you overwrite `pkg`'s metadata with

```{r}
#| eval: false
z_updated <- zenodo$getDepositionByConceptDOI(z$getConceptDOI())
pkg <- zenodoRecord2gldp(z_updated, pkg)
```
:::
