[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A User Manual for GeoPressureR",
    "section": "",
    "text": "Introduction\nDetermining the positions, and over time trajectories, of wildlife is crucial to apprehend ecological relationships in nature. Since satellite devices (e.g. GPS) are too heavy for most bird species, lightweight geolocators remain an essential tool to track bird movement.\nGeolocation by pressure provides an exciting opportunity to determine the position of birds with high precision using small tracking devices.\nIndeed, as atmospheric pressure varies in space and time, a timeseries of pressure measurement recorded at a single location constitutes a unique signature which can be used for global positioning.\nThe GeoPressure suite helps users tackle the challenges of geolocation by pressure and provides a toolkit to implement two methods published in the following two papers:\nFor a quick overview of the method, here is a 10 min presentation:",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#data-requirements",
    "href": "index.html#data-requirements",
    "title": "A User Manual for GeoPressureR",
    "section": "Data requirements",
    "text": "Data requirements\nThe only strict requirement is that your geolocator provides a continuous timeseries of pressure (&lt;1hr resolution). Beyond this, here are a few things that can help:\n\nGeoPressureR works best for species with a clear separation between stationary and migratory periods, as opposed to birds moving continuously over time and/or gradually over large distances (10-50km) or altitude (&gt;10m). As such, aerial feeders such as swifts or bee-eaters or mountainous species do not lend themselves well to this method.\nAcceleration data can be helpful to define the periods of flight, especially if your bird flies at low altitude or if pressure data is measured on a coarse temporal resolution (&gt;15min).\nLight data can accelerate building the trajectory model by allowing to quickly narrow down possible locations during short stationary periods. Generally, for species with few long stopover, light data brings limited benefit, but it can be quite helpful for species with multiple short stopovers, and particularly if migrating on a east/west trajectory.\nKnowing the equipment and retrieval sites can also be helpful, but it also works well without it.\n\nGeoPressureR can currently read Swiss Ornithological Institute (SOI) files (*.pressure, *.lux, *.acceleration), Migrate Technology files (\"*.deg\" and \"*.lux\") and Lund CAnMove (\"*.xlsx\").\nFeel free to contact me to discuss your data and study species.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#the-geopressure-suite",
    "href": "index.html#the-geopressure-suite",
    "title": "A User Manual for GeoPressureR",
    "section": "The GeoPressure suite",
    "text": "The GeoPressure suite\nThe GeoPressure suite includes several tools:\n\n\nGeoPressureR is the main R package with functions to run the analysis.\n\nGeoPressureManual is the official user guide developed to help you learn to use GeoPressureR.\n\nGeoPressureTemplate is a template Github repository to help kickstart your project.\n\nGeoPressureAPI is the JSON API used by GeoPressureR under the hood to query the ERA5 reanalysis data with Google Earth Engine.\nGeoPressureViz is a shiny app included in GeoPressureR to visualize the trajectory of your bird. See the GeoPressureViz chapter for an introduction and the demo for 18LX.\n\nGeoLocator Data Package (DP) is a data exchange format for geolocator data.\n\nGeoLocatoR is an R package designed to handle GeoLocator Data Packages.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#structure-of-the-manual",
    "href": "index.html#structure-of-the-manual",
    "title": "A User Manual for GeoPressureR",
    "section": "Structure of the manual",
    "text": "Structure of the manual\nThis manual includes five parts:\n\n\nBasic tutorial runs through the entire workflow using a simple track of pressure only, with the example of a Swainson’s Warbler.\n\nAdvanced tutorial explores additional functionalities of the package using light, acceleration, and wind data, through the example of a Great Reed Warbler.\n\nLabelling tools introduces labelling, a critical step in the workflow. This is a complex procedure requiring a comprehensive understanding of the method and tools of the package, which is why it is described in more depth after the basic and advanced tutorials. We strongly recommended reading this section attentively for optimal results.\n\nGeoPressureTemplate defines a standard folder structure to improve readability, sharability, and reproducibility. You’ll learn more about this structure and how to start your own project.\n\nGeolocator Data Package is a data exchange format for geolocator data. In this part, you’ll learn about how to use the GeoLocatoR package to create a geolocator datapackage.\n\nFeel free to read through the manual, or to fork the repository to run the examples at your own pace.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "A User Manual for GeoPressureR",
    "section": "Installation",
    "text": "Installation\nThe best way to install the GeoPressureR package is through Github:\n\n# install.packages(\"pak\")\npak::pkg_install(\"Rafnuss/GeoPressureR\")\n\nWe can then load the package:\n\nlibrary(GeoPressureR)",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#how-to-cite",
    "href": "index.html#how-to-cite",
    "title": "A User Manual for GeoPressureR",
    "section": "How to cite?",
    "text": "How to cite?\n\nNussbaumer, R., & Nussbaumer, A. (2024). GeoPressureManual: User Manual for GeoPressureR. Zenodo. 10.5281/zenodo.10799355\n\n\n\n\n\nNussbaumer, Raphaël, Mathieu Gravey, Martins Briedis, and Felix Liechti. 2023. “Global positioning with animal‐borne pressure sensors.” Methods in Ecology and Evolution, January. https://doi.org/10.1111/2041-210X.14043.\n\n\nNussbaumer, Raphaël, Mathieu Gravey, Martins Briedis, Felix Liechti, and Daniel Sheldon. 2023. “Reconstructing bird trajectories from pressure and wind data using a highly optimized hidden Markov model.” Methods in Ecology and Evolution 2023 (February): 1–12. https://doi.org/10.1111/2041-210X.14082.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "tag-object.html",
    "href": "tag-object.html",
    "title": "\n1  Tag object\n",
    "section": "",
    "text": "1.1 Create tag\nIn this basic tutorial, we go through the main steps of GeoPressureR using only pressure data, with the example of a Swainson’s Warbler. This bird presents a short migration route, with only a few stopovers, making it easy to process and fast to compute.\nThe tag object is created based on the available data stored in \"./data/raw-tag/CB619/\" following the default structure described in GeoPressureTemplate.\ntag &lt;- tag_create(id = \"CB619\")\n\n✔ Read './data/raw-tag/CB619/CB619.deg'\n✔ Read './data/raw-tag/CB619/CB619.deg'\nYou can use the generic print() and plot() function to visualize the tag data.\nplot(tag, type = \"pressure\")\nDepending on when you equipped the bird and when your tag started recording data, you will likely need to crop your data to specific dates. As it is bad practice to modify your raw data, we recommend using the crop_start and crop_end arguments in tag_create().",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tag object</span>"
    ]
  },
  {
    "objectID": "tag-object.html#create-tag",
    "href": "tag-object.html#create-tag",
    "title": "\n1  Tag object\n",
    "section": "",
    "text": "What is a tag object?\n\n\n\nA tag is a specific geolocator or datalogger which can contain multiple sensors (e.g., pressure, light, acceleration). Because such archival tag are usually not re-equipped, we consider that it is associated with a single deployment.\nIn GeoPressureR, tag is an object (i.e., a S3 class) which is created with the raw logger data. It will be modified at each step of the workflow as it aggregates all the information needed to ultimately be able to model the bird’s trajectory.",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tag object</span>"
    ]
  },
  {
    "objectID": "tag-object.html#label-tag-into-stationary-periods",
    "href": "tag-object.html#label-tag-into-stationary-periods",
    "title": "\n1  Tag object\n",
    "section": "\n1.2 Label tag into stationary periods",
    "text": "1.2 Label tag into stationary periods\nLabelling tracks involves two steps:\n\nLabel periods of flight, which, by extension will define the STAtionary Periods (called stap in the code), during which the bird is assumed to remain at the same location (+/- tens of kilometers) and same elevation level (+/- few meters)\n\nDiscard pressure measurements which should not be used to estimate position (due to, for example, sensor error, flight, minor/short changes in elevation level, etc.)\n\n\n\n\n\n\n\nImportant note\n\n\n\nCorrectly labelling the track requires time and effort, but is key to accurately estimate the bird’s position.\nAs labelling relies on functions and tools presented later in the tutorial, we recommend first following the basic and advanced tutorials. After that, we strongly advise that you read attentively the recommendations for this step provided in Chapter 8.\n\n\n\n1.2.1 Initialize and create the label .csv file\nUse tag_label_write() to initiate the label (i.e., empty label) and create the label file to \"./data/tag-label/CB619.csv\".\n\ntag_label_write(tag)\n\nℹ No label data.\n\n\n→ Initialize automatically label using `tag_label_auto()`\n\n\n✔ './data/tag-label/CB619.csv' written successfully.\n\n\n\n1.2.2 Label manually on Trainset\nOpen https://trainset.raphaelnussbaumer.com/ and click on “Upload Tag Label” to load your .csv file. Instructions on how to label the file can be found in the dedicated chapter [labelling tracks]. Once you have finished, export the new csv file in the same folder /data/tag-label/CB619-labeled.csv (TRAINSET will automatically add -labeled in the name).\n\n\nPrint screen of the manual labelling of tag data in TRAINSET. See Chapter 8 for more information.\n\n\n1.2.3 Read labelled file\nRead the exported file with tag_label_read() to update tag$pressure (and, when relevant, tag$acceleration), with a new label column.\n\ntag &lt;- tag_label_read(tag)\nkable(head(tag$pressure))\n\n\n\ndate\nvalue\nlabel\n\n\n\n2021-07-01 02:30:10\n954.2268\n\n\n\n2021-07-01 03:00:10\n954.0889\n\n\n\n2021-07-01 03:30:10\n953.8978\n\n\n\n2021-07-01 04:00:10\n953.6862\n\n\n\n2021-07-01 04:30:10\n953.4887\n\n\n\n2021-07-01 05:00:10\n953.0179\n\n\n\n\n\n\n\n1.2.4 Compute stationary periods\ntag_label_stap() then creates the stationary periods based on these labels:\n\ntag &lt;- tag_label_stap(tag, quiet = TRUE)\nkable(head(tag$stap))\n\n\n\nstap_id\nstart\nend\n\n\n\n1\n2021-07-01 02:15:10\n2021-09-24 00:15:10\n\n\n2\n2021-09-24 11:15:10\n2021-09-24 23:45:10\n\n\n3\n2021-09-25 10:45:10\n2021-09-25 23:45:10\n\n\n4\n2021-09-26 12:45:10\n2021-09-27 04:15:10\n\n\n5\n2021-09-27 08:15:10\n2022-04-06 00:45:10\n\n\n6\n2022-04-06 10:15:10\n2022-04-07 00:15:10\n\n\n\n\n\nPlotting the pressure timeseries of tag provides additional information:\n\nplot(tag, type = \"pressure\", quiet = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nWhat is pre-processing?\n\n\n\nYou might notice some discrepancies between the raw data (grey) and the pre-processed pressure timeseries of each stationary period (colored lines).\nThe pre-processing aligns the raw timeseries data to the weather reanalysis pressure data by removing outliers and downscaling the resolution to 1hr falling on the exact hour.\nThe black dots show the discarded pressure points (i.e., outliers), corresponding to bird vertical movement rather than natural variation of pressure.\n\n\nThe function tag_label() is a wrapper for tag_label_write(), tag_label_read() and tag_label_stap(), allowing you to process the label file (i.e., CB619-labeled.csv) in a single line.",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tag object</span>"
    ]
  },
  {
    "objectID": "pressure-map.html",
    "href": "pressure-map.html",
    "title": "\n2  Pressure map\n",
    "section": "",
    "text": "2.1 Define geographical and temporal parameters of the map\nThis second chapter of the basic tutorial covers the main steps to determine the position of a bird from pressure data. This code is a direct implementation of the method introduced in Nussbaumer et al. (2023)\nThe first step is to define the characteristics of the map, by setting the following parameter to the tag object.\ntag &lt;- tag_set_map(tag,\n  extent = c(-100, -68, 0, 40), # coordinates of the map to request (W, E, S, N)\n  scale = 2, # request on a 1/2=0.5° grid, coarse, but fast\n  known = data.frame(\n    stap_id = 1,\n    known_lat = 37.286812,\n    known_lon = -82.304972\n  )\n)\nRead more about the meaning of these parameters on the documentation of the function tag_set_map(). Here are a few additional indications to select optimal parameters:",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Pressure map</span>"
    ]
  },
  {
    "objectID": "pressure-map.html#define-geographical-and-temporal-parameters-of-the-map",
    "href": "pressure-map.html#define-geographical-and-temporal-parameters-of-the-map",
    "title": "\n2  Pressure map\n",
    "section": "",
    "text": "A smaller map (small scale and tight extent) results in faster computation. However, if the extent is too small and excludes the true position of the bird, the process will still produce a trajectory, but a wrong trajectory. We recommend starting with a coarse scale = 1 or 2 and a large extent and refining these when you have a better idea of the trajectory and have completed the labelling.\nUsing the known position can significantly speeds up the computation as it excludes these stationary periods with long timeseries from the computation.\nDepending on the precision of the trajectory that you need for your study, include_min_duration can be of great help to reduce the complexity of the labelling and computation.",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Pressure map</span>"
    ]
  },
  {
    "objectID": "pressure-map.html#compute-pressure-maps",
    "href": "pressure-map.html#compute-pressure-maps",
    "title": "\n2  Pressure map\n",
    "section": "\n2.2 Compute pressure maps",
    "text": "2.2 Compute pressure maps\nWe are now ready to create the pressure maps!\nTo do so, we must match the pressure timeseries of each stationary period with the surface level pressure dataset of ERA5-Land hourly (Copernicus Climate Change Service 2019) for all possible pixels of the maps.\n\n\n\n\n\n\nHow does the GeoPressureAPI work?\n\n\n\nTo overcome the challenges of handling the large ERA5 dataset, we perform the mismatch computation on the Google Earth Engine (GEE) server which has access to the ERA5 dataset and directly returns the map of mismatch.\nGeoPressureR uses the GeoPressureAPI which serves as an interface to the GEE server.\n\n\nThe function geopressure_map() conveniently performs all the necessary steps, but we outline each step below for a comprehensive understanding.\n\n2.2.1 Compute mismatch maps\n\ntag &lt;- geopressure_map_mismatch(tag,\n  max_sample = 100,\n  margin = 20,\n  thr_mask = 0.95,\n  quiet = TRUE\n)\n\n\n\nmax_sample reduces the computational time by limiting the number of data-points used in the match. This only impacts long stationary periods where the position is well defined. During labelling, or when accuracy is not critical, it can be convenient to reduce this number between 50 to 100.\n\nmargin can be reduced to 10 or 20 if your bird does not change elevation level during its stationary period.\n\nthr_mask filter map based on absolute pressure threashold already on the GEE server to drastically reduce computational time (see below for details). It generally has little influence and can usually be left at 0.9.\n\n\n\n\n\n\n\nTaking a long time to compute?\n\n\n\nThis function is the most computationally intensive as it needs to:\n\n\nPre-process pressure: the pressure measurements are first smoothed and downscaled to a 1-hour resolution in order to match ERA-5 resolution (see geopressure_map_preprocess()).\n\nGenerate requests: Send a single request to the GeoPressureAPI to generate the Google Earth Engine (GEE) URLs, one for each stationary period which can be used to compute the maps on the GEE server. At this stage, no computation has been performed, we just generated the actual code.\n\nSend the requests: Call the URLs in parallel, which will start the computation on the GEE server.\n\nCompute and download the maps: When all requests are sent, we wait for the GEE server to return a geotiff file (map) for each stationary period.\n\nA progress bar will update you on the completion status, but the timing can be tricky to apprehend because of the computational optimization used and variability in the GEE server availability.\n\n\nThis function returns the tag with two maps: - tag$map_pressure_mask \\(\\textbf{z}_{thr}\\) is a GeoPressureR map of the proportion of data-points in the pressure timeseries which correspond to an altitude that falls between the min and max altitude of each grid cell (accounting for the margin parameter). - tag$map_pressure_mse \\(\\textbf{MSE}\\) is a GeoPressureR map of the normalized mean square error between the tag pressure timeseries and ERA5 map. The mean error is removed because we assume no specific altitude of the tag, thus allowing an altitudinal shift of the pressure timeseries. For computational efficiency, \\(\\textbf{MSE}\\) is only computed on the pixels for which \\(\\textbf{z}_{thr}&gt;thr_{mask}\\).\n\nplot(tag, type = \"map_pressure_mse\")\n\n\n\n\n\nThis is an alternative and identical way to plot a map from a tag.\n\nplot(tag$map_pressure_mask)\n\n\n\n\n\n\n2.2.2 Compute likelihood maps\nWe combine and convert these two maps into a single likelihood map using \\[f \\propto \\exp \\left(-w(n) \\frac{\\textbf{MSE}}{\\sigma^2} \\right) [\\textbf{z}_{thr}&gt;thr_{mask}]\\] where \\(\\sigma\\) is the standard deviation of pressure error and \\(thr_{mask}\\) is the threshold of the mask.\nBecause the auto-correlation of the timeseries is not accounted for in this equation, we use a log-linear pooling weight \\(w(n)=\\log(n)/n\\), where \\(n\\) is the number of data-points in the time series. See Probability aggregation for more information on this.\n\ntag &lt;- geopressure_map_likelihood(\n  tag,\n  sd = 0.5,\n  log_linear_pooling_weight = \\(n) 4 * log(n) / n\n)\n\n\n\n\n\n\n\nCalibrating sd\n\n\n\nThe standard deviation sd (\\(\\sigma\\)) plays an important role in the spread of the uncertainty of your map. It accounts for (1) error in reanalysis data (may vary spatially, but generally assumed small), (2) sensor error (also assumed low), and (3) bird vertical movement (most significant contribution). A bird moving up and down a tall tree (1 hPa = 10 m) is likely to affect the match.\nThis value should ideally be calibrated, but it is usually safe to start with a value of 1. We see how to adjust this value in check #4 of the labelling procedure. Swainson’s Warbler tend to stay low with small pressure variation such that a value of 0.5 is more adequate. In addition, following several trial and error test, we found that scaling the log linear pooling function to 4 * log(n) / n provides more satifying result.\n\n\nThe resulting pressure likelihood map can be visualized with:\n\nplot(tag$map_pressure)\n\n\n\n\n\nNote that the threshold of the mask is performed directly on the GEE server, i.e., with geopressure_map_mismatch(). This allows to compute the MSE only for pixels which are within the threshold, thus reducing the computational cost significantly.\nThe geopressure_map() function is a wrapper of geopressure_map_mismatch() and geopressure_map_likelihood(). By default, it delete the mask and MSE map to save space (see the keep_mask and keep_mse parameters).\n\n\n\n\nCopernicus Climate Change Service. 2019. “ERA5-Land Hourly Data from 1950 to Present.” Copernicus Climate Change Service (C3S) Climate Data Store (CDS). https://doi.org/10.24381/CDS.E2161BAC.\n\n\nNussbaumer, Raphaël, Mathieu Gravey, Martins Briedis, and Felix Liechti. 2023. “Global positioning with animal‐borne pressure sensors.” Methods in Ecology and Evolution, January. https://doi.org/10.1111/2041-210X.14043.",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Pressure map</span>"
    ]
  },
  {
    "objectID": "trajectory.html",
    "href": "trajectory.html",
    "title": "\n3  Trajectory\n",
    "section": "",
    "text": "3.1 Background on movement modeling\nIn this last chapter of the basic tutorial, we model the full trajectory of the Swainson’s Warbler by combining the observation model of pressure with a movement model of flight accounting for likely speed to constrain possible distances between stationary periods. To do so, we use a highly optimized Hidden Markov model presented in Nussbaumer et al. (2023).\nThis involves three main steps:\nIf you haven’t heard of Hidden Markov model, state-space models, or trellis graphs, I recommend that you start by reading the summary below, or - even better - read Patterson et al. (2008) and Nussbaumer et al. (2023) if you’re feeling brave!",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trajectory</span>"
    ]
  },
  {
    "objectID": "trajectory.html#background-on-movement-modeling",
    "href": "trajectory.html#background-on-movement-modeling",
    "title": "\n3  Trajectory\n",
    "section": "",
    "text": "Click here to read a short summary of movement model\n\n\n\n\n\n\nNote\n\n\n\nWe start by making the fundamental assumption that the overall trajectory can be separated into discrete positions which, together, create a trajectory.\nThis discretization allows us to use a Hidden Markov model, which conveniently distinguishes the unknown positions of a bird \\(X_t\\) from some known observations \\(Y_t\\) which can be related to these positions (e.g., pressure or light measurement). Defining an HMM requires that we set:\n\nAn observation model \\(P(Y_t | X_t)\\), which defines the likelihood of observing a measurement at a given position. This is exactly what our pressure likelihood map computed in the previous chapter does.\nA movement model \\(P(X_t+1|X_t)\\), defining the probability that a bird was able to fly a specific distance between two consecutive stationary periods.\nAn initial state \\(P(X_0)\\), technically required but this does not constitute a strong constraint in our case.\n\nLet’s say that our goal is to produce the probability map for each stationary period accounting for all pressure measurements while maintaining likely flights. This corresponds to the marginal probability map \\(P(X_t=x_t|Y_0=y_0,...Y_t=y_t)\\). If you are not familiar with the lower and capital case, \\(X_t\\) represents the random variable (i.e., the position of the bird at a stationary period \\(t\\)), while \\(x_t\\) is a specific value that \\(X\\) can take, in our case, the specific coordinates of pixels on the map.\nBecause the number of possible positions is limited (i.e., number of pixels on the map), we can solve the HMM exactly. This is in contrast to Markov Chain Monte Carlo (MCMC) algorithm, which does not assume any discretization of space but relies on an iterative approach to solve the model.\nA graph is a convenient mathematical representation of a model which has states (nodes) and relations between these states (edges). Graphs are a general and fundamental mathematical tool, but here we use a specific graph structure corresponding to the HMM presented above: two states \\(X\\) and \\(Y\\) for each time step \\(t\\) (nodes), and an observation and movement model (relating \\(X_t\\) to \\(X_t+1\\) and \\(Y_t\\) to \\(X_t\\) respectively). All other relationships are assumed to be independent.\nTypically in animal movement, the graph is only used to represent the random variable of the HMM, but in our case, we also use the concept of graph to store all discrete positions (i.e., pixels) of the bird at all timesteps, referred to as a trellis graphs.\nYou can think of the nodes as a full 3D grid of lat x lon x stationary period and the edges as all possible pairs of nodes between two consecutive stationary periods. As you can imagine, this results in a very high number of edges! The novelty of Nussbaumer et al. (2023) is to construct this graph using only the useful nodes and edges, thereby dramatically reducing the computational resources required.",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trajectory</span>"
    ]
  },
  {
    "objectID": "trajectory.html#create-the-graph",
    "href": "trajectory.html#create-the-graph",
    "title": "\n3  Trajectory\n",
    "section": "\n3.2 Create the graph",
    "text": "3.2 Create the graph\nWe create the trellis graph with the function graph_create(), which performs the following steps:\n\nKeep only the nodes of all locations within a threshold percentile of the likelihood map thr_likelihood. For instance, a value of 0.90 means that We only keep the pixels for which their likelihood sums represent 90% of the total probability space.\nKeep only the nodes which are within reach of at least one node of the previous and one of the next stationary period. This is done by assuming a maximal possible groundspeed thr_gs. This key step is efficiently computed with the image binary distance function EBImage::distmap().\nBuild the edges based on the filtered nodes and the groundspeed threshold thr_gs.\nPrune the graph based on the flow graph constraint, that is, that all nodes must be connected to the equipment node(s) and retrieval node(s), to avoid dead branches (where some nodes are connected in a single direction).\n\nThese steps are explained and illustrated in more detail in section 2.2 of Nussbaumer et al. (2023)\n\ngraph &lt;- graph_create(tag,\n  thr_likelihood = 0.90,\n  thr_gs = 100, # km/h\n  quiet = TRUE\n)",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trajectory</span>"
    ]
  },
  {
    "objectID": "trajectory.html#set-movement-model",
    "href": "trajectory.html#set-movement-model",
    "title": "\n3  Trajectory\n",
    "section": "\n3.3 Set movement model",
    "text": "3.3 Set movement model\nWe then define the movement model by setting a parametric function converting groundspeed to probability.\nIn this basic tutorial, we use the gamma distribution to model the probability of groundspeed.\n\ngraph &lt;- graph_set_movement(graph,\n  method = \"gamma\",\n  shape = 7,\n  scale = 7,\n  low_speed_fix = 15\n)\n\nBecause birds may fly back and forth over small distances, we give all groundspeeds under 15km/h the same probability as for 15 km/h with the parameter low_speed_fix.\nWe can visualize the parametric function created with plot_graph_movement()\n\nplot_graph_movement(graph)",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trajectory</span>"
    ]
  },
  {
    "objectID": "trajectory.html#products",
    "href": "trajectory.html#products",
    "title": "\n3  Trajectory\n",
    "section": "\n3.4 Products",
    "text": "3.4 Products\nWith the graph built, we can now generate the three main products of GeoPressureR, presented in more detail in section 2.3 of Nussbaumer et al. (2023).\n\n3.4.1 Product 1: Most likely path\nThe graph can directly and efficiently compute the most likely path, that is, the set of positions at each stationary period which maximizes the joint probability of the trajectory. It finds the optimal compromise between the most likely position according to the pressure (and light) likelihood map and the realistic flight distance defined by the movement model.\n\npath_most_likely &lt;- graph_most_likely(graph, quiet = TRUE)\n\nIn GeoPressureR, a path is a standard data.frame created and used in several other functions.\n\nkable(head(path_most_likely, 3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstap_id\nj\nind\nlat\nlon\nstart\nend\ninclude\nnb_sample\nknown\n\n\n\n1\n1\n2806\n37.28681\n-82.30497\n2021-07-01 02:15:10\n2021-09-24 00:15:10\nTRUE\n0\nTRUE\n\n\n2\n1\n3056\n32.25000\n-80.75000\n2021-09-24 11:15:10\n2021-09-24 23:45:10\nTRUE\n13\nFALSE\n\n\n3\n1\n3147\n26.75000\n-80.25000\n2021-09-25 10:45:10\n2021-09-25 23:45:10\nTRUE\n14\nFALSE\n\n\n\n\nplot_path(path_most_likely)\n\n\n\n\n\n\n3.4.2 Product 2: Marginal probability map\nEstimating the uncertainty of the bird’s position for each stationary period is generally the most sought-after output of tracking studies. While the pressure likelihood map provides some information for each stationary period, we can now produce the probability map of positions accounting for all observations and transitions. In the HMM, these maps correspond to the marginal distribution of a Markov process.\n\nmarginal &lt;- graph_marginal(graph, quiet = TRUE)\n\nYou can visualize the marginal map along with the most likely path:\n\nplot(marginal, path = path_most_likely)\n\n\n\n\n\n\n3.4.3 Product 3: Simulated paths\nWhen you want to perform a post-hoc computation on the trajectory (e.g., mean flight distance), it is convenient to simulate multiple paths, compute the metric on each of them (e.g., flight distance) and compute the summary statistics afterwards (e.g., mean).\nNote that we are using the forward filtering backward sampling algorithm, allowing to sample trajectories independently and without error.\n\npath_simulation &lt;- graph_simulation(graph,\n  nj = 10, # Number of simulation\n  quiet = TRUE\n)\n\n\nplot_path(path_simulation, plot_leaflet = FALSE)",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trajectory</span>"
    ]
  },
  {
    "objectID": "trajectory.html#save",
    "href": "trajectory.html#save",
    "title": "\n3  Trajectory\n",
    "section": "\n3.5 Save",
    "text": "3.5 Save\nYou might want to save some of the key objects such as tag or marginal in an R format. Following the default structure described in GeoPressureTemplate, you should save them in the \"./data/interim\" folder.\nNote that graph can be quite large if the number of stationary periods and grid resolution is high.\n\nsave(tag,\n  graph, # format(object.size(graph), units = \"MB\")\n  path_most_likely,\n  path_simulation,\n  marginal,\n  file = \"./data/interim/CB619.RData\"\n)\n\nWhen saving tag and graph, you also archive the functions parameters used, which can be retrieved with tag$param and graph$param.\n\n\n\n\nNussbaumer, Raphaël, Mathieu Gravey, Martins Briedis, Felix Liechti, and Daniel Sheldon. 2023. “Reconstructing bird trajectories from pressure and wind data using a highly optimized hidden Markov model.” Methods in Ecology and Evolution 2023 (February): 1–12. https://doi.org/10.1111/2041-210X.14082.\n\n\nPatterson, Toby A., Len Thomas, Chris Wilcox, Otso Ovaskainen, and Jason Matthiopoulos. 2008. “State-space models of individual animal movement.” Trends in Ecology and Evolution 23 (2): 87–94. https://doi.org/10.1016/j.tree.2007.10.009.",
    "crumbs": [
      "Basic tutorial",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trajectory</span>"
    ]
  },
  {
    "objectID": "light-map.html",
    "href": "light-map.html",
    "title": "\n4  Light map\n",
    "section": "",
    "text": "4.1 Basic tutorial catch up\nIn the advanced tutorial, we will construct the same three products with a Great Reed Warbler (18LX), this time including light and wind data.\nThis first chapter focuses on constructing a likelihood map from light data. This step is optional in the workflow, but can be helpful in most case. Typically, it is quite informative for short stopovers with long flights before and after. It can also be helpful to cross-check pressure map can reduce the computational cost of the creation of the graph.\nHere, we use an approach based on the threshold method and using a calibration of zenith angle (rather than time of sunrise). This approach is presented in more detail in section 2.4 of Nussbaumer et al. (2023).\nA more thorough introduction to geolocation with light data can be found in the geolocation manual (Lisovski et al. 2020). Note that other methods producing likelihood maps could also be used such as the ones presented in Basson et al. (2016) or Bindoff et al. (2018).\nBefore getting into light data, we first need to create, label, and set the map for the tag object. We essentially perform the same steps than in [tag object] and [pressure map] in just a few lines using the native pipe operator |&gt;. Note that this assumes the labelling has already been done.\ntag &lt;- tag_create(\"18LX\",\n  crop_start = \"2017-06-20\",\n  crop_end = \"2018-05-02\",\n  quiet = TRUE\n) |&gt;\n  tag_label(quiet = TRUE) |&gt;\n  tag_set_map(\n    extent = c(-16, 23, 0, 50),\n    scale = 4,\n    known = data.frame(\n      stap_id = 1,\n      known_lat = 48.9,\n      known_lon = 17.05\n    )\n  ) |&gt;\n  geopressure_map(quiet = TRUE)",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Light map</span>"
    ]
  },
  {
    "objectID": "light-map.html#estimate-twilights",
    "href": "light-map.html#estimate-twilights",
    "title": "\n4  Light map\n",
    "section": "\n4.2 Estimate twilights",
    "text": "4.2 Estimate twilights\nWe find the twilight (time of sunrise and sunset every day) with twilight_create(), which performs the same tasks as TwGeos::FindTwilight(), but using a matrix representation. This approach is faster but less general (e.g., requires regularly spaced light data).\nBy default, the threshold of light is twl_thr = NULL is defined as the the first and last light of the day (i.e., tag$light$vale&gt;0). The twl_offset parameter is used to center the night/day for the matrix representation of light. A good centering is necessary to find the correct twilights.\n\ntag &lt;- twilight_create(tag, twl_thr = NULL, twl_offset = NULL)\n\nWe can visualize the twilight and check the centering of the day.\n\nplot(tag, type = \"twilight\")\n\n\n\n\n\n\n\nRe-run twilight_create with a different twl_offset until the night/day is properly centered.\nBecause we have already label the stationary period before, the plot indicates which stationary period the twilight belongs to with the dot color. This can be useful to distinguish outliers from a change in the bird position.",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Light map</span>"
    ]
  },
  {
    "objectID": "light-map.html#manual-labelling-of-twilight",
    "href": "light-map.html#manual-labelling-of-twilight",
    "title": "\n4  Light map\n",
    "section": "\n4.3 Manual labelling of twilight",
    "text": "4.3 Manual labelling of twilight\nTwilight outliers should be discarded from the analysis using Trainset https://trainset.raphaelnussbaumer.com/.\nUse twilight_label_write() to generate the twilight label csv file.\n\ntwilight_label_write(tag)\n\n✔ './data/twilight-label/18LX.csv' written successfully.\n\n\nClick on “Upload Twilight Label” to customize the interface for twilight labelling. Similar to tag labelling, simply label the twilights to be ignored with the \"discard\" label.\n\n\n\n\n\n\nHow to pick out outliers?\n\n\n\nTwilight outliers can be picked out visually when they don’t follow a smooth line.\nThe color of the dots indicative of the stationary period can be helpful to pick out outliers from a change in the bird’s position: while changes in twilight within a stationary period should be smooth, changes between positions can be abrupt.\nNote that modifying the label of twilight to a different stationary period has no influence later on, as only \"discard\" labels are read with twilight_label_read().\nAvoid Over-edit the calibration period. The variability of twilight is important to build a calibration which adequately captures the range of uncertainty of a twilight. As it is easier to pick out outliers during long stationary periods (calibration period) than during shorter ones, there is a risk of having more variability during short stationary periods and thus biases in the estimated position.\n\n\nWhen you have finished labelling, export the file in the same folder keeping -labeled in the name (automatically added by Trainset).\n\ntag &lt;- twilight_label_read(tag)\nplot(tag, type = \"twilight\")",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Light map</span>"
    ]
  },
  {
    "objectID": "light-map.html#compute-likelihood-map",
    "href": "light-map.html#compute-likelihood-map",
    "title": "\n4  Light map\n",
    "section": "\n4.4 Compute likelihood map",
    "text": "4.4 Compute likelihood map\nThe computation of the light likelihood map for each stationary period is performed with geolight_map() and follows these three steps:\n\nPerform a calibration of the zenith angle (i.e., the angle of the sun at sunrise and sunset) with a kernel density (see stats::kernel()). This requires knowing the position of the bird for a least one stationary period. This position should be specified with the known data.frame in tag_set_map().\nCompute a likelihood map for each twilight. This step consists of computing, for each pixel of the map, the zenith angle and the corresponding probability using the calibrated kernel distribution.\nAggregate all likelihood maps of the same stationary period into a single map using a log-linear pooling. See probability aggregation for more information on log-linear pooling.\n\n\ntag &lt;- geolight_map(tag,\n  twl_calib_adjust = 1.4,\n  twl_llp = function(n) log(n) / n,\n  quiet = TRUE\n)\n\nThe twl_calib_adjust parameter adjusts the smoothness of the fit (see stats::density()). Because the zenith angle error model is fitted with data only at the calibration site, and we are using it for all locations of the bird’s journey, it is safer to assume a broader/smoother distribution (twl_calib_adjust &gt; 1).\nIt is recommended to always check the calibration fit tag$param$twl_calib with\n\nbarW &lt;- median(diff(tag$param$geolight_map$twl_calib$x)) / 2\nplot(tag$param$geolight_map$twl_calib, xlim = c(85, 100))\nrect(xleft = tag$param$geolight_map$twl_calib$x - barW, ybottom = 0, xright = tag$param$geolight_map$twl_calib$x + barW, ytop = tag$param$geolight_map$twl_calib$y, col = gray(0.5))\nlines(tag$param$geolight_map$twl_calib, col = \"red\")\n\n\n\n\n\n\n\nFinally, we can visualize the probability map for each stationary period:\n\nplot(tag, type = \"map_light\")\n\n\n\n\n\n\n\n\n\n\n\nLight map vs pressure map?\n\n\n\nIt is worth checking how the likelihood map of light and pressure compare before building the graph. They should always overlap. If this is not the case, the tag and/or twilight labelling needs to be adjusted.\nThis task is best performed with GeoPressureViz, presented in its dedicated chapter. For now, we can simply visualize the resulting likelihood map of pressure and light combine.\n\nplot(tag, type = \"map\")",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Light map</span>"
    ]
  },
  {
    "objectID": "light-map.html#check-light-label",
    "href": "light-map.html#check-light-label",
    "title": "\n4  Light map\n",
    "section": "\n4.5 Check light label",
    "text": "4.5 Check light label\nIn the same way that pressure label needs to be check, light label can also be checked. The idea is to compute the estimated trajectory, compute the twilights along this trajectory and compared the the empirical twilight measured/computed above. We use here tag2path() which compute the the most likely position for each stationary periods (i.e. regardless of flight duration/movement model). We interpolate each position below 2 days to avoid unrealistic position estimate.\n\npath &lt;- tag2path(tag, interp = 2)\n\nThis path can be visualized with plot_path(path)\nWe can compute the theoretical twilights which should be observed by a bird on this path using path2twilight()\n\ntwilight_line &lt;- path2twilight(path)\n\nThis theoretical twilight can be compared to the empirical one using the plot_tag_twilight()\n\nplot_tag_twilight(tag, twilight_line = twilight_line, plot_plotly = T)\n\n\n\n\n\n\n\n\n\nBasson, Marinelle, Mark V. Bravington, Jason R. Hartog, and Toby A. Patterson. 2016. “Experimentally Derived Likelihoods for Light-Based Geolocation.” Methods in Ecology and Evolution 7 (August): 980–89. https://doi.org/10.1111/2041-210X.12555.\n\n\nBindoff, Aidan D., Simon J. Wotherspoon, Christophe Guinet, and Mark A. Hindell. 2018. “Twilight‐free Geolocation from Noisy Light Data.” Edited by David Orme. Methods in Ecology and Evolution 9 (May): 1190–98. https://doi.org/10.1111/2041-210X.12953.\n\n\nLisovski, Simeon, Silke Bauer, Martins Briedis, Sarah C. Davidson, Kiran L. Dhanjal‐Adams, Michael T. Hallworth, Julia Karagicheva, et al. 2020. “Light‐level Geolocator Analyses: A User’s Guide.” Edited by Garrett Street. Journal of Animal Ecology 89 (January): 221–36. https://doi.org/10.1111/1365-2656.13036.\n\n\nNussbaumer, Raphaël, Mathieu Gravey, Martins Briedis, and Felix Liechti. 2023. “Global positioning with animal‐borne pressure sensors.” Methods in Ecology and Evolution, January. https://doi.org/10.1111/2041-210X.14043.",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Light map</span>"
    ]
  },
  {
    "objectID": "trajectory-with-wind.html",
    "href": "trajectory-with-wind.html",
    "title": "\n5  Trajectory with wind\n",
    "section": "",
    "text": "5.1 Download wind data\nIn this second chapter of the advanced tutorial, we will see how to model the trajectory of the Great Reed Warbler using wind data.\nWind can significantly influence a bird’s movement, explaining up to 50% of the displacement! Accounting for wind allows to estimate the airspeed of each transition rather than groundspeed. As such, the movement model can be defined as the probability of a bird’s airspeed, which is much more constrained and precise. This approach is presented in detail in section 2.2.4 of Nussbaumer et al. (2023).\nWind data is available at high resolution (1hr, 0.25°, 37 pressure level) on ERA5 hourly data on pressure levels (Copernicus Climate Change Service 2018). This data is easily accessible through the ecmwfr package.\nAs the flights tend to be of short duration, we suggest downloading a file for each flight. This can be done automatically with tag_download_wind(), which uses wf_request_batch() to make all the requests in parallel.\ntag_download_wind(\n  tag,\n  variable = c(\"u_component_of_wind\", \"v_component_of_wind\", \"temperature\")\n)\nYou can monitor the requests at [https://cds.climate.copernicus.eu/requests]. The files will be downloaded in data/wind/",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Trajectory with wind</span>"
    ]
  },
  {
    "objectID": "trajectory-with-wind.html#download-wind-data",
    "href": "trajectory-with-wind.html#download-wind-data",
    "title": "\n5  Trajectory with wind\n",
    "section": "",
    "text": "Caution\n\n\n\nLearn how to set-up your ECMWF account to be able to download ERA5 data on the GeoPressureTemplate/Download Wind page.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn addition to the two required wind variable, we also downloaded the temperature data during the flights. This will later allows us to retrieve temperature data at the exact location of the bird during the flight. See tag_download_wind() documentation for more informations on the available variables.\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn case you have a lot of tracks for which you need to download wind data and don’t want to block your console, you might consider using an RStudio background job, which can be easily called with the job package:\n\njob::job({\n  tag_download_wind(tag)\n})",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Trajectory with wind</span>"
    ]
  },
  {
    "objectID": "trajectory-with-wind.html#create-graph",
    "href": "trajectory-with-wind.html#create-graph",
    "title": "\n5  Trajectory with wind\n",
    "section": "\n5.2 Create graph",
    "text": "5.2 Create graph\nSimilar to the example of the Swainson’s Warbler in the basic tutorial, we first need to create the trellis graph:\n\ngraph &lt;- graph_create(tag, quiet = TRUE)",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Trajectory with wind</span>"
    ]
  },
  {
    "objectID": "trajectory-with-wind.html#add-wind-to-graph",
    "href": "trajectory-with-wind.html#add-wind-to-graph",
    "title": "\n5  Trajectory with wind\n",
    "section": "\n5.3 Add wind to graph",
    "text": "5.3 Add wind to graph\nWe then compute the average windspeed experienced by the bird for each edge of the graph. This process can be quite long as we need to interpolate the position of the bird along its flight on a 4D grid (latitude-longitude-pressure level-time).\nWe then compute the airspeed based on this windspeed and the known groundspeed. All of these are stored as complex values with the real part representing the E-W component and the imaginary part corresponding to the N-S component.\n\ngraph &lt;- graph_add_wind(graph, pressure = tag$pressure, quiet = TRUE)",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Trajectory with wind</span>"
    ]
  },
  {
    "objectID": "trajectory-with-wind.html#define-movement-model",
    "href": "trajectory-with-wind.html#define-movement-model",
    "title": "\n5  Trajectory with wind\n",
    "section": "\n5.4 Define movement model",
    "text": "5.4 Define movement model\nWhile you can still define the movement model with a parametric function (i.e., gamma or logit), we find it more intuitive to use the mechanical power curve. The power curve expresses the energy required for a bird to fly at a certain airspeed based on aerodynamic theory. See more details in section 2.2.5 of Nussbaumer et al. (2023).\nFirst, we search for morphological information on the Great Reed Warbler using the AVONET database (Tobias et al. 2022).\n\nbird &lt;- bird_create(\"Acrocephalus arundinaceus\")\n\nUsing the bird created, we can set the movement model by converting the airspeed to power, and power to a probability. This second step is still a parametric equation, which can be manually defined with power2prob.\n\ngraph &lt;- graph_set_movement(graph,\n  method = \"power\",\n  bird = bird,\n  power2prob = \\(power) (1 / power)^3,\n  low_speed_fix = 15\n)\nplot_graph_movement(graph)",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Trajectory with wind</span>"
    ]
  },
  {
    "objectID": "trajectory-with-wind.html#products",
    "href": "trajectory-with-wind.html#products",
    "title": "\n5  Trajectory with wind\n",
    "section": "\n5.5 Products",
    "text": "5.5 Products\nWe can then compute the same three products as for the Swainson’s Warbler:\n\npath_most_likely &lt;- graph_most_likely(graph, quiet = TRUE)\nmarginal &lt;- graph_marginal(graph, quiet = TRUE)\npath_simulation &lt;- graph_simulation(graph, nj = 10, quiet = TRUE)\n\n\nplot(marginal, path = path_most_likely)\n\n\n\n\n\n\nplot_path(path_simulation, plot_leaflet = FALSE)\n\n\n\n\n\n\n\n\n5.5.1 Extract flight information\nThe pathvariable contains all the information at the scale of the stationary period. However, to get flight information, you need to extract variable of the edge of the graph. path2edge() is the function for that!\n\nedge_simulation &lt;- path2edge(path_simulation, graph)\nedge_most_likely &lt;- path2edge(path_most_likely, graph)\nknitr::kable(head(edge_most_likely, 3), digits = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstap_s\nstap_t\nj\ns\nt\nlat_s\nlat_t\nlon_s\nlon_t\nstart\nend\nduration\nn\ndistance\nbearing\ngs\nws\n\n\n\n1\n1\n2\n1\n26405\n57010\n48.9\n47.6\n17.0\n16.4\n2017-08-04 19:47:30\n2017-08-04 23:17:30\n3.5\n1\n150.4\n-160.3\n-16.1-39.7i\n13.9-12.8i\n\n\n12\n2\n3\n1\n57010\n86621\n47.6\n44.9\n16.4\n14.4\n2017-08-05 19:27:30\n2017-08-06 02:52:30\n7.4\n1\n342.4\n-152.5\n-21.3-41.0i\n-5.5-6.9i\n\n\n22\n3\n4\n1\n86621\n118434\n44.9\n41.6\n14.4\n15.1\n2017-08-06 19:12:30\n2017-08-07 03:17:30\n8.1\n1\n366.2\n170.2\n7.8-44.7i\n-8.6-19.7i\n\n\n\n\n\n\n\n\n\n\n\nIt’s a good idea to check the distribution of ground speed (gs), winspeed (ws) and airspeed (as) and check for any outliers which might come from error in the labelling. Here you can see the high groundspeed (&gt;100km/h between stap 24 and 25) which is nicely explained by wind, as the corresponding airspeed is perfectly normal (~50km/h)\nWe can (and should) also check that our movement model is coherent with the distribution of flight speed assumed in the movement model:\n\nplot_graph_movement(graph) +\n  geom_histogram(\n    data = data.frame(as = abs(edge_simulation$gs - edge_simulation$ws)),\n    aes(x = as, y = after_stat(count) / sum(after_stat(count))),\n    color = \"black\", fill = NA, bins = 100\n  )\n\n\n\n\n\n\n\nIf you find anomalous flight speed, it might be worth checking if this/these flight(s) have been correctly labelled.",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Trajectory with wind</span>"
    ]
  },
  {
    "objectID": "trajectory-with-wind.html#save",
    "href": "trajectory-with-wind.html#save",
    "title": "\n5  Trajectory with wind\n",
    "section": "\n5.6 Save",
    "text": "5.6 Save\ngraph can become extremely big for such models and it might not be recommended to save it. Check its size with format(object.size(graph), units = \"MB\").\n\nsave(\n  tag,\n  graph,\n  path_most_likely,\n  path_simulation,\n  marginal,\n  edge_simulation,\n  edge_most_likely,\n  file = \"./data/interim/18LX.RData\"\n)\n\n\n\n\n\nCopernicus Climate Change Service. 2018. “ERA5 Hourly Data on Pressure Levels from 1940 to Present.” Copernicus Climate Change Service (C3S) Climate Data Store (CDS). https://doi.org/10.24381/CDS.BD0915C6.\n\n\nNussbaumer, Raphaël, Mathieu Gravey, Martins Briedis, Felix Liechti, and Daniel Sheldon. 2023. “Reconstructing bird trajectories from pressure and wind data using a highly optimized hidden Markov model.” Methods in Ecology and Evolution 2023 (February): 1–12. https://doi.org/10.1111/2041-210X.14082.\n\n\nTobias, Joseph A., Catherine Sheard, Alex L. Pigot, Adam J. M. Devenish, Jingyi Yang, Ferran Sayol, Montague H. C. Neate-Clegg, et al. 2022. “AVONET: Morphological, Ecological and Geographical Data for All Birds.” Edited by Tim Coulson. Ecology Letters 25 (3): 581–97. https://doi.org/10.1111/ele.13898.",
    "crumbs": [
      "Advanced tutorial",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Trajectory with wind</span>"
    ]
  },
  {
    "objectID": "pressurepath.html",
    "href": "pressurepath.html",
    "title": "\n6  Pressurepath\n",
    "section": "",
    "text": "6.1 Timeseries at a single position\nIn this chapter, we will see what a pressurepath object is and how to use it to compute the altitude of the bird throughout its trajectory.\nLet’s load the tag from the Great Reed Warbler (18LX) created in the advanced tutorial.\nBefore creating a full pressurepath, we start with the basic building block of a pressurepath, which is to retrieve the pressure timeseries from ERA5 at a single location with geopressure_timeseries.\ngeopressure_timeseries relies on the pressure timeseries entry point of GeoPressureAPI which return the timeseries of pressure at a given latitude and longitude.\nLet’s start by retrieving the pressure at the known site of equipment, querying the same date as the first stationary period.\nts &lt;- geopressure_timeseries(\n  lat = tag$stap$known_lat[1],\n  lon = tag$stap$known_lon[1],\n  start_time = tag$stap$start[1],\n  end_time = tag$stap$end[1],\n  quiet = TRUE\n)\nWe can compare the retrieved ERA5 pressure to the pressure measured on the Great Reed Warbler:\np &lt;- ggplot() +\n  geom_line(data = ts, aes(x = date, y = surface_pressure, colour = \"ERA5\")) +\n  geom_line(data = tag$pressure[tag$pressure$stap_id == 1, ], aes(x = date, y = value, colour = \"tag\")) +\n  theme_bw() +\n  ylab(\"Pressure (hPa)\") +\n  scale_color_manual(values = c(\"ERA5\" = \"black\", \"tag\" = \"red\"))\nlayout(ggplotly(p), legend = list(orientation = \"h\"))",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pressurepath</span>"
    ]
  },
  {
    "objectID": "pressurepath.html#timeseries-at-a-single-position",
    "href": "pressurepath.html#timeseries-at-a-single-position",
    "title": "\n6  Pressurepath\n",
    "section": "",
    "text": "Eureka!\n\n\n\nThis was the figure that made me realize the potential of pressure measurement to determine birds’ position! The accuracy of the reanalysis data and the precision of the sensor were such that a timeseries of pressure had only a few possible options on the map.",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pressurepath</span>"
    ]
  },
  {
    "objectID": "pressurepath.html#pressurepath",
    "href": "pressurepath.html#pressurepath",
    "title": "\n6  Pressurepath\n",
    "section": "\n6.2 Pressurepath",
    "text": "6.2 Pressurepath\n\n\n\n\n\n\nWhat is a pressurepath?\n\n\n\nYou can think of a pressurepath as the timeseries of pressure that a tag would record on a bird traveling along a specified path. To do that, pressurepath_create() calls geopressure_timeseries() for each stationary period and combines the resulting timeseries of ERA5 pressure.\nThe pressurepath data.frame returned also contains the original pressure pressure_tag which can be very helpful for labelling and the altitude of the bird corrected for the natural variation of pressure.\n\n\n\npressurepath &lt;- pressurepath_create(\n  tag,\n  path = path_most_likely,\n  quiet = TRUE\n)\n\nNote that if a position on the path is over water, it is automatically moved to the closest point onshore as we use ERA5 Land.\n\nplot_pressurepath(pressurepath)",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pressurepath</span>"
    ]
  },
  {
    "objectID": "pressurepath.html#altitude-above-sea-level",
    "href": "pressurepath.html#altitude-above-sea-level",
    "title": "\n6  Pressurepath\n",
    "section": "\n6.3 Altitude above sea level",
    "text": "6.3 Altitude above sea level\nThe main benefit of creating pressurepath is the ability to retrieve ERA5 variable along the the trajectory of the bird. One of them is altitude which can be directly plot with\n\nplot_pressurepath(pressurepath, type = \"altitude\")\n\n\n\n\n\n\n\n\n\n\n\nWhy use GeoPressureAPI for altitude?\n\n\n\nComputing the bird altitude \\(z_{gl}\\) from its pressure measurement \\(P_{gl}\\) is best performed with the barometric equation\n\\[ z_{gl}=z_0 + \\frac{T_0}{L_b}  \\left( \\frac{P_{gl}}{P_0} \\right) ^{\\frac{RL_b}{g M}-1},\\]\nwhere \\(L_b\\) is the standard temperature lapse rate, \\(R\\) is the universal gas constant, \\(g\\) is the gravity constant and \\(M\\) is the molar mass of air.\nIt is typical to assume a standard atmosphere with fixed \\(T_0=15°C\\), \\(P_0=1013.25 hPa\\) and \\(z_0=0 m\\),\n\nLb &lt;- -0.0065\nR &lt;- 8.31432\ng0 &lt;- 9.80665\nM &lt;- 0.0289644\nT0 &lt;- 273.15 + 15\nP0 &lt;- 1013.25\npressurepath$altitude_uncorrected &lt;- T0 / Lb * ((pressurepath$pressure_tag / P0)^(-R * Lb / g0 / M) - 1)\n\nHowever, we know that pressure and temperature vary considerably over time and space, leading to approximation in the altitude estimated.\nUsing GeoPressureAPI, we can adjust the barometric equation with the actual ground-level pressure \\(P_{ERA}\\) and ground temperature \\(T_{ERA}\\) retrieved from ERA5 at the bird’s location \\(x\\), \\[ z_{gl}(x)=z_{ERA5}(x) + \\frac{T_{ERA5}(x)}{L_b}  \\left( \\frac{P_{gl}}{P_{ERA5}(x)} \\right) ^{\\frac{RL_b}{g M}-1},\\]\nSee more information on the GeoPressureAPI documentation.\nWe can compare these two altitudes for the first stationary period,\n\n\n\n\n\n\nThe uncorrected altitude estimate incorrectly produces a 200m amplitude error in the altitude due to the natural variation of pressure. In contrast, the corrected altitude shows that the Great Reed Warbler mostly stayed at the same location/altitude during the entire period.",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pressurepath</span>"
    ]
  },
  {
    "objectID": "pressurepath.html#altitude-above-ground-level",
    "href": "pressurepath.html#altitude-above-ground-level",
    "title": "\n6  Pressurepath\n",
    "section": "\n6.4 Altitude above ground level",
    "text": "6.4 Altitude above ground level\nIn order to estimate the flight altitude above ground level, we need to retrieve the ground level elevation along the path. This can be done with path2elevation().\n\nelevation &lt;- path2elevation(path_most_likely,\n  scale = tag$param$tag_set_map$scale,\n  sampling_scale = tag$param$tag_set_map$scale * 2,\n  percentile = c(10, 50, 90)\n)\n\nNote that because of the imprecision of the position, particularly during flight, it’s important to analyse with caution the relationship between flight altitude and ground elevation. path2elevation() aggregate the elevation across a larger area defined by scale and return different percentile.",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pressurepath</span>"
    ]
  },
  {
    "objectID": "pressurepath.html#retrieve-era5-variables-and-sunrise-along-path",
    "href": "pressurepath.html#retrieve-era5-variables-and-sunrise-along-path",
    "title": "\n6  Pressurepath\n",
    "section": "\n6.5 Retrieve ERA5 variables and sunrise along path",
    "text": "6.5 Retrieve ERA5 variables and sunrise along path\npressurepath_create() can also be used to retrieve other ERA5 variables along a path, such as temperature, cloud cover, and precipitation. This retrieve data from both ERA5-single-levels and ERA5-LAND dataset. Use GeoPressureR:::pressurepath_variable to list all the variables available. In addition, pressurepath_create() also computes the local sunrise and sunset time along the path using path2twilight().\n\npressurepath_2_to_5 &lt;- pressurepath_create(\n  tag,\n  # in this example we only retrieve these variable between stationary period 2 and 5\n  path = path_most_likely[path_most_likely$stap_id &gt;= 2 & path_most_likely$stap_id &lt;= 5, ],\n  variable = c(\"altitude\", \"surface_pressure\", \"temperature_2m\", \"total_cloud_cover\", \"total_precipitation\", \"land_sea_mask\"),\n  solar_dep = -6,\n  quiet = TRUE\n)",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pressurepath</span>"
    ]
  },
  {
    "objectID": "pressurepath.html#save",
    "href": "pressurepath.html#save",
    "title": "\n6  Pressurepath\n",
    "section": "\n6.6 Save",
    "text": "6.6 Save\n\nsave(\n  tag,\n  graph,\n  path_most_likely,\n  path_simulation,\n  marginal,\n  edge_simulation,\n  edge_most_likely,\n  pressurepath,\n  file = \"./data/interim/18LX.RData\"\n)",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Pressurepath</span>"
    ]
  },
  {
    "objectID": "geopressureviz.html",
    "href": "geopressureviz.html",
    "title": "\n7  GeoPressureViz\n",
    "section": "",
    "text": "7.1 Navigate GeoPressureViz\nGeoPressureR includes the shiny app GeoPressureViz which helps you visualize the overall trajectory of the bird as well as each step-by-step move. Note that this is a visualization tool only and as such, it cannot be used to make changes to your data. It offers a useful tool to label your tag and provides a convenient platform to discuss the overall trajectory with collaborators.\nScreenshot of the GeoPressureViz demo showing the estimated position at one stationary period of the Great Reed Warbler (18LX), based on (1) the pressure and light match (map colorscale and timeseries) and (2) potential flight distances from the previous and next stationary periods (circles).",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>GeoPressureViz</span>"
    ]
  },
  {
    "objectID": "geopressureviz.html#navigate-geopressureviz",
    "href": "geopressureviz.html#navigate-geopressureviz",
    "title": "\n7  GeoPressureViz\n",
    "section": "",
    "text": "Open the demo for 18LX\n\nThe app has three panels:\n\nMap: this displays the trajectory of the bird. The size of the circles indicates the duration of the stopover (hover over them to get more info).\nBottom panel: this shows the pressurepath of the trajectory which must be computed beforehand. The grey line is the raw data (pressurepath$pressure_tag), the black dots are pressure points labelled as outliers, and colored lines are the normalized pressure at the best match location (i.e., pressurepath$surface_pressure_norm). The color matches the circles on the map.\nSide panel: this provides key information and tools to navigate the app.\n\n\nThe “Minimum duration” input allows to filter out short stationary periods on the map, similarly to include_min_duration in tag_set_map().\nToggle the “Full Track” button to move to the stationary period view.\nNavigate from one stationary period to the next using the previous/next button or dropdown list. The pressure timeseries will update to zoom exactly on this stationary period. The color of the timeseries informs you on the current stationary period shown on the map, the two others begin the previous and next one.\nThe circles indicates the distance to and from the previous and next stationary period location based on the speed slider on the side panel (default is 40km/h).\nDepending on which maps are available, you can choose to display the probability map of pressure tag$map_pressure, light tag$map_light, their product, or the marginal.\nBecause some locations of the most likely path can be completely off, it might be helpful to temporarily change their location to check the coherence of distance with the next/previous stationary period. Click on “Start Editing” to do so Every time you click on the map, it will update the position. Once you’re happy with the position, you can click on the button again to disable the editing mode.\nFinally, you can also check the pressure timeseries with the new positions using the button “Query pressure”. This runs geopressure_timeseries() in the background, so it will be slow (especially for long stationary periods).",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>GeoPressureViz</span>"
    ]
  },
  {
    "objectID": "geopressureviz.html#run-geopressureviz",
    "href": "geopressureviz.html#run-geopressureviz",
    "title": "\n7  GeoPressureViz\n",
    "section": "\n7.2 Run GeoPressureViz",
    "text": "7.2 Run GeoPressureViz\nThe visualization can be started with your track using geopressureviz().\n\ninclude\nload(\"./data/interim/18LX.RData\")\ngeopressureviz(\n  tag = tag, # required\n  path = pressurepath, # optional\n  marginal = marginal, # optional\n)\n\nIf your data is stored in \"./data/interim/18LX.RData\", you can use directly\n\ngeopressureviz(\"18LX\")\n\nNote that the path of the shiny app can be retrieved from the global environment using geopressure_path.",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>GeoPressureViz</span>"
    ]
  },
  {
    "objectID": "labelling-tracks.html",
    "href": "labelling-tracks.html",
    "title": "8  Labelling tracks",
    "section": "",
    "text": "8.1 Labelling principles\nIn this last chapter, we will tackle the challenge of labelling your tag!\nLabelling your tracks is imperative because GeoPressureR requires highly precise and well-defined pressure timeseries of a fixed/constant location both horizontally (geographical: +/- 10-50km) and vertically (altitude: +/- 2m).\nThe procedure involves labelling each datapoint (1) with the flight label when the bird is in active migratory flight and (2) with the discard label for pressure datapoints that should be discarded from the matching exercise. The overall objective is to create a pressure timeseries for each stationary period where the bird can be assumed to remain at the same location and elevation during the entire period.\nEach species’ migration behaviour is so specific that manual editing remains the fastest option. Indeed, small changes in pressure and activity can correspond to either local movement or slow migration. Expertise on your bird’s expected migration style will be essential to correctly label your tracks. As you label, you will learn how the bird is moving (e.g. long continuous high altitude flights, short flights over multiple days, alternation between short migration flights and stopovers, etc.). Manual editing also gives a sense of the uncertainty of your labelling, which is useful to interpret your results.",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Labelling tracks</span>"
    ]
  },
  {
    "objectID": "labelling-tracks.html#labelling-principles",
    "href": "labelling-tracks.html#labelling-principles",
    "title": "8  Labelling tracks",
    "section": "",
    "text": "Labelling flight defines stationary periods and flight duration. A stationary period is a period during which the bird is considered static relative to the size of the grid (~10-50km). The start and end of the stationary period is used to define the pressure timeseries to be matched. Having an accurate flight duration is critical to correctly estimate the distance traveled by the bird between two stationary periods.\nLabelling discard eliminates vertical (altitudinal) movements of the bird. The algorithm matching the pressure timeseries is sensitive to small pressure variations of a few hPa, such that even altitudinal movements of a couple of meters can throw off the estimation map for short stationary periods. Since the reanalysis data to be matched is provided at a single pressure level, we must discard all data points corresponding to a different elevation.",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Labelling tracks</span>"
    ]
  },
  {
    "objectID": "labelling-tracks.html#with-or-without-acceleration-data",
    "href": "labelling-tracks.html#with-or-without-acceleration-data",
    "title": "8  Labelling tracks",
    "section": "\n8.2 With or without acceleration data",
    "text": "8.2 With or without acceleration data\nAcceleration data can significantly improve our understanding of bird activity and movement. One of its main strength is to refine short stationary periods or flights at the end of the night, when birds tend to flight low. In addition, acceleration is typically recorded at a higher temporal resolution (5min), which can refine flight duration and thus the movement model when building the trajectory.\n\n\n\n\n\n\nWhich timeseries should I label?\n\n\n\nWhen acceleration data is available, use the flight label on the acceleration timeseries, and the discard label on the pressure timeseries.\nIn the absence of acceleration data, both labels are applied to the pressure timeseries.\n\n\nLet’s see an example using acceleration data with 18LX.\n\ntag &lt;- tag_create(\"18LX\",\n  crop_start = \"2017-06-20\",\n  crop_end = \"2018-05-02\"\n)\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.pressure'\n\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.glf'\n\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.acceleration'\n\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.temperature'\n\n\nAcceleration can be used to initialize the flight label automatically. tag_label_auto() first classifies low and high activity using a k-mean clustering, and then identifies and labels long periods of high activity (e.g., lasting more than 30 minutes) as flights.\n\ntag &lt;- tag_label_auto(tag, min_duration = 30)\nplot(tag, type = \"acceleration\")\n\n\n\n\n\nMore classification methods are described in the PALMr manual.",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Labelling tracks</span>"
    ]
  },
  {
    "objectID": "labelling-tracks.html#the-process",
    "href": "labelling-tracks.html#the-process",
    "title": "8  Labelling tracks",
    "section": "\n8.3 The process",
    "text": "8.3 The process\nLabelling is an iterative process where you will need to check the validity of the pressure timeseries for a given stationary period against the reanalysis data several times. You can expect to spend 30sec to 30min per track, depending on the species’ complexity (acceleration data, number of flights, altitude of flight etc…).\nThe tag_label() function can be used to guide you through the entire labelling process, but we also outline each step below:\n\n# 1. Create the csv label file `\"./data/tag-label/18LX.csv\"`\ntag_label_write(tag)\n\n# 2. Edit csv file on TRAINSET\n# *on TRAINSET*\n\n# 3. Export csv file `\"./data/tag-label/18LX-labeled.csv\"`\n# *on TRAINSET*\n\n# 4. Read exported label file\ntag &lt;- tag_label_read(tag)\n\n# 5. Compute stationary period data.frame tag$stap\ntag &lt;- tag_label_stap(tag)\n\nAny subsequent modification of the csv file \"./data/tag-label/18LX-labeled.csv\" can be directly processed (steps 4-5) using tag_label().",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Labelling tracks</span>"
    ]
  },
  {
    "objectID": "labelling-tracks.html#introduction-to-trainset",
    "href": "labelling-tracks.html#introduction-to-trainset",
    "title": "8  Labelling tracks",
    "section": "\n8.4 Introduction to TRAINSET",
    "text": "8.4 Introduction to TRAINSET\nWe suggesting using TRAINSET, a web-based graphical tool for labelling timeseries.\n\n\n\n\n\n\nNew TRAINSET\n\n\n\nWe customized the original TRAINSET app for a smoother experience in labelling tags and twilight data: https://trainset.raphaelnussbaumer.com/\nPlease use this new version and report issues or bugs on the Github repository.\n\n\nStart by uploading your .csv file (e.g., data/tag-label/18LX.csv) using the “Upload Tag Label” button.\n\n\n*Example of a labeled file on TRAINSET. First, the pressure timeseries is separated into stationary periods by “flight” label (red). When the bird is changing altitude or flying for short periods, the pressure datapoint are labeled as “discard” (gray)",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Labelling tracks</span>"
    ]
  },
  {
    "objectID": "labelling-tracks.html#a-few-tips",
    "href": "labelling-tracks.html#a-few-tips",
    "title": "8  Labelling tracks",
    "section": "\n8.5 A few tips:",
    "text": "8.5 A few tips:\n\n\nKeyboard shortcuts can considerably speed up navigation (zoom in/out, move left/right) and labelling (add/remove a label)., e.g. using SHIFT.\nBecause of the large number of datapoints, keep a narrow temporal window to avoid your browser from becoming slow or unresponsive.\nChange the Active Series and Reference Series depending on what you are labelling but use both timeseries at the same time to help you determine what the bird might be doing.\n\nAdapt the y-axis range to each stationary period to see the small (but essential) pressure variations which are not visible in the full view.",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Labelling tracks</span>"
    ]
  },
  {
    "objectID": "labelling-tracks.html#elevation-period",
    "href": "labelling-tracks.html#elevation-period",
    "title": "8  Labelling tracks",
    "section": "\n8.6 Elevation period",
    "text": "8.6 Elevation period\nIt is common for birds to change elevation level within the same stationary period (e.g., roost vs feeding site or altitudinal movements for mountainous species). Such movements can result in drastic variations in pressure, which interfere with the ERA5 matching exercise.\nTo circumvent this issue while preserving as much data as possible in the match, you can label pressure data with different elevation levels by using elev_x in TRAINSET To do so, click on the + sign in the bottom right to create a new elevation level (e.g., elev_1). Assign the new label to all pressure datapoints belonging to the same elevation period. You can use multiple elevation periods, but for computational reasons, try to limit them to a minimum. Unlabelled datapoints can essentially be thought of as evel_0.\nNote that the elevation levels do not have to be continuous: it’s even better if the same elevation period comes back several times during the same stationary period. For instance, you can have unlabelled datapoints for the feeding site every day and labelled datapoints at the roosting location of every night as elev_1.\nNote that you can restart the count of elev_x for each new stationary period (e.g., the datapoints from stap 1 labelled as elev_1 are not connected to the datapoints from stap 2 also labelled as elev_1).\n\n\nExample of elevation periods label. “elev_x” label allows to identify periods when the bird changes altitude for a considerable amount of time within the same stationary period . Note that you can re-use the same elev label for two distinct stationary periods without implying the same elevation.",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Labelling tracks</span>"
    ]
  },
  {
    "objectID": "labelling-tracks.html#labelling-checks",
    "href": "labelling-tracks.html#labelling-checks",
    "title": "8  Labelling tracks",
    "section": "\n8.7 Labelling checks",
    "text": "8.7 Labelling checks\nUse the checks outlined below to evaluate and improve the quality of your labelling.\n\n8.7.1 Simple checks\nCheck 1: Duration of stationary periods and flights\nThe first test consists in checking the duration of flights and stationary periods. This is systematically checked when computing stationary periods and a message will give you feedback on where to find potential errors:\n\ntag &lt;- tag_label(tag, \"./data/tag-label/18LX-labeled-v1.csv\")\n\n── Short stationary periods (&lt;6hr): ────────────────────────────────────────────\n\n\n! Stap 7 (2017-08-30 23:47 - 2017-08-30 23:52) : 5m\n\n\n! Stap 26 (2018-04-15 14:57 - 2018-04-15 18:47) : 3h 49m 60s\n\n\n! Stap 27 (2018-04-15 19:32 - 2018-04-15 20:07) : 35m\n\n\n! Stap 30 (2018-04-29 23:37 - 2018-04-29 23:42) : 5m\n\n\n! Stap 32 (2018-04-30 19:22 - 2018-04-30 19:37) : 15m\n\n\n! Stap 33 (2018-04-30 21:47 - 2018-04-30 21:52) : 5m\n\n\n! Stap 34 (2018-04-30 23:02 - 2018-04-30 23:07) : 5m\n\n\n! Stap 35 (2018-05-01 00:02 - 2018-05-01 00:07) : 5m\n\n\n── Short flights (&lt;2hr): ───────────────────────────────────────────────────────\n\n\n! Flight 14 -&gt; 15 (2017-09-11 23:32 - 2017-09-12 00:22) : 50m\n\n\n! Flight 18 -&gt; 19 (2017-09-19 23:32 - 2017-09-20 00:42) : 1h 10m\n\n\n! Flight 26 -&gt; 27 (2018-04-15 18:47 - 2018-04-15 19:32) : 45m\n\n\n! Flight 27 -&gt; 28 (2018-04-15 20:07 - 2018-04-15 21:37) : 1h 30m\n\n\n! Flight 31 -&gt; 32 (2018-04-30 18:37 - 2018-04-30 19:22) : 45m\n\n\n! Flight 33 -&gt; 34 (2018-04-30 21:52 - 2018-04-30 23:02) : 1h 10m\n\n\n! Flight 34 -&gt; 35 (2018-04-30 23:07 - 2018-05-01 00:02) : 55m\n\n\n! Flight 35 -&gt; 36 (2018-05-01 00:07 - 2018-05-01 00:47) : 40m\n\n\nHere, I used the label produced by tag_label_auto() without making any edits on TRAINSET. In such cases, the most common error is that a flight is cut because the bird was inactive during a few data-points. You can correct this by cleaning up flights on TRAINSET.\n\ntag &lt;- tag_label(tag, \"./data/tag-label/18LX-labeled-v2.csv\")\n\n── Short stationary periods (&lt;6hr): ────────────────────────────────────────────\n\n\n! Stap 25 (2018-04-15 15:02 - 2018-04-15 18:47) : 3h 45m\n\n\n── Short flights (&lt;2hr): ───────────────────────────────────────────────────────\n\n\n! Flight 13 -&gt; 14 (2017-09-11 23:32 - 2017-09-12 00:22) : 50m\n\n\n! Flight 17 -&gt; 18 (2017-09-19 23:32 - 2017-09-20 01:07) : 1h 35m\n\n\nCheck 2: Pressure timeseries\nHere we visually inspect that the pressure timeseries of each stationary period (1) is correctly grouped and (2) does not include pressure outliers (e.g., altitudinal movements). It is worth zooming-in and panning on each individual stationary period manually inspect the timeseries.\n\nplot(tag, type = \"pressure\")\n\n\n\n\n── Pre-processed pressure data length \n\n\n✔ All stationary periods have more than 12 datapoints.\n\n\n\n\n\n── Pressure difference \n\n\n→ 2 timestamps show abnormal hourly change in pressure (i.e., &gt;3hPa):\n\n\n! 2017-09-01 10:30:00 | stap: 8 | 3.8 hPa\n\n\n! 2017-10-01 17:30:00 | stap: 18 | 3 hPa\n\n\n\n\n\n\n\n\n\n\n\n\nHow short can a stationary period be?\n\n\n\nIt can acceptable to have a few stationary periods/flights shorter than the warning threshold of check 1 and 2. Feel free to overwrite the default warning (e.g., warning_flight_duration).\nHowever, having too many stationary periods will lead to slow code as the number of likelihood maps and, more importantly, the size of the graph will become excessively large. This is where the parameter include_min_duration from tag_set_map() is particularly useful: it allows to ignore the short stationary periods and merge flights.\nNote, that while the MSE mismatch is usually not useful for stationary period shorter than a few hours, a single high or low pressure datapoint can indicate an high or low altitude location which are not common on the map!\n\n\n\n8.7.2 Pressurepath checks\nThe second set of checks are more complex and computationally costly but allows to fine-tune the final trajectory. Depending on your species and preference, they can be done in any order or in parrellel.\nThe general idea is to perform the following steps iteratively:\n\nEstimate our current best guess of the trajectory (i.e. a path)\nCompute the ERA5 pressure on this path (i.e., pressurepath),\nCompare the ERA5 pressure to the tag pressure\nRefine the label accordingly: (1) label outliers, (2) merge or split stationary periods, and (3) use the elev_x label.\n\nFirst, let’s compute the light and pressure likelihood maps on a coarse map (e.g. scale = 1) and low precision of mismatch (e.g. max_sample = 50) to minimize the computational cost.\n\ntag &lt;- tag_create(\"18LX\", crop_start = \"2017-06-20\", crop_end = \"2018-05-02\", quiet = TRUE) |&gt;\n  tag_label(\"./data/tag-label/18LX-labeled-v3.csv\", quiet = TRUE) |&gt;\n  tag_set_map(\n    extent = c(-16, 23, 0, 50),\n    scale = 1,\n    known = data.frame(\n      stap_id = 1,\n      known_lat = 48.9,\n      known_lon = 17.05\n    )\n    # include_min_duration = 24 # Filtering long stap might also be useful at first\n  ) |&gt;\n  geopressure_map(max_sample = 50, quiet = TRUE)\n\ntag &lt;- tag |&gt;\n  twilight_create() |&gt;\n  twilight_label_read() |&gt;\n  geolight_map(quiet = TRUE)\n\nCheck 3: Pressure timeseries match\nFrom these maps, we can compute the path that goes through the stationary periods with the highest probability.\n\npath &lt;- tag2path(tag)\n\nNote that this path is likely not realistic as no movement model has been included (i.e., no limitation on bird flight duration). This is fine at this stage: we don’t really want to assume a realistic path, just to see what pressure can tell us without assuming anything. Using this path, we can retrieve the ERA5 pressure along this path,\n\npressurepath &lt;- pressurepath_create(tag, path = path, quiet = TRUE)\n\nWe can compare the pressure timeseries of the tag (grey) to the pressurepath. Zoom on each stationary period to get a better sense of the likely natural variation of pressure.\n\nplot_pressurepath(pressurepath)\n\n\n\n\n\n\n\n\n\n\n\nWhat is an outlier?\n\n\n\nThe conversion of the mean squared error (MSE) into a likelihood performed by geopressure_map_likelihood() assumes that the error distribution of pressure is normally distributed. This has important consequences in that it does not perform well in the presence of large errors, typically resulting in a map with a single possible pixel.\nAssuming this normal distribution allows us to define more formally outliers as any value outside +/- 3 standard deviation (warning_std_thr). This standard deviation is defined by the parameter sd, with a default value of 1.\nplot_pressurepath() displays outliers with an orange triangle so you can check each of them manually.\n\n\nBesides outliers, you can use this figure to identify any period where there is a mismatch between the geolocator and ERA5, usually indicative of altitudinal movement of the bird. Depending on the situation, there are multiple ways of labelling this mismatch.\n\nIn the easiest case, the bird simply flew within the same stationary site (&lt;10-50km) for a short time and came back to the same location. In this case, you can simply discard the pressure timeseries during the temporary change of altitude.\nIf the bird changes altitude but never comes back to the same elevation, you can either consider that the new altitude is a new stationary period and label the activity data, or you can discard the timeseries of the shorter period. It is essential that the resulting timeseries matches the ERA5 pressure everywhere. Matches are usually better for longer periods. Looking at activity data for the same period can also help understand what the bird is doing.\nIf the bird changes back and forth between two elevation levels, use the elev_x label to label them accordingly.\n\nAs a general guideline, it is better to remove a bit more for long stationary periods to get a better estimation of the position. You can do this iteratively by removing a bit and seeing whether the position improves as a result.\nOnce you’re happy with your new labels, you have to update the tag object. To avoid running geopressure_map() and pressurepath_create() for the full timeseries, use tag_upate() and pressurepath_upate() to update only the stationary periods that have changed.\n\ntag2 &lt;- tag_update(tag, file = \"./data/tag-label/18LX-labeled-v4.csv\", quiet = TRUE)\npressurepath &lt;- pressurepath_update(pressurepath, tag, quiet = TRUE)\n\nCheck 4: Histogram of pressure error\nIn addition to the pressure timeseries, you can also look at the histogram of the pressure error between geolocator and ERA5 timeseries.\n\nFor long stationary periods (over 5 days), you want to check that there is a single mode in your distribution. Two modes indicate that the bird is spending time at two different altitudes. This is usual when birds have a day site and a night roost at different elevations. In such cases, use the elev_x label.\nThe red vertical dotted line indicates +/-3 sd which can be helpful to identify potential outliers (i.e., identical to the orange dot in the timeseries plot).\nStationary periods which have an empirical sd greater than the one used (sd) are highlighted in red. The likelihood map for these stationary periods might not be correct.\n\n\nplot_pressurepath(pressurepath, type = \"hist\", plot_plotly = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to calibrate sd?\n\n\n\nAs mentioned in [pressure map], sd should be adjusted to your own data. Assuming that the position of the pressurepath is correct, you can use the empirical sd value displayed on the histogram to guide you in setting the standard deviation parameter sd in geopressure_map().\nNote that you can use different a sd value to account for stationary periods with high altitudinal variation (e.g. mountainous areas), while keeping a low sd value when the bird is in a low-topography area.\nIn this case, an sd=1 (default value) seems adequate, though 0.8-0.9 might offer more precision positioning.\n\n\n\n8.7.3 GeoPressureViz checks\nCheck 5: GeoPressureViz\nThe shiny app GeoPressureViz is another important tool to be used instead of or in parallel to the pressurepath checks. The main advantages of using the apps are\n\nOnly query the pressurepath for position that need to be checked with “query pressure”.\nQuickly test the pressurepath of different position using “Start editing”.\nSeparate the likelihood of pressure and light as well as flight duration to see where they agree/disagree\nFilter-out short stationary period to see if they are coherent, before refining the trajectory by adding the shorter ones.\n\nMore details on this app and how to use it can be found in the [GeopressureViz] chapter.\n\ngeopressureviz(\n  tag, # required\n  # path = pressurepath,\n)\n\n\n\n\n\n\n\nCan you “draw” the trajectory?\n\n\n\nA good test before building the graph, is to see if you can manually roughly draw a path from the combination of the pressure/light maps and the flight duration.\nYou should be able to move the position of the trajectory such that the flight distances are realistic and positing are likely according to the likelihood maps.\nRemember that birds can have a much higher groundspeed when the wind is blowing their way (up to 150km/h for instance) - such extremes are usually restricted to long flights. In such cases, the circle on GeopressureViz will look too small, but that’s ok.\n\n\n\n8.7.4 Final checks\nCheck 6: Marignal and most likely path\nLabelling should finally be checked at the end of the workflow using the marginal and most-likely path.\n\n# Update tag and pressurepath\ntag &lt;- tag_update(tag, file = \"./data/tag-label/18LX-labeled.csv\", quiet = TRUE)\n\n# Build graph, add wing, add movement\ngraph &lt;- graph_create(tag, quiet = TRUE) |&gt;\n  graph_add_wind(tag$pressure, quiet = TRUE) |&gt;\n  graph_set_movement(bird = bird_create(\"Acrocephalus arundinaceus\"))\n\n# Compute most likely path\npath_most_likely &lt;- graph_most_likely(graph, quiet = TRUE)\n\n# Compute marginal\nmarginal &lt;- graph_marginal(graph, quiet = TRUE)\n\n# Compute the corresponding pressurepath\npressurepath_most_likely &lt;- pressurepath_create(tag, path = path_most_likely, quiet = TRUE)\n\nThe same figure can be checked again and hopefully everything matches well now! If not, it is important to troubleshoot!\n\nplot_pressurepath(pressurepath_most_likely)\n\n\n\n\nplot_pressurepath(pressurepath_most_likely, type = \"hist\", plot_plotly = FALSE)\n\n\n\n\n\n\n\nA last check with geopressureviz is highly recommended to see the difference between the likelihood maps and the marginal map. Remember that models are only as good as the data provided!\n\ngeopressureviz(tag,\n  path = pressurepath_most_likely,\n  marginal = marginal\n)",
    "crumbs": [
      "Labelling tools",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Labelling tracks</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-intro.html",
    "href": "geopressuretemplate-intro.html",
    "title": "\n9  Introduction\n",
    "section": "",
    "text": "9.1 📁 Project structure\nGeoPressureTemplate is a Github repository template which contains a standard folder structure and R scripts to store your data, analyse it, and produce trajectory outputs. Download it as a starting point to organise your data and start your analysis. It’s an initial flexible structure that should be adapted to each individual project.\nGeoPressureTemplate defines a standardized project folder structure based on a mix of rrrpkg, rrtools and cookiecutter data science.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-intro.html#project-structure",
    "href": "geopressuretemplate-intro.html#project-structure",
    "title": "\n9  Introduction\n",
    "section": "",
    "text": "GeoPressureTemplate/\n├── DESCRIPTION                             # Project metadata and dependencies\n├── README.md                               # Top-level description of content and guide to users\n├── GeoPressureTemplate.Rproj               # R project file\n├── LICENCES.md                             # Conditions of re/use the data and code\n├── config.yml                              # YML file used to defined the parameters used in the analysis\n├── data/                                 \n│   ├── raw_tag/                            # Raw geolocator data (do not modify!)\n│   │   ├── 18LX/\n│   │   │   ├── 18LX_20180725.acceleration\n│   │   │   ├── 18LX_20180725.glf\n│   │   │   └── 18LX_20180725.pressure \n│   │   └── CB619/ \n│   │       └── CB619.deg\n│   ├── tag_label/                          # Trainset csv file generated with analyis/1-label.qmd\n│   │   ├── 18LX-labeled.csv\n│   │   ├── 18LX.csv \n│   │   ├── CB619-labeled.csv\n│   │   └── CB619.csv            \n│   ├── twilight_label/                     # Trainset csv file generated with analyis/2-twilight.qmd\n│   │   ├── 18LX-labeled.csv\n│   │   └── 18LX.csv\n│   ├── wind/                               # ERA-5 wind data generated with analyis/3-wind.qmd\n│   │   └── 18LX/\n│   │       ├── 18LX_1.nc\n│   │       └── ...\n│   └── interim/                            # Intermediate data created with analyis/4-geopressuretemplate.R\n│       └── 18LX.RData                      \n├── analysis/                               # R script used to analyse your data.\n│   ├── 1-label.qmd\n│   ├── 2-twilight.qmd\n│   ├── 3-wind.qmd\n│   ├── 4-geopressuretemplate.R\n│   ├── 5-datapackage.R\n│   └── 12-label-advanced.qmd\n├── R/                                      # Custom R functions used in your analysis.\n└── output/   \n    ├── create_figures.R\n    └── figures/",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-intro.html#get-started",
    "href": "geopressuretemplate-intro.html#get-started",
    "title": "\n9  Introduction\n",
    "section": "\n9.2 💡 Get started",
    "text": "9.2 💡 Get started\n\n9.2.1 🛠️ Create your project\nOption 1: with a Github repository (recommended)\n\nOpen GeoPressureTemplate and click on the green button “Use this template” or click here to create your repository directly.\nChoose a project name (e.g., my_tracking_study_name) specific to your research. Note that this will become the name of your folder on your computer too.\nClone the repository on your computer.\nDone! 🎉\n\nOption 2: without a Github repository\n\nClick here to download the repo directly\nUnzip and rename the folder with your project name.\nDone! 🎉\n\n\n\n\n\n\n\nImportant\n\n\n\nDo not clone (or fork) the repository! Read more about creating repositories from a template.\n\n\n\n9.2.2 🏠 Make yourself at home\n\nRename GeoPressureTemplate.Rproj to your project name (e.g., my_tracking_study_name.Rproj). You can now open the project on RStudio.\nEdit the DESCRIPTION file following the R package book.\nAdd your research description in the README.md, including your research objectives, basic data, and method.\nReplace the content of data/ with your tag data.\nInstall the dependencies needed with\n\ndevtools::install()\n\nOptionally, modify the LICENCES file (see the R package book for details).",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-intro.html#how-to-master-config.yml",
    "href": "geopressuretemplate-intro.html#how-to-master-config.yml",
    "title": "\n9  Introduction\n",
    "section": "\n9.3 💫 How to master config.yml ?",
    "text": "9.3 💫 How to master config.yml ?\nBefore jumping into the analysis, we need to introduce config.yml. It’s a YAML file which defines the parameters used in the analysis. Separating these parameters from the main code follows best practices in terms of reproducibility, readability, and sharability. We use the config R package to retrieve all the parameter values used in the code.\n\n\n\n\n\n\nNote\n\n\n\nAn important benefit of config is its ability to manage hierarchical configurations: you can organize settings into different groups and override them as needed. This is particularly useful in our context, where we can configure parameters for all tags and/or specific tags.\n\n\ndefault:\n  tag_create:\n    extent: [-16, 23, 0, 50] # [W, E, S, N]\n    scale: 1\n\n18LX:\n  tag_set_map:\n    scale: 5\nconfig::get(\"tag_create\", \"18LX\")$extent\n# [-16, 23, 0, 50] # Returns the default value if not set in 18LX\nconfig::get(\"tag_set_map\", \"18LX\")$scale\n# 5 # Return the value in 18LX if presents in both",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-intro.html#analyse-the-data",
    "href": "geopressuretemplate-intro.html#analyse-the-data",
    "title": "\n9  Introduction\n",
    "section": "\n9.4 📈 Analyse the data",
    "text": "9.4 📈 Analyse the data\nNow that you’re set up, it’s time to get serious 😬.\n\n9.4.1 Step 1: Preparation\nHere we make sure everything is ready to run the model. This mainly involves defining the parameters in config.yml by running the following three scripts:\n\nRun analysis/1-label.qmd.\nRun analysis/2-twilight.qmd, if you have light data.\nRun analysis/3-wind.qmd, if you want to account for wind.\n\nYou can visualize each of scripts in a nice-to-read HTML format, using the example of 16LX, in the next sections of this manual.\n\n\n\n\n\n\nNote\n\n\n\nWhen running the scripts, please keep in mind:\n\nNothing is saved at the end of these scripts (and that’s how it’s supposed to be!). Only label files and config.yml should be edited.\nThe scripts should be run for each tag separately.\nWe use Quarto to make it easy to run chunks based on your needs (e.g., re-run a small chunk after making a change). The scripts are not meant to be run with Run all.\nThese scripts can (and should) be edited based on your prefered workflow.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor regular users, we provide a shorter version of these preparation steps in analysis/12-label-advanced.qmd.\n\n\n\n9.4.2 Step 2: Run GeoPressureR workflow\n\n\n\n\n\n\nCaution\n\n\n\nThe core benefit of using GeoPressureTemplate is coming now! You can finally gain back all the time you’ve invested in setting up this project folder! Keep reading carefully!\n\n\nThe geopressuretemplate() function allows you to run the entire GeoPressureR workflow with a single function. By using this workflow, you make sure that your work is reproducible.\n\ngeopressuretemplate(\"18LX\")\n\nThis will create data/interim/18LX.RData with all the trajectory outputs. You’ll learn more in the Workflow chapter. In GeoPressureTemplate, this is performed in the file analysis/4-geopressuretemplate.R.\n\n9.4.3 Step 3: Your own analysis\nYou’ve reached the final steps of GeoPressureTemplate, but this is only the beginning of your research journey. You now have the bird trajectories, but the real magic happens when you apply your creativity and insights to analyse these! You can continue using GeoPressureTemplate, adding other sources of data and analysis to answer your research question.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-intro.html#publication",
    "href": "geopressuretemplate-intro.html#publication",
    "title": "\n9  Introduction\n",
    "section": "\n9.5 🗞️ Publication",
    "text": "9.5 🗞️ Publication\nFor peer-review publication, it is essential that the data and code are accessible to reviewers. Because inaccurate labelling can lead to wrong trajectory, we highly encourage you to publish your data and code.\n\n9.5.1 GeoPressureTemplate Code\nSimply publish your GeoPressureTemplate Github repository on Zenodo following this guide. Publishing on Zenodo will generate a DOI for your code.\n\n9.5.2 Geolocator Data Package\nWhile publishing your GeoPressureTemplate on Zenodo is a great step to allow others to see (and, if needed, reproduce) your work, it can be challenge to re-use your track data for other purposes. To facilitate this, we created GeoLocator Data Package, a data exchange format for geolocator data, providing all GeoPressureR outputs in csv files. The aim of GeoLocator DP is re-usability rather than reproduction.\nThis step is performed with the script analysis/5-datapackage.R. To learn more about publishing a GeoLocator Data Package, go to GeoLocatoR DP.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-intro.html#advanced-options",
    "href": "geopressuretemplate-intro.html#advanced-options",
    "title": "\n9  Introduction\n",
    "section": "\n9.6 🔗 Advanced options",
    "text": "9.6 🔗 Advanced options\n\nGenerate a citation file with usethis::use_citation() or cffr.\nUse renv to make your work reproducible.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-label.html",
    "href": "geopressuretemplate-label.html",
    "title": "\n10  Tag label\n",
    "section": "",
    "text": "10.1 Edit config.yml\nThis script will guide you through the tag labelling of pressure and/or acceleration data and creation of the pressure map.\nCheck that the config is correct.\nstr(config::get(config = id))\n\nList of 13\n $ tag_label          :List of 2\n  ..$ warning_flight_duration: int 2\n  ..$ warning_stap_duration  : int 6\n $ tag_set_map        :List of 5\n  ..$ extent              : int [1:4] -16 23 0 50\n  ..$ scale               : int 5\n  ..$ include_stap_id     : NULL\n  ..$ include_min_duration: int 0\n  ..$ known               :List of 3\n  .. ..$ stap_id  : int [1:2] 1 -1\n  .. ..$ known_lon: num 17\n  .. ..$ known_lat: num 48.9\n $ geopressure_map    :List of 5\n  ..$ max_sample               : int 250\n  ..$ margin                   : int 20\n  ..$ sd                       : int 1\n  ..$ thr_mask                 : num 0.9\n  ..$ log_linear_pooling_weight:function (n)  \n $ twilight_create    : NULL\n $ geolight_map       :List of 2\n  ..$ twl_calib_adjust: num 1.4\n  ..$ twl_llp         :function (n)  \n $ graph_create       :List of 2\n  ..$ thr_likelihood: num 0.99\n  ..$ thr_gs        : int 150\n $ graph_add_wind     :List of 1\n  ..$ thr_as: int 90\n $ graph_simulation   :List of 1\n  ..$ nj: int 10\n $ pressurepath_create:List of 1\n  ..$ variable: chr [1:2] \"altitude\" \"surface_pressure\"\n $ geopressuretemplate:List of 3\n  ..$ likelihood  : chr [1:2] \"map_pressure\" \"map_light\"\n  ..$ outputs     : chr [1:3] \"marginal\" \"most_likely\" \"simulation\"\n  ..$ pressurepath: chr \"most_likely\"\n $ tag_create         :List of 2\n  ..$ crop_start: chr \"2017-06-20\"\n  ..$ crop_end  : chr \"2018-05-02\"\n $ bird_create        :List of 1\n  ..$ scientific_name: chr \"Acrocephalus arundinaceus\"\n $ graph_set_movement :List of 1\n  ..$ type: chr \"as\"\n - attr(*, \"config\")= chr \"18LX\"\n - attr(*, \"file\")= chr \"/Users/rafnuss/Library/CloudStorage/OneDrive-Vogelwarte/GeoPressureManual/config.yml\"\n - attr(*, \"class\")= chr \"config\"",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tag label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-label.html#edit-config.yml",
    "href": "geopressuretemplate-label.html#edit-config.yml",
    "title": "\n10  Tag label\n",
    "section": "",
    "text": "Tip\n\n\n\nDelete this block when you have read!\nEdit the default config according to your study: Use default for all parameters which are the same for all your tracks and add any parameter that is tag specific.\nconfig.yml is structured in the following level as defined by the indentation and :\ntag_id:\n  function_name:\n    arguments: value\nNote that the values are written in json format (and not R), so for a vector/array you need to use [, ] and for an array of objects (named lists), you need to use - and indentation. Here is an exemple:\n18LX:\n  tag_set_map:\n    extent: [-16, 23, 0, 50]\n    known: \n      - stap_id: 1\n        known_lon: 7.05\n        known_lat: 48.9\n  bird:\n    species_name: \"Acrocephalus arundinaceus\" # only if you have different species, otherwise add to default",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tag label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-label.html#sensor-data-and-crop-date",
    "href": "geopressuretemplate-label.html#sensor-data-and-crop-date",
    "title": "\n10  Tag label\n",
    "section": "\n10.2 Sensor data and crop date",
    "text": "10.2 Sensor data and crop date\nCheck if the crop dates (in red) are correct.\n\nggplotly(\n  tag_create(id, quiet = TRUE) |&gt;\n    plot(type = \"pressure\", plot_plotly = FALSE) +\n    geom_vline(\n      xintercept = as.numeric(c(\n        as.POSIXct(config::get(\"tag_create\", id)$crop_start),\n        as.POSIXct(config::get(\"tag_create\", id)$crop_end)\n      )),\n      color = \"red\", lwd = 1\n    )\n)\n\n\n\n\n\nYou might want to change type to check the values of the other sensors (e.g., acceleration or light).\nCreate tag with cropped date\n\ntag &lt;- tag_create(\n  id,\n  crop_start = config::get(\"tag_create\", id)$crop_start,\n  crop_end = config::get(\"tag_create\", id)$crop_end\n)\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.pressure'\n\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.glf'\n\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.acceleration'\n\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.temperature'",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tag label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-label.html#create-label-and-edit-on-trainset",
    "href": "geopressuretemplate-label.html#create-label-and-edit-on-trainset",
    "title": "\n10  Tag label\n",
    "section": "\n10.3 Create label and edit on Trainset",
    "text": "10.3 Create label and edit on Trainset\n\ntag_label_write(tag)\n\nℹ No label data.\n\n\n→ Initialize automatically label using `tag_label_auto()`\n\n\n✔ './data/tag-label/18LX.csv' written successfully.\n\n\nOpen csv and edit on https://trainset.raphaelnussbaumer.com/.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tag label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-label.html#run-simple-labelling-checks",
    "href": "geopressuretemplate-label.html#run-simple-labelling-checks",
    "title": "\n10  Tag label\n",
    "section": "\n10.4 Run simple labelling checks\n",
    "text": "10.4 Run simple labelling checks\n\nCheck 1\n\ntag &lt;- tag_label(tag)\n\n── Short stationary periods (&lt;6hr): ────────────────────────────────────────────\n\n\n! Stap 25 (2018-04-15 15:02 - 2018-04-15 18:47) : 3h 45m\n\n\n── Short flights (&lt;2hr): ───────────────────────────────────────────────────────\n\n\n! Flight 13 -&gt; 14 (2017-09-11 23:27 - 2017-09-12 00:22) : 55m\n\n\n! Flight 17 -&gt; 18 (2017-09-19 23:32 - 2017-09-20 01:07) : 1h 35m\n\n\n\n\n\n\n\n\nTip\n\n\n\nDelete this block when you have read!\nEdit and export label on Trainset and simply run the same chunk until you’re happy with it! This principle (edit your label file and re-run the same chunk) is valid throughout this script.\n\n\nCheck 2\n\nplot(tag, type = \"pressure\")\n\n\n\n\n── Pre-processed pressure data length \n\n\n✔ All stationary periods have more than 12 datapoints.\n\n\n\n\n\n── Pressure difference \n\n\n✔ All hourly changes in pressure are below 3 hPa.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tag label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-label.html#run-pressurepath-checks",
    "href": "geopressuretemplate-label.html#run-pressurepath-checks",
    "title": "\n10  Tag label\n",
    "section": "\n10.5 Run Pressurepath checks\n",
    "text": "10.5 Run Pressurepath checks\n\nCompute pressure map on a coarse grid to perform checks 3-5.\n\ntag &lt;- tag_set_map(tag,\n  extent = config::get(\"tag_set_map\", id)$extent,\n  scale = 1,\n  known = config::get(\"tag_set_map\", id)$known,\n  include_min_duration = 24\n) |&gt;\n  geopressure_map()\n\nℹ Pre-process pressure data\n\n\n✔ Pre-process pressure data [38ms]\n\n\n\n\n\nℹ Generate requests for 11 stapelev on &lt;glp.mgravey.com/GeoPressure/v2/map/&gt;: 5…\n\n\n✔ Generate requests for 11 stapelev on &lt;glp.mgravey.com/GeoPressure/v2/map/&gt; [8…\n\n\n\n\n\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\nℹ Compute (on GEE server) and download .geotiff for 11 stapelev (on 11 workers)…\n\n\n✔ Compute (on GEE server) and download .geotiff for 11 stapelev [3s]\n\n\n\n\n\nℹ Read .geotiff: \"18|0\" | 1/11\nℹ Read .geotiff: \"18|0\" | 1/11\n\n\nℹ Read .geotiff: \"14|0\" | 2/11\n\n\nℹ Read .geotiff: \"5|0\" | 3/11\n\n\nℹ Read .geotiff: \"10|0\" | 4/11\n\n\nℹ Read .geotiff: \"11|0\" | 5/11\n\n\nℹ Read .geotiff: \"27|0\" | 6/11\n\n\nℹ Read .geotiff: \"5|1\" | 7/11\n\n\nℹ Read .geotiff: \"26|0\" | 8/11\n\n\nℹ Read .geotiff: \"9|0\" | 9/11\n\n\nℹ Read .geotiff: \"20|0\" | 10/11\n\n\nℹ Read .geotiff: \"16|0\" | 11/11\n\n\n✔ Read .geotiff [8.5s]\n\n\n\n\n\nℹ Post-process maps\n\n\n✔ Post-process maps [179ms]\n\n\n\n\n\n\npressurepath &lt;- pressurepath_create(tag)\n\nℹ Prepare pressure\n\n\n✔ Prepare pressure [27ms]\n\n\n\n\n\nℹ Generate request on &lt;glp.mgravey.com/GeoPressure/v2/pressurePath&gt; and downloa…\n\n\n✔ Generate request on &lt;glp.mgravey.com/GeoPressure/v2/pressurePath&gt; and downloa…\n\n\n\n\n\nℹ Post-process pressurepath\n\n\n✔ Post-process pressurepath [1.3s]\n\n\n\n\n\nCheck 3\n\nplot_pressurepath(pressurepath)\n\n\n\n\n\nCheck 4\n\nplot_pressurepath(pressurepath, type = \"histogram\")",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tag label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-label.html#run-geopressureviz-checks",
    "href": "geopressuretemplate-label.html#run-geopressureviz-checks",
    "title": "\n10  Tag label\n",
    "section": "\n10.6 Run GeoPressureViz checks\n",
    "text": "10.6 Run GeoPressureViz checks\n\n\ngeopressureviz(\n  tag,\n  # path = pressurepath,\n  # path = most_likely_path,\n  # marginal = marginal\n)",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tag label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-label.html#update-of-tag-and-pressurepath",
    "href": "geopressuretemplate-label.html#update-of-tag-and-pressurepath",
    "title": "\n10  Tag label\n",
    "section": "\n10.7 Update of tag and pressurepath\n",
    "text": "10.7 Update of tag and pressurepath\n\n\n\n\n\n\n\nTip\n\n\n\nDelete this block when you have read!\nYou can use tag_upate() and pressurepath_update() every time you edit and export a new label file from Trainset. You might want to start from a new tag and pressurepath variable if you encounter any problem.\n\n\n\ntag &lt;- tag_update(tag)\n\n\npressurepath &lt;- pressurepath_update(pressurepath, tag)",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Tag label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-twilight.html",
    "href": "geopressuretemplate-twilight.html",
    "title": "\n11  Twilight label\n",
    "section": "",
    "text": "11.1 Create tag\nMake sure you have already created the label file with the “1-label.qmd” script.\ntag &lt;- tag_create(\n  id,\n  crop_start = config::get(\"tag_create\", id)$crop_start,\n  crop_end = config::get(\"tag_create\", id)$crop_end\n) |&gt;\n  tag_label(quiet = TRUE) |&gt;\n  tag_set_map(\n    extent = config::get(\"tag_set_map\", id)$extent,\n    scale = config::get(\"tag_set_map\", id)$scale,\n    known = config::get(\"tag_set_map\", id)$known\n  )\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.pressure'\n\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.glf'\n\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.acceleration'\n\n\n✔ Read './data/raw-tag/18LX/18LX_20180725.temperature'",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Twilight label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-twilight.html#create-twilight",
    "href": "geopressuretemplate-twilight.html#create-twilight",
    "title": "\n11  Twilight label\n",
    "section": "\n11.2 Create Twilight",
    "text": "11.2 Create Twilight\nGenerate the twilight automatically. Check that twl_offset allows for night/day being centered on the figure, otherwise edit accordingly\n\ntag &lt;- twilight_create(\n  tag,\n  twl_offset = config::get(\"twilight_create\", id)$twl_offset\n)\nplot(tag, type = \"twilight\")",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Twilight label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-twilight.html#annotate-twilight",
    "href": "geopressuretemplate-twilight.html#annotate-twilight",
    "title": "\n11  Twilight label\n",
    "section": "\n11.3 Annotate twilight",
    "text": "11.3 Annotate twilight\n\ntwilight_label_write(tag)\n\n✔ './data/twilight-label/18LX.csv' written successfully.\n\n\nOpen csv on https://trainset.raphaelnussbaumer.com/.\nRead and check the twilight annotation\n\ntag &lt;- twilight_label_read(tag)\nplot(tag, type = \"twilight\")",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Twilight label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-twilight.html#compute-likelihood-map",
    "href": "geopressuretemplate-twilight.html#compute-likelihood-map",
    "title": "\n11  Twilight label\n",
    "section": "\n11.4 Compute likelihood map",
    "text": "11.4 Compute likelihood map\n\ntag &lt;- geolight_map(tag)\n\nCompute a map for each twilight ■■■■■■                            17% | ETA: 11s\n\n\nCompute a map for each twilight ■■■■■■■■■■■■■■■■■■■■■■■           74% | ETA:  3s\n\n\ntwl_calib_adjust and twl_llp can generally be left to default, but add to config.yml if needed.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Twilight label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-twilight.html#check",
    "href": "geopressuretemplate-twilight.html#check",
    "title": "\n11  Twilight label\n",
    "section": "\n11.5 Check",
    "text": "11.5 Check\n\n11.5.1 Check calibration\n\nbarW &lt;- median(diff(tag$param$geolight_map$twl_calib$x)) / 2\nplot(tag$param$geolight_map$twl_calib, xlim = c(85, 100))\nrect(xleft = tag$param$geolight_map$twl_calib$x - barW, ybottom = 0, xright = tag$param$geolight_map$twl_calib$x + barW, ytop = tag$param$geolight_map$twl_calib$y, col = gray(0.5))\nlines(tag$param$geolight_map$twl_calib, col = \"red\")\n\n\n\n\n\n\n\n\n11.5.2 Check light map\n\nplot(tag, type = \"map_light\")\n\n\n\n\n\n\n11.5.3 Check with pressure and trajectory\n\ngeopressureviz(tag)",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Twilight label</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-wind.html",
    "href": "geopressuretemplate-wind.html",
    "title": "\n12  Download wind\n",
    "section": "",
    "text": "12.1 Set Copernicus credentials\nThis script will help you download the wind data for a tag and define the movement model.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Download wind</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-wind.html#set-copernicus-credentials",
    "href": "geopressuretemplate-wind.html#set-copernicus-credentials",
    "title": "\n12  Download wind\n",
    "section": "",
    "text": "Caution\n\n\n\nDelete this block when you have read!\n\nIf you don’t yet have one, create a ECMWF account at https://www.ecmwf.int/.\nAccept the licence agreement on cds.climate.copernicus.eu/profile going on the “Licences” tab and select the “Licence to use Copernicus Products”.\nRetrieve your API Token on https://cds.climate.copernicus.eu/profile.\nSaves the token to your local keychain with ecmwfr (which calls the API Token key) :\n\necmwfr::wf_set_key(\"abcd1234-foo-bar-98765431-XXXXXXXXXX\")\nFor more information visit the ecmwfr documentation.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Download wind</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-wind.html#create-tag",
    "href": "geopressuretemplate-wind.html#create-tag",
    "title": "\n12  Download wind\n",
    "section": "\n12.2 Create tag",
    "text": "12.2 Create tag\nMake sure you have already created the label file with the “1-label.qmd” script.\n\ntag &lt;- geopressuretemplate_tag(id, quiet=F)",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Download wind</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-wind.html#download-wind-data",
    "href": "geopressuretemplate-wind.html#download-wind-data",
    "title": "\n12  Download wind\n",
    "section": "\n12.3 Download wind data",
    "text": "12.3 Download wind data\nThe job package allows to download the wind data in the background and let your R console free to use.\n\njob({\n  tag_download_wind(tag)\n})\n\nCheck requests at https://cds.climate.copernicus.eu/requests",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Download wind</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-wind.html#define-movement-model",
    "href": "geopressuretemplate-wind.html#define-movement-model",
    "title": "\n12  Download wind\n",
    "section": "\n12.4 Define movement model",
    "text": "12.4 Define movement model\n\n12.4.1 Add wind data\n\ngraph &lt;- graph_create(\n  tag,\n  thr_likelihood = config::get(\"graph_create\", id)$thr_likelihood,\n  thr_gs = config::get(\"graph_create\", id)$thr_gs\n)\n\nℹ Check data input\n\n\n✔ Check data input [280ms]\n\n\n\n\n\nℹ Create graph from maps\n\n\n✔ Create graph from maps [377ms]\n\n\n\n\n\nℹ Compute the groundspeed for stationary period 0/28 (0% of nodes)\n\n\nℹ Compute the groundspeed for stationary period 1/28 (15% of nodes)\n\n\nℹ Compute the groundspeed for stationary period 2/28 (27% of nodes)\n\n\nℹ Compute the groundspeed for stationary period 4/28 (52% of nodes)\n\n\nℹ Compute the groundspeed for stationary period 9/28 (80% of nodes)\n\n\nℹ Compute the groundspeed for stationary period 22/28 (99% of nodes)\n\n\n✔ Compute the groundspeed [12.8s]\n\n\n\n\n\nℹ Prune the graph 0/54 \n\n\n✔ Prune the graph [1.2s]\n\n\n\n\n\nℹ Format graph output\n\n\n✔ Format graph output [10.9s]\n\n\n\n\n\n\ngraph &lt;- graph_add_wind(\n  graph,\n  pressure = tag$pressure,\n  thr_as = config::get(\"graph_add_wind\", id)$thr_as\n)\n\nℹ Compute wind speed for edges of stationary period:  1/28 ■                   …\n\n\nℹ Compute wind speed for edges of stationary period:  2/28 ■■                  …\n\n\nℹ Compute wind speed for edges of stationary period:  3/28 ■■■■                …\n\n\nℹ Compute wind speed for edges of stationary period:  4/28 ■■■■                …\n\n\nℹ Compute wind speed for edges of stationary period:  5/28 ■■■■                …\n\n\nℹ Compute wind speed for edges of stationary period:  6/28 ■■■■                …\n\n\nℹ Compute wind speed for edges of stationary period:  7/28 ■■■■■■              …\n\n\nℹ Compute wind speed for edges of stationary period:  8/28 ■■■■■■■             …\n\n\nℹ Compute wind speed for edges of stationary period:  9/28 ■■■■■■■■■           …\n\n\nℹ Compute wind speed for edges of stationary period:  10/28 ■■■■■■■■■■■■■      …\n\n\nℹ Compute wind speed for edges of stationary period:  11/28 ■■■■■■■■■■■■■■■■   …\n\n\nℹ Compute wind speed for edges of stationary period:  12/28 ■■■■■■■■■■■■■■■■■  …\n\n\nℹ Compute wind speed for edges of stationary period:  13/28 ■■■■■■■■■■■■■■■■■  …\n\n\nℹ Compute wind speed for edges of stationary period:  14/28 ■■■■■■■■■■■■■■■■■■ …\n\n\nℹ Compute wind speed for edges of stationary period:  15/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  16/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  17/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  18/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  19/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  20/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  21/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  22/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  23/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  24/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  25/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  26/28 ■■■■■■■■■■■■■■■■■■■…\n\n\nℹ Compute wind speed for edges of stationary period:  27/28 ■■■■■■■■■■■■■■■■■■■…\n\n\n✔ Compute wind speed for edges of stationary periods [15.4s]\n\n\n\n\n\n\n12.4.2 Set movement model\nCheck that the movement model defined in config.yml is adequate.\n\ngraph &lt;- graph_set_movement(graph,\n  bird = bird_create(config::get(\"bird_create\", id)$scientific_name)\n)\n\nCheck the movement model\n\nplot_graph_movement(graph)",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Download wind</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-workflow.html",
    "href": "geopressuretemplate-workflow.html",
    "title": "\n13  Workflow\n",
    "section": "",
    "text": "13.1 Presentation of geopressuretemplate()\nThe GeoPressureR workflow follows a series of functions taking as input the raw data, the labels, and the configuration, to produce trajectory outputs.\nExtract of the GeoPressureR cheatsheet illustrating the workflow\nAfter performing all preparations steps, you will be able to run the entire workflow in a single line:\ngeopressuretemplate(\"18LX\")\nThe geopressuretemplate() function calls on three child functions outlined below. data/interim/{id}.Rdata is created in Step 1, and then updated in steps 2 and 3 with the main variables (see below).\n1. geopressuretemplate_tag()\n2.geopressuretemplate_graph()\n3.geopressuretemplate_pressurepath()\nCompute pressurepath pressurepath_create() of the path_most_likely and/or the path_geopressureviz.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-workflow.html#presentation-of-geopressuretemplate",
    "href": "geopressuretemplate-workflow.html#presentation-of-geopressuretemplate",
    "title": "\n13  Workflow\n",
    "section": "",
    "text": "tag_create(): Initializes the tag object.\n\ntag_label(): Adds labels.\n\ntag_set_map(): Sets the spatial and temporal parameters.\n*geopressure_map() Computes the pressure likelihood.\n*twilight_create() |&gt; twilight_read() |&gt; geolight_map(): Computes the light likelihood.\n\n\n\n\ngraph_create(): Creates the graph based on tag.\n*graph_add_wind(): Adds wind data to the graph.\n\ngraph_set_movement(): Sets the movement model\n*graph_marginal(): Computes the marginal distribution map.\n*graph_most_likely(): Computes the most likely path based on the movement model.\n*graph_simulation(): Runs simulations to model multiple possible paths.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-workflow.html#configuration-the-workflow",
    "href": "geopressuretemplate-workflow.html#configuration-the-workflow",
    "title": "\n13  Workflow\n",
    "section": "\n13.2 Configuration the workflow",
    "text": "13.2 Configuration the workflow\nAll parameters of the workflow’s function are provided in the config.yml file following the structure:\ntag_id:\n  function_name:\n    argument: value\nOn top of all GeoPressureR function, you will also need to provide general workflow parameters in geopressuretemplate:\ndefault:\n  geopressuretemplate:\n    likelihood: [\"map_pressure\", \"map_light\"]\n    outputs: [\"marginal\", \"most_likely\", \"simulation\"]\n    pressurepath: [\"most_likely\"]\nlikelihood define which likelihood map to compute and use in the graph model while outputs define which outputs to use. In pressurepath, you need to set which path to use.\nYou can check the configuration used with:\n\ngeopressuretemplate_config(id)\n\nThis is constructed by combining the default parameters used in GeoPressureR overwritten by the parameters you’ve written in config.yml in the config default and overwritten by the config 18LX.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-workflow.html#tag",
    "href": "geopressuretemplate-workflow.html#tag",
    "title": "\n13  Workflow\n",
    "section": "\n13.3 Tag",
    "text": "13.3 Tag\nThe tag workflow simply consists of preparing the tag data and computing the likelihood map.\n\ntag &lt;- geopressuretemplate_tag(id)\n\nAt the end of each geopressuretemplate function the interim file (e.g. data/interim/18LX.Rdata) is create or updated. Next geopressuretemplate functions will re-use this file to load variables.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-workflow.html#graph",
    "href": "geopressuretemplate-workflow.html#graph",
    "title": "\n13  Workflow\n",
    "section": "\n13.4 Graph",
    "text": "13.4 Graph\nThe graph workflow uses the tag computed before to create the graph and produce the outputs according to what you defined in geopressuretemplate in config.yml\n\ngraph &lt;- geopressuretemplate_graph(id)\n\nBecause the construction of the graph can be a bit more complicated and takes a lot of time, we’ve implemented a tryCatch approach which returns the graph in case the code fails during the processing so that you can troubleshoot the problem more easily.",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-workflow.html#pressurepath",
    "href": "geopressuretemplate-workflow.html#pressurepath",
    "title": "\n13  Workflow\n",
    "section": "\n13.5 Pressurepath",
    "text": "13.5 Pressurepath\n\ngeopressuretemplate_pressurepath(id, quiet = FALSE)",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "geopressuretemplate-workflow.html#outputs",
    "href": "geopressuretemplate-workflow.html#outputs",
    "title": "\n13  Workflow\n",
    "section": "\n13.6 Outputs",
    "text": "13.6 Outputs\nAll the information needed for your analysis should now be contained in ./data/interim/18LX.RData\n\nsave_list &lt;- load(glue::glue(\"./data/interim/{id}.RData\"))\nprint(save_list)\n\n[1] \"tag\"              \"graph\"            \"path_most_likely\" \"path_simulation\" \n[5] \"marginal\"         \"edge_simulation\"  \"edge_most_likely\" \"pressurepath\"",
    "crumbs": [
      "GeoPressureTemplate",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "geolocator-intro.html",
    "href": "geolocator-intro.html",
    "title": "\n14  Introduction\n",
    "section": "",
    "text": "14.1 Structure\nGeoLocator Data Package (GeoLocator DP) is a data exchange format for geolocator data, following the Data Package standards for structuring data. Read more about GeoLocator DP.\nA geolocator data package consists of three sets of data: (1) project metadata, (2) core resources containing the main dataset and (3) optional trajectory data generated with the GeoPressure suite.",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geolocator-intro.html#structure",
    "href": "geolocator-intro.html#structure",
    "title": "\n14  Introduction\n",
    "section": "",
    "text": "14.1.1 Metadata\n\n\ndatapackage.json: List of project metadata such as package title, licences, contributors etc. as well as a list of the data resources that make up the package.\n\n14.1.2 Core Resources\nThe core GeoLocator DP resources contain all the raw geolocator data. These resources can be generated without any analysis of the geolocator data.\n\n\ntags.csv: Table of devices used in the study. We assume that a tag is only used once on a single animal.\n\n\nmeasurements.csv: Table with the raw measurements of all sensors (e.g., light, pressure, …) for all tags.\n\n\nobservations.csv: Table with the field observations associated with tags such as equipment, retrieval, or others events.\n\n14.1.3 GeoPressureR Resources\nThe GeoPressureR extensions consist of optional trajectrory data generated through the GeoPressureR workflow anaylsis.\n\n\nstaps.csv: Table of the stationary periods of all tags.\n\npaths.csv: Table of the trajectory of all tags, typically most likely path or simulation paths.\n\nedges.csv: Table containing the flight information of the edges associated with the paths.\n\n\ntwilights.csv: Table of the twilights estimated from light data for all tags.\n\n\npressurepaths.csv: Table of the pressurepaths\n\n\n\n\n\n\n\nNote\n\n\n\nThe GeoPressureR Resources is optional, and even if you have not (yet!) analysed your data, it’s worth publishing the data (maybe with an embargo?). The data package can always be updated once the analysis is done.",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geolocator-intro.html#examples",
    "href": "geolocator-intro.html#examples",
    "title": "\n14  Introduction\n",
    "section": "\n14.2 Examples",
    "text": "14.2 Examples\n\nNussbaumer, R., Rime, Y., & Osinubi, S. T. (2024). GeoLocator Data Package: South African Woodland Kingfisher [Data set]. Zenodo. https://doi.org/10.5281/zenodo.13829929\n\n\n\n\n\n\n\nImportant\n\n\n\nThe GeoLocator Data Package Zenodo Community is the best place to see all GeoLocator Data Package.\n \nOnce you’ve published you data package, make sure to sumbit it to the cummunity.",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geolocator-intro.html#geolocator",
    "href": "geolocator-intro.html#geolocator",
    "title": "\n14  Introduction\n",
    "section": "\n14.3 GeoLocatoR",
    "text": "14.3 GeoLocatoR\n\nGeoLocatoR is a R package designed to help you create and work with the GeoLocator Data Package.\nMain Features:\n\nCreate a Geolocator Data Package: Easily create a geolocator datapackage object, add resources (data), and write the data package to your preferred directory. Or, read an existing data package from a directory or from Zenodo like a pro.\nWorks Seamlessly with GeoPressureTemplate: GeoLocatoR is perfectly tailored to work with GeoPressureTemplate—a template repository for analyzing geolocator data using GeoPressureR. Use this dynamic duo to streamline your analysis, maintain a standardized project structure, and keep your geolocator data in perfect formation. (See vignette: Create from GeoPressureTemplate)\nBuilt on frictionless-r: This package is built on top of the frictionless-r package, adhering to the Frictionless Data standards for open data. Think of it as the wind beneath GeoLocatoR’s wings !\n\nYou can install GeoLocatoR from GitHub:\n\n# install.packages(\"pak\")\npak::pkg_install(\"Rafnuss/GeoLocatoR\")",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "geolocator-create.html",
    "href": "geolocator-create.html",
    "title": "\n15  Create\n",
    "section": "",
    "text": "15.1 Add the tag data\nIn this guide, we will see how to generate a GeoLocator Data Package from a GeoPressureTemplate folder where you’ve already performed the analysis of the tracks following the GeoPressureTemplate workflow.\nFor this example, we won’t be using the Swainson’s Warbler nor Great Reed Warbler as we want a full project with multiple tags. Instead, we download the GeoPressureTemplate of the Woodland Kingfisher geolocator project. Our goal will essentially be to reproduce the associated GeoLocator Data Package uploaded on Zenodo already.\nWe can download this GeoPressureTemplate from Github in a temporary folder using the following code:\nWe can generate a GeoLocator Data Package pkg from a GeoPressureTemplate folder with create_gldp_geopressuretemplate(). This function will read the DESCRIPTION file and create a frictionless package with the metadata. At this stage, no data is included in the package.\nAdditional metadata can be added or edited.\nOnce you’re done, you can visual them\nYou can also export these metadata as datapackage.json with:\nOnce we have created the package, we can add the data to the package from the interim .RData files.\npkg &lt;- pkg %&gt;%\n  add_gldp_geopressuretemplate(directory = directory, from = \"interim\")\nprint(pkg)\n\nA GeoLocator Data Package with 8 resources:\n• tags\n• observations\n• measurements\n• twilights\n• staps\n• paths\n• edges\n• pressurepaths\nUse `unclass()` to print the Data Package as a list.",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Create</span>"
    ]
  },
  {
    "objectID": "geolocator-create.html#add-the-tag-data",
    "href": "geolocator-create.html#add-the-tag-data",
    "title": "\n15  Create\n",
    "section": "",
    "text": "Note\n\n\n\nIf you haven’t performed the GeoPressureR analysis yet, but still want to create a GeoLocator Data Package, you can use the add_gldp_geopressuretempate() with from=\"raw-tag\", which will read the data from directly “./data/raw-tag/”.\n\npkg &lt;- pkg %&gt;%\n  add_gldp_geopressuretemplate(directory = directory, from = \"raw-tag\")",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Create</span>"
    ]
  },
  {
    "objectID": "geolocator-create.html#update-tags-and-observations-tables",
    "href": "geolocator-create.html#update-tags-and-observations-tables",
    "title": "\n15  Create\n",
    "section": "\n15.2 Update tags and observations tables",
    "text": "15.2 Update tags and observations tables\nIn the ideal case, tags.csv and observations.csv have been returned by the ringer. In this case, you can simply replace them with:\n\ntags(pkg) &lt;- read_csv(\"data/tags.csv\") # or read_xlsx()\nobservations(pkg) &lt;- read_csv(\"data/observations.csv\")\n\nAlternatively, you might want to start from the table created from the information available in the GeoPressureTemplate folder and edit the tables manually. I suggest creating a temporary .xlsx spreadsheet (and not .csv to preserve the column class), modify it in Excel, and read it back into R. You can also edit the table directly with dplyr functions.\n\ntemp_file &lt;- tempfile(fileext = \".xlsx\")\nwrite_xlsx(tags(pkg), temp_file)\nsystem(paste(\"open\", temp_file))\n# Edit it on the external program and once you're done, save you file and update the table\ntags(pkg) &lt;- read_xlsx(temp_file)\n\n\n\n\n\n\n\nWarning\n\n\n\nDon’t forget to update the metadata of your Data Package when you have updated a table.\n\npkg &lt;- update_gldp(pkg)",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Create</span>"
    ]
  },
  {
    "objectID": "geolocator-create.html#check-the-validity-of-the-data-package",
    "href": "geolocator-create.html#check-the-validity-of-the-data-package",
    "title": "\n15  Create\n",
    "section": "\n15.3 Check the validity of the data package",
    "text": "15.3 Check the validity of the data package\nYou can visualize the coverage of the package by ploting the Data Package. Check for the correct number of tags, as well as equipment and retrieval dates.\n\nplot(pkg)\n\n\n\n\n\n\n\nFinally, we check that the package is compliant with GeoLocator Data Package standards.\n\ncheck_gldp(pkg)",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Create</span>"
    ]
  },
  {
    "objectID": "geolocator-create.html#write-the-package-and-upload-to-zenodo",
    "href": "geolocator-create.html#write-the-package-and-upload-to-zenodo",
    "title": "\n15  Create\n",
    "section": "\n15.4 Write the package and upload to Zenodo",
    "text": "15.4 Write the package and upload to Zenodo\nNow that the package is ready, we can write it to disk.\n\nwrite_package(pkg, file.path(\"~/\", pkg$name))\n\nThe folder created contains all the resources needed for your GeoLocator-DP. Simply upload them to your Zenodo! Use the information in datapackage.json to fill the Zenodo form.",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Create</span>"
    ]
  },
  {
    "objectID": "geolocator-read.html",
    "href": "geolocator-read.html",
    "title": "\n16  Read and use\n",
    "section": "",
    "text": "16.1 Read Geolocator Data Package\nA cool feature of Zenodo is that you can load the data directly without downloading the files!\npkg &lt;- read_gldp(\"https://zenodo.org/records/14099115/files/datapackage.json\")\nAlternatively, it’s possible to load the file from a local directory:\npkg &lt;- read_gldp(file.path(\"~/\", \"woodlandkingfisher\", \"datapackage.json\"))",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Read and use</span>"
    ]
  },
  {
    "objectID": "geolocator-read.html#analyse-data-with-geopressuretemplate",
    "href": "geolocator-read.html#analyse-data-with-geopressuretemplate",
    "title": "\n16  Read and use\n",
    "section": "\n16.2 Analyse data with GeoPressureTemplate",
    "text": "16.2 Analyse data with GeoPressureTemplate\nIf this data package has not yet been analysed with GeoPressureR, you can create a GeoPressureTemplate folder from the data package using the following code. Note that this code will open a new RStudio session.\n\ndest_dir &lt;- tempfile() #\nproject_dir &lt;- write_geopressuretemplate(pkg, destdir = dest_dir, overwrite = TRUE)\n\n! Created directory: /var/folders/cm/dh8lmmxn3b5bcb2_gbz16ycm0000gn/T//RtmpkHkvIY/filece7b7d4d2fab\n\n\n✔ Setting active project to\n  \"/private/var/folders/cm/dh8lmmxn3b5bcb2_gbz16ycm0000gn/T/RtmpkHkvIY/filece7b7d4d2fab/woodlandkingfisher\".\n\n\n✔ Writing 'LICENSE.md'.\n\n\n\n\n\n\n\n\nNote\n\n\n\nMake sure all the steps to make yourself at home have been performed.\nYou’re now ready to analyse your data according to the GeoPressureTemplate instructions!",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Read and use</span>"
    ]
  },
  {
    "objectID": "geolocator-read.html#use-analysed-data",
    "href": "geolocator-read.html#use-analysed-data",
    "title": "\n16  Read and use\n",
    "section": "\n16.3 Use analysed data",
    "text": "16.3 Use analysed data\nIf the datapackage you want to use has already been analysed, you can retrieve all the resources of the datapackage:\n\n# List available resources\nprint(pkg)\n\nA GeoLocator Data Package with 8 resources:\n• tags\n• observations\n• measurements\n• twilights\n• staps\n• paths\n• edges\n• pressurepaths\nUse `unclass()` to print the Data Package as a list.\n\n# For instance, display the edges\nedges(pkg) %&gt;%\n  head() %&gt;%\n  knitr::kable(digits = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntag_id\nstap_s\nstap_t\nlat_s\nlon_s\nlat_t\nlon_t\ns\nt\nj\nstart\nend\nn\ndistance\nbearing\ngs_u\ngs_v\nws_u\nws_v\n\n\n\n16LN\n1\n2\n-22.7\n28.8\n-20.1\n26.6\n8503\n21109\n1\n2017-04-04 19:42:30\n2017-04-05 03:52:30\n1\n363.6\n-38.1\n-26.9\n31.4\n-28.0\n-3.5\n\n\n16LN\n2\n3\n-20.1\n26.6\n-18.9\n26.4\n21109\n34936\n1\n2017-04-05 17:37:30\n2017-04-05 21:12:30\n1\n140.8\n-10.8\n-6.0\n31.7\n-13.8\n-1.0\n\n\n16LN\n3\n4\n-18.9\n26.4\n-18.1\n27.1\n34936\n49373\n1\n2017-04-06 01:02:30\n2017-04-06 03:42:30\n1\n114.7\n43.8\n23.0\n24.0\n-2.3\n-0.1\n\n\n16LN\n4\n5\n-18.1\n27.1\n-17.1\n26.6\n49373\n63049\n1\n2017-04-06 23:52:30\n2017-04-07 03:07:30\n1\n122.7\n-25.7\n-12.9\n26.9\n-16.9\n-9.8\n\n\n16LN\n5\n6\n-17.1\n26.6\n-17.1\n27.4\n63049\n77489\n1\n2017-04-07 18:17:30\n2017-04-07 21:12:30\n1\n79.8\n90.1\n18.2\n0.0\n-9.5\n-3.5\n\n\n16LN\n6\n7\n-17.1\n27.4\n-15.6\n25.6\n77489\n90403\n1\n2017-04-08 17:37:30\n2017-04-08 22:17:30\n1\n250.0\n-48.6\n-36.0\n31.7\n-23.2\n3.4\n\n\n\n\n\nHere is an example showing all the tracks\n\nCodebird_data &lt;- paths(pkg) %&gt;%\n  filter(type == \"most_likely\")\n\n# Generate a color palette for unique tag IDs\ntag_ids &lt;- unique(bird_data$tag_id)\ncolor_palette &lt;- colorFactor(palette = \"Set1\", domain = tag_ids)\n\nleaflet_map &lt;- leaflet(height = 600) %&gt;% addTiles()\n\n# Add polylines and markers for each tag_id\nfor (tag in tag_ids) {\n  bird_subset &lt;- bird_data %&gt;% filter(tag_id == tag)\n  leaflet_map &lt;- leaflet_map %&gt;%\n    addPolylines(\n      lng = ~lon,\n      lat = ~lat,\n      data = bird_subset,\n      color = color_palette(tag),\n      weight = 2,\n      popup = ~ paste0(\"Tag ID: \", tag_id, \"&lt;br&gt;Step: \", stap_id)\n    ) %&gt;%\n    addCircleMarkers(\n      lng = ~lon,\n      lat = ~lat,\n      data = bird_subset,\n      color = color_palette(tag),\n      radius = 4,\n      fillOpacity = 0.8,\n      popup = ~ paste0(\"Tag ID: \", tag_id, \"&lt;br&gt;Step: \", stap_id)\n    )\n}\n\n# Add a legend\nleaflet_map &lt;- leaflet_map %&gt;%\n  addLegend(\n    position = \"topright\",\n    pal = color_palette,\n    values = tag_ids,\n    title = \"Bird Trajectories\",\n    opacity = 1\n  )\n\n# Display the map\nleaflet_map",
    "crumbs": [
      "GeoLocator DP",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Read and use</span>"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Appendix A — Resources",
    "section": "",
    "text": "A.1 Mailing list\nIf you are actively using the package, we recommand subscribing to the mailing list to be aware of bugs, issue and improvements.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#main-publications",
    "href": "resources.html#main-publications",
    "title": "Appendix A — Resources",
    "section": "A.2 Main Publications",
    "text": "A.2 Main Publications\nMain paper presenting the approach to estimate a likelihood map from pressure timeseries:\n\nNussbaumer, R., Gravey, M., Briedis, M., & Liechti, F. (2023). Global positioning with animal-borne pressure sensors. Methods in Ecology and Evolution, 14, 1104–1117. https://doi.org/10.1111/2041-210X.14043\n\nPaper presenting the movement model:\n\nNussbaumer, R., Gravey, M., Briedis, M., Liechti, F. & Sheldon, D. (2023) Reconstructing bird trajectories from pressure and wind data using a highly optimised hidden Markov model. Methods in Ecology and Evolution, 14, 1118–1129. https://doi.org/10.1111/2041-210X.14082\n\nPaper reviewing the strengths, limitations, and opportunities of geolocation by pressure from a more applied perspective:\n\nRhyne, G. S., Stouffer P. C., Briedis, M., Nussbaumer, R. (2024). Barometric geolocators can reveal unprecedented details about the migratory ecology of small birds. Ornithology. https://doi.org/10.1093/ornithology/ukae010",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#presentations",
    "href": "resources.html#presentations",
    "title": "Appendix A — Resources",
    "section": "A.3 Presentations",
    "text": "A.3 Presentations\n\nRaphaël Nussbaumer. GeoPressureR: Introduction and case studies. August 2023. 14th European Ornithologicals’ Union Congress. PRESENTATION available as PDF.\n\n\nRaphaël Nussbaumer, Colin Jackson, Lennox Kirao, Felix Liechti. The potential of multi-sensor geolocators to study short-distance Afrotropical migrants. November 2022. 15th Pan-African Ornithological Congress. PRESENTATION available as PDF.\n\n\nRaphaël Nussbaumer, Mathieu Gravey, Martins Briedis, Felix Liechti. Leveraging light, pressure, activity, and wind data to improve geolocator positioning. August 2022. 28th International Ornithological Congress. PRESENTATION available at Youtube and as PDF.\n\n\nRaphaël Nussbaumer, Mathieu Gravey, Felix Liechti. Improving the spatial accuracy of multi-sensor geolocators’ position using atmospheric surface pressure. October 2021. 7th International Bio-logging Science Symposium. PRESENTATION available at Youtube and as PDF.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#projects-using-geopressurer",
    "href": "resources.html#projects-using-geopressurer",
    "title": "Appendix A — Resources",
    "section": "A.4 Projects using GeoPressureR",
    "text": "A.4 Projects using GeoPressureR\nYou can find below the list of all research projects using GeoPressureR with links to the code used to analyse and create figures. This might be helpful to get an idea of how to analyse your data and borrow some code sections for your own project. Feel free to contact me if you’d like to add your project to this list.\n\nData & code\n\nMongolian Nightjar   \nNorthern Wheatear   \nSwainson’s Warbler   \nSiberian Rubythroat  \nMyrtle Warbler  \nWoodland Kingfisher \nRed-capped Robin-chat and Mangrove Kingfisher \n\n\n\nData only\n\nLesser Grey Shrike  \nBarred Warbler",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "resources.html#references",
    "href": "resources.html#references",
    "title": "Appendix A — Resources",
    "section": "A.5 References",
    "text": "A.5 References\n\n\nAllard, Denis, A. Comunian, and Philippe Renard. 2012.\n“Probability Aggregation Methods in Geoscience.”\nMathematical Geosciences 44 (July): 545–81. https://doi.org/10.1007/s11004-012-9396-3.\n\n\nBasson, Marinelle, Mark V. Bravington, Jason R. Hartog, and Toby A.\nPatterson. 2016. “Experimentally Derived Likelihoods for\nLight-Based Geolocation.” Methods in Ecology and\nEvolution 7 (August): 980–89. https://doi.org/10.1111/2041-210X.12555.\n\n\nBindoff, Aidan D., Simon J. Wotherspoon, Christophe Guinet, and Mark A.\nHindell. 2018. “Twilight‐free Geolocation from Noisy Light\nData.” Edited by David Orme. Methods in Ecology and\nEvolution 9 (May): 1190–98. https://doi.org/10.1111/2041-210X.12953.\n\n\nCopernicus Climate Change Service. 2018. “ERA5 Hourly Data on\nPressure Levels from 1940 to Present.” Copernicus Climate Change\nService (C3S) Climate Data Store (CDS). https://doi.org/10.24381/CDS.BD0915C6.\n\n\n———. 2019. “ERA5-Land Hourly Data from 1950 to Present.”\nCopernicus Climate Change Service (C3S) Climate Data Store (CDS). https://doi.org/10.24381/CDS.E2161BAC.\n\n\nLisovski, Simeon, Silke Bauer, Martins Briedis, Sarah C. Davidson, Kiran\nL. Dhanjal‐Adams, Michael T. Hallworth, Julia Karagicheva, et al. 2020.\n“Light‐level Geolocator Analyses: A User’s Guide.” Edited\nby Garrett Street. Journal of Animal Ecology 89 (January):\n221–36. https://doi.org/10.1111/1365-2656.13036.\n\n\nNussbaumer, Raphaël, Mathieu Gravey, Martins Briedis, and Felix Liechti.\n2023. “Global positioning with animal‐borne\npressure sensors.” Methods in Ecology and\nEvolution, January. https://doi.org/10.1111/2041-210X.14043.\n\n\nNussbaumer, Raphaël, Mathieu Gravey, Martins Briedis, Felix Liechti, and\nDaniel Sheldon. 2023. “Reconstructing bird\ntrajectories from pressure and wind data using a highly optimized hidden\nMarkov model.” Methods in Ecology and Evolution\n2023 (February): 1–12. https://doi.org/10.1111/2041-210X.14082.\n\n\nPatterson, Toby A., Len Thomas, Chris Wilcox, Otso Ovaskainen, and Jason\nMatthiopoulos. 2008. “State-space models of\nindividual animal movement.” Trends in Ecology and\nEvolution 23 (2): 87–94. https://doi.org/10.1016/j.tree.2007.10.009.\n\n\nTobias, Joseph A., Catherine Sheard, Alex L. Pigot, Adam J. M. Devenish,\nJingyi Yang, Ferran Sayol, Montague H. C. Neate-Clegg, et al. 2022.\n“AVONET: Morphological, Ecological and Geographical Data for All\nBirds.” Edited by Tim Coulson. Ecology Letters 25 (3):\n581–97. https://doi.org/10.1111/ele.13898.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "probability-aggregation.html",
    "href": "probability-aggregation.html",
    "title": "Appendix B — Probability aggregation",
    "section": "",
    "text": "B.1 Problem presentation\nAt the core of GeoPressure, we try to estimate the position of the bird based on a pressure mismatch of the geolocator and a weather reanalysis dataset ERA5. A major challenge in this process is the transformation of map of errors (mismatch) into a probability.\nIn this chapter, we present this challenge, look at the theory behind it, and explore possible solutions using Great Reed Warbler (18IC) as an example.\nFor each stationary period, we estimate the probability of the position \\(\\textbf{x}\\) of the bird based on a pressure timeseries measured by the geolocator \\(P_{gl}[t] \\quad \\forall t \\in [1,\\ldots,n]\\), which, in a Bayesian framework can be written as, \\[p(\\textbf{x}\\mid P_{gl}[1],\\ldots,P_{gl}[n]) \\propto p(P_{gl}[1],\\ldots,P_{gl}[n] \\mid \\textbf{x}) p(\\textbf{x}).\\]\nWe are interested here in determining the likelihood term \\(p(P_{gl} \\mid \\textbf{x})\\) which represents the probability of observing the timeseries \\(P_{gl}\\) knowing that the bird is at location \\(\\textbf{x}\\). To quantify this probability, we look at the mismatch between \\(P_{gl}\\) and the pressure timeseries of the ERA5 database \\(P_{ERA5}(\\textbf{x})\\) extracted at location \\(\\textbf{x}\\). We can reformulate the likelihood as as a probability function \\(f\\) of an error term \\(\\varepsilon(\\textbf{x})\\) which measures a distance between \\(P_{gl}\\) and \\(P_{ERA5}(\\textbf{x})\\) \\[p(P_{gl} \\mid \\textbf{x}) = f(\\varepsilon[1],\\ldots,\\varepsilon[n])\\]\nThis formulation of the problem helps us to split our problem in two: first defining an error term \\(\\varepsilon[t]\\) and secondly defining the likelihood function \\(f\\).",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Probability aggregation</span>"
    ]
  },
  {
    "objectID": "probability-aggregation.html#problem-presentation",
    "href": "probability-aggregation.html#problem-presentation",
    "title": "Appendix B — Probability aggregation",
    "section": "",
    "text": "B.1.1 Error term\nIn most cases, we would expect to measure the error term with a simple difference \\(P_{ERA5}(\\textbf{x})[t]-P_{gl}[t].\\) However, within a ERA5 grid cell of 9-30km, we can expect a wide range of altitude at which the bird can be located. As such any offset between the two timeseries might be due to nothing more than a difference of altitude.\nTo solve this issue, we remove the mean pressure difference, essentially ignoring the absolute value of pressure (and altitude) such that the error term only quantify the mismatch of the temporal variation, \\[\\varepsilon[t] = \\left( P_{ERA5}(\\textbf{x})[t]-P_{gl}[t]\\right) - \\left( \\frac{1}{n}\\sum_{i=1}^{n} P_{ERA5}(\\textbf{x})[i]-P_{gl}[i] \\right) .\\]\nThis way of building the error term has some important consequences. A timeseries of only one datapoint will always yield zero error at all locations, resulting in an equally probable map. As the number of datapoints increases, the error term will become more and more able to distinguish between “good” and “bad” locations.\n\nB.1.2 Error term for the Great Reed Warbler\nLet’s load the data and filter\n\nload(\"./data/interim/CB619.RData\")\n\nWe are using the GeoPressure API with the geopressure_map_mismatch() function to measure the mismatch of the pressure series. Because the API can realistically return only a single map per stationary period, it aggregates the error timeseries with the Mean Squared Error (MSE), \\[\\mathit{MSE} = \\frac{1}{n}\\sum_{t=1}^{n} \\varepsilon[t]^2.\\]\nThe MSE shows where the match of pressure is the best, excluding open water (ERA5-LAND does not support water). tag$stap also contains a column nb_sample which indicates the number of datapoints used to compute the MSE \\(n\\). This value can only be up to the value max_sample.\n\nplot(tag, type = \"map_pressure_mse\")\n\n\n\n\nkable(head(tag$stap))\n\n\n\n\n\n\n\n\n\n\n\n\nstap_id\nstart\nend\nknown_lat\nknown_lon\ninclude\nnb_sample\n\n\n\n1\n2021-07-01 02:15:10\n2021-09-24 00:15:10\n37.28681\n-82.30497\nTRUE\n0\n\n\n2\n2021-09-24 11:15:10\n2021-09-24 23:45:10\nNA\nNA\nTRUE\n13\n\n\n3\n2021-09-25 10:45:10\n2021-09-25 23:45:10\nNA\nNA\nTRUE\n14\n\n\n4\n2021-09-26 12:45:10\n2021-09-27 04:15:10\nNA\nNA\nTRUE\n16\n\n\n5\n2021-09-27 08:15:10\n2022-04-06 00:45:10\nNA\nNA\nTRUE\n100\n\n\n6\n2022-04-06 10:15:10\n2022-04-07 00:15:10\nNA\nNA\nTRUE\n14",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Probability aggregation</span>"
    ]
  },
  {
    "objectID": "probability-aggregation.html#gaussian-likelihood-function",
    "href": "probability-aggregation.html#gaussian-likelihood-function",
    "title": "Appendix B — Probability aggregation",
    "section": "\nB.2 Gaussian likelihood function",
    "text": "B.2 Gaussian likelihood function\nIn order to find an appropriate likelihood function, we first need to assume a distribution of the error. The sources of error are (1) the sensor measurement error, (2) the ERA5 reanalysis error and (3) the attitudinal movement of the bird during this time. Because we are removing the mean error, we can ignore any long-term errors (e.g., constant temporal error in ERA5 or biases in the geolocator sensor).\nThe figure below shows the error distribution at the known location of equipment and retrieval.\n They all look close enough to a Gaussian distribution. In the case of the Great Reed Warbler, the standard deviation is around 0.5.\n\nsd &lt;- 0.5\n\nTherefore, assuming a Gaussian distribution of our error, the Gaussian likelikhood of a multivariate normal distribution is given by \\[ f(\\boldsymbol{\\varepsilon})={\\frac {1}{(2\\pi)^{n/2} \\sqrt{\\det(\\boldsymbol{\\Sigma})}}}\\exp \\left(-\\frac{1}{2} \\boldsymbol{\\varepsilon} \\boldsymbol{\\Sigma}^{-1} \\boldsymbol{\\varepsilon} \\right).\\] with the vector notation \\(\\boldsymbol{\\varepsilon }=[\\varepsilon[1],\\ldots,\\varepsilon[n]]\\) and where the covariance matrix \\(\\boldsymbol{\\Sigma}\\) contains the variance of two datapoints \\(\\boldsymbol{\\Sigma}_{t_1,t_2} = \\operatorname {E}[ \\varepsilon[t_1] \\varepsilon[t_2] ]\\).\n\nB.2.1 Independance of errors\nAs the covariance is difficult to quantify explicitly, we can first look at the very strong assumption of independence of the error, \\(\\varepsilon_t \\overset{i.i.d.}{\\sim} \\mathcal{N}(0,\\sigma)\\). In this case, the Gaussian likelikhood function \\(f_{ind}\\) is simply the product of the normal probability density function of each error \\(\\varepsilon[t]\\), \\[ f_{ind}(\\boldsymbol{\\varepsilon})=\\prod _{t=1}^{n}f_\\mathcal{N}(\\varepsilon[t])=\\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{n/2}\\exp \\left(-{\\frac {\\sum _{t=1}^{n}\\varepsilon[t]^2}{2\\sigma ^2}}\\right).\\]\nWe can re-write this equation as a function of the MSE \\[ f_{ind}(\\boldsymbol{\\varepsilon})=\\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{n/2}\\exp \\left(-n{\\frac {\\mathit{MSE}}{2\\sigma ^2}}\\right).\\]\nUsing this equation, we can compute the probability for each stationary periods. This function corresponds the one used in geopressure_map_likelihood() using the following parameters\n\ntag_tmp &lt;- geopressure_map_likelihood(tag, sd = sd, log_linear_pooling_weight = \\(n) 1)\nplot(tag_tmp, type = \"map_pressure\")\n\n\n\n\n\nAssuming independence, the Gaussian likelihood transforms the MSE into probability with narrow ranges of uncertainties. So narrow that for long stationary period (#7 and #9), the entire map is 0.\nThis comes from the multiplication of probability assumed in the independence case (see equation above). The underlying assuming of the multiplication operator is the conjunction of probabilities, where aggregating two information is done with the AND operator: \\(P(A~\\text{and}~B) = P(A)\\times P(B)\\). Only the information content overlapping every datapoint of information is kept.\n\nB.2.2 Quantification of the errors dependance\nPloting the auto-covariance at the calibration site for all the species allow us to see a temporal pattern in the error. For most bird, we can see a clear daily fluctuation which is certainly due to the bird daily movement for commute between feeding and roosting site. The auto-covariance approaches 0 for all birds, which is expected as we removed the mean value. However, the sill is reached between 6 and 12 hours depending on bird (the hoopoe doesn’t reach it after 3 days!).\n\n\nAuto-covariance of the error term\n\nFrom this observation, one option would be to construct a covariance matrix based on the auto-covariance. While this would look like the cleanest way of doing it, we have two issues.\n\nThe first one is the absence of stationarity. Indeed, the auto-covariance amplitude (and potentially shape) is strongly influenced by the vertical displacement of the bird, which is strongly correlated with topography. For instance, the Eurasian Hoopoe has a high variance and large temporal range because it breeds at the feet of the Alps. During the rest of the year, it lives in rather flat area. Therefore, the covariance built from the breeding site would not be appropriate for the other sites.\nThe second issue has to do with the definition of our error term and the different duration of stationary period.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Probability aggregation</span>"
    ]
  },
  {
    "objectID": "probability-aggregation.html#probability-aggregation",
    "href": "probability-aggregation.html#probability-aggregation",
    "title": "Appendix B — Probability aggregation",
    "section": "\nB.3 Probability aggregation",
    "text": "B.3 Probability aggregation\nIn the rest of this vignette, we will take a different angle, re-framing the problem differently and exploring other options to compute the likelihood.\nIn the field of probability aggregation, the problem of combining sources of information with overlapping/redundant content is frame as finding a pooling operator \\(F\\) such that, \\[p(\\textbf{x}\\mid \\varepsilon[1],\\ldots,\\varepsilon[n]) \\approx F(p(\\textbf{x} \\mid \\varepsilon[1]) ,\\ldots,p(\\textbf{x} \\mid \\varepsilon[n])),\\] which, with our Gaussian assumption, we can written, \\[ F(f(\\varepsilon[1]),\\ldots,f(\\varepsilon[n]))=F(\\boldsymbol{\\varepsilon})\\]\n\nB.3.1 Introduction to Log-linear pooling\nThe most popular aggregation function is the log-linear pooling,\n\\[F(\\boldsymbol{\\varepsilon}) \\propto \\prod_{t=1}^n f(\\varepsilon[t])^{w_t}\\]\nThis equation also relies on the principle of conjunction of probability, but it uses a weight \\(w_t\\) which is related to the new information brought by each additional \\(\\varepsilon[t]\\). Formally, it can be defined by \\[w_t=\\frac{\\ln p(\\varepsilon[t] \\mid \\boldsymbol{x},\\varepsilon[1],\\ldots \\varepsilon[t-1])}{\\ln p(\\varepsilon[t] \\mid \\boldsymbol{x})}.\\] Allard, Comunian, and Renard (2012) is a great resource to learn more about probability aggregation and log linear pooling.\nThe log-linear pooling aggregation simplifies to the case of Gaussian independence when \\(w_t=1\\). We have already explored this case earlier.\nIn the more general case, using the Gaussian probability density function formula, we can write, \\[f(\\varepsilon[t])^{w_t} = \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{w_t/2}\\exp \\left(-w_t{\\frac {\\varepsilon[t]^2}{2\\sigma ^2}}\\right).\\]\nAs such, if we assume the weight to be constant \\(w_t=w\\), we can rewrite the pooling aggregator as \\[F(\\boldsymbol{\\varepsilon}) \\propto \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{\\frac{wn}{2}} \\exp \\left(-{\\frac {w}{2\\sigma ^2}}\\sum _{t=1}^{n}\\varepsilon[t]^2\\right),\\]\nand even write it as a function of the MSE, \\[F(\\boldsymbol{\\varepsilon}) \\propto \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{\\frac{wn}{2}} \\exp \\left(-{\\frac {wn}{2\\sigma ^2}}\\textit{MSE}\\right).\\]\n\nB.3.2 Log-linear pooling, \\(w=1/n\\)\n\nAn interesting case is if \\(w=1/n\\), so that \\(\\sum_t w_t=1\\). This would simplify the log-linear pooling aggregator to \\[ F(\\boldsymbol{\\varepsilon})={\\frac {1}{\\sigma\\sqrt{2\\pi} }}\\exp \\left(-{\\frac {1}{2\\sigma ^2}\\mathit{MSE}}\\right),\\] which can be interpreted as the Gaussian probability distributions of the MSE. The length of the timeseries \\(n\\) has disappeared from the equation, so that the aggregation dependence only on the mean square of the errors, regardless of how many datapoints.\nWe can try this and see the influence on the probability map.\n\ntag_tmp &lt;- geopressure_map_likelihood(tag, sd = sd, log_linear_pooling_weight = \\(n) 1 / n)\nplot(tag_tmp, type = \"map_pressure\")\n\n\n\n\n\nAs expected from the disappearance of n, the uncertainty is now completely independent from the duration of the stationary period.\nThis is again obviously not what we want, but it shows the other extreme of the log-linear pooling.\n\nB.3.3 Log-linear pooling, \\(w = \\log(n)/n\\)\n\nFor this study, we chose to use \\(w=\\frac{\\log(n)}{n}\\), which result in the pooling aggregation\n\\[F(\\boldsymbol{\\varepsilon}) \\propto \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{\\frac{w\\log(n)}{2}} \\exp \\left(-{\\frac {\\log(n)}{2\\sigma ^2}}\\textit{MSE}\\right).\\]\nThis scheme was designed to minimize the strength of \\(1/n\\)\n\ntag_tmp &lt;- geopressure_map_likelihood(tag, sd = sd, log_linear_pooling_weight = \\(n) log(n) / n)\nplot(tag_tmp, type = \"map_pressure\")\n\n\n\n\n\n\nB.3.4 Validation\nValidation of uncertainty estimation is relatively difficult, especially when there are only a few datapoints and we assume that the behaviour of the bird might differ between calibration sites (equipment and retrieval) and the rest of its journey.\nIn the figure below, some examples of uncertainty estimate are shown. Ideally, we want the colored area to be small (low uncertainty), but when assessing an uncertainty, we also want the red cross to fall within the colored area. That is, if the red cross is too often outside, our estimator is too confident.\nFurthermore, the shape of the uncertainty can be strongly anisotropic (e.g., hoopoe bottom right) making the distance between the most likely point (blue) and true value (red cross) a poor measure of uncertainty.\n\n\nUncertainty of pressure mismatch (colorscale) for the equipment period showing the true equipment sire (red cross) within the probability map estimated and the most likely value\n\nAssessing uncertainty relies on checking that that the red cross is distributed according to each uncertainty shape. A more formal way to quantifiying the uncertainty is of the quantile of the true value \\(q=p(\\boldsymbol{x}\\leq \\boldsymbol{x}_{true})\\), which corresponds to the probability that the variable is less than or equal to the true value. So, if the true value belongs to the distribution, the distribution of its quantile should be uniform.\nThis can be visualize with the empirical cumulative distribution of the quantiles which should fall on the 1:1 line (like a qq-plot). The two extreme cases (\\(w=1\\) and \\(w=1/n\\)) show overconfidence (above the line) and underconfidence (below the line) respectively. Indeed, the distribution of quantile using the \\(w=1/n\\) method shows a lot of quantile values between 0.9-1, which indicates that the true value is within the 90% uncertainty contour (under-confident).\n\nThe method chosen (\\(w=\\log(n)/n\\)) is doing better than both, but is still in general underconfident. Because the calibration the validation is performed with rather long temporal serie (equipment and retrieval), one can expect that the labelisation of pressure is better/easier than for other places. Thus, it seems more appropriate to be slightly underconfident while the method is being developed.\nThe covariance aggregation scheme was implemented by computing the covariance matrix of the multi-variate Gaussian distribution. The covariance function was build using the exact on the variogram of each species. This is, in theory, the more correct method, but it looks too overconfident. Thus we didn’t use it for now.\nLooking forward, calibration is highly dependent on the local topography and the ability of the bird to move up and down. Manual edition/labelling has also a strong impact.\n\n\n\n\nAllard, Denis, A. Comunian, and Philippe Renard. 2012. “Probability Aggregation Methods in Geoscience.” Mathematical Geosciences 44 (July): 545–81. https://doi.org/10.1007/s11004-012-9396-3.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Probability aggregation</span>"
    ]
  }
]