[{"path":"index.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"","code":""},{"path":"index.html","id":"what-can-you-do-with-geopressurer","chapter":"Introduction","heading":"0.1 What can you do with GeoPressureR?","text":"package can broken two parts:Convert pressure timeserie probability map(s) positions. corresponding steps described chapter Pressure map manual, corresponding publication Raphaël Nussbaumer et al.1Produce trajectory model integrating pressure, light, movement wind data. methodology achieve covered chapters Basic graph Wind graph corresponding publication Raphaël Nussbaumer et al.2For quick overview, 10 min presentation presents motivation, provides overview method illustrates possible results.","code":""},{"path":"index.html","id":"what-do-you-need-to-use-geopressurer","chapter":"Introduction","heading":"0.2 What do you need to use GeoPressureR?","text":"order able use GeoPressureR, need minimum timeserie pressure measurements minimal temporal resolution 1hr. Accelerometer light data optional.GeoPressureR works best species clear separation stationary migratory periods, opposed birds moving continuously gradually large distances (10-50km) altitude (>10m). , areal feeders swifts bee-eaters mountainous species lend well method.Acceleration data can helpful define periods flight bird flies low altitude pressure data measured coarse temporal resolution (>5min).Light data can also helpful speed-building trajectory modeling allowing quickly narrow possible locations short stationary periods.Feel free contact discuss data study species.","code":""},{"path":"index.html","id":"the-geopressure-suite","chapter":"Introduction","heading":"0.3 The GeoPressure suite","text":"GeoPressure suite includes several tools:GeoPressureR main R package.GeoPressureViz shiny app included GeoPressureR visualize trajectory bird. See GeoPressureViz chapter introduction demo 18LX.GeoPressureManual user guide developed help learn use GeoPressureR.GeoPressureTemplate template Github repository help kickstart project.GeoPressureAPI JSON API used GeoPressureR hood query ERA5 reanalysis data Google Earth Engine.","code":""},{"path":"index.html","id":"installation","chapter":"Introduction","heading":"0.4 Installation","text":"start, install GeoPressureR package Github using following line:needing additional packages can installed DESCRIPTION withFinally, can load ","code":"\ninstall.packages(\"devtools\")\ndevtools::install_github(\"Rafnuss/GeoPressureR\")\ndevtools::install()\nlibrary(GeoPressureR)\n\n# Only used for some visualization. The code to compute the light position is included in `GeoPressureR`\nlibrary(GeoLocTools)\nsetupGeolocation()\n\n# ERA5 data download library\nlibrary(ecmwfr)\n\n# Graph library \nlibrary(igraph)\n\n# Plotting library\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(plotly)\nlibrary(RColorBrewer)\n\n# Interactif figure library\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(moveVis)"},{"path":"pressure-map.html","id":"pressure-map","chapter":"1 Pressure map","heading":"1 Pressure map","text":"chapter covers main steps determine position bird pressure data. code basically implement method presented Nussbaumer et al.3","code":""},{"path":"pressure-map.html","id":"read-geolocator-data","chapter":"1 Pressure map","heading":"1.1 Read geolocator data","text":"read geolocator data crop starts equipment date ends retrieval date.pam_read() currently support data Swiss Ornithological Institute files (*.pressure, *.lux, *.acceleration) Migrate Technology (.deg, *.lux). file format, please contact (submit Github issue email).","code":"\npam <- pam_read(\n  pathname = \"data/0_PAM/18LX\",\n  crop_start = \"2017-06-20\",\n  crop_end = \"2018-05-02\"\n)"},{"path":"pressure-map.html","id":"label-tracks","chapter":"1 Pressure map","heading":"1.2 Label tracks","text":"labeling track two-fold:\n- Indicate flight periods adding logical (TRUE FALSE) acceleration measurement: pam$acceleration$ismig.\n- Identify outlier pressure measurement use estimating position logical pam$pressure$isoutliar.ensure high level precision needed pressure match, strongly suggest use manually labeling TRAINSET. chapter labelling tracks dedicated exercise includes tips best practices. , just walk main step workflow.","code":""},{"path":"pressure-map.html","id":"no-acceleration-data","chapter":"1 Pressure map","heading":"1.2.1 No acceleration data","text":"acceleration data available tracks, suggest create fake acceleration data, using instance pressure dataset:Note use temporal resolution pressure measure, resolution activity can used.won’t able use pam_classify(), skip next sub-section. can try classification migration change point analysis (e.g., https://kiranlda.github.io/PAMLrManual/soar.html#classify-using--changepoint-analysis), case, often easier classify directly track manually.","code":"\npam$acceleration = pam$pressure\npam$acceleration$obs = 0 # you could also keep the pressure measurement for ease of identification in TRAINSET\npam$acceleration$obs[1] = 1 # trick to avoid y axis issue in TRAINSET (see https://github.com/Rafnuss/GeoPressureR/discussions/26)\npam$acceleration$ismig = FALSE"},{"path":"pressure-map.html","id":"automatic-classification-of-activity","chapter":"1 Pressure map","heading":"1.2.2 Automatic classification of activity","text":"initialize labelling file automatic classification activity. first use k-mean clustering group periods low high activity classify high activities lasting 30 minutes migratory activities. See possible classifications PALMr manual.","code":"\npam <- pam_classify(pam, min_duration = 30)"},{"path":"pressure-map.html","id":"edit-activity-on-trainset","chapter":"1 Pressure map","heading":"1.2.3 Edit activity on TRAINSET","text":"Use trainset_write() export automatically generated classifications csv file, can opened TRAINSET: https://trainset.geocene.com/.Print screen manual classification TRAINSET. See labelling tracks information.finished manual editing, export new csv file (TRAINSET add -labeled name) /data/1_pressure/labels/) read file trainset_read().","code":"\ntrainset_write(pam, pathname = \"data/1_pressure/labels/\")\n# browseURL(\"https://trainset.geocene.com/\")\npam <- trainset_read(pam, pathname = \"data/1_pressure/labels/\")"},{"path":"pressure-map.html","id":"identify-stationary-periods","chapter":"1 Pressure map","heading":"1.3 Identify stationary periods","text":"Based activity labelling, pam_sta() creates table stationary periods illustrated .can visualize pressure measurements grouped stationary period (symbolized different color). back dots represents pressure labeled outlier data-point matched.","code":"\npam <- pam_sta(pam)\nknitr::kable(head(pam$sta))\npressure_na <- pam$pressure\npressure_na$obs[pressure_na$isoutlier | pressure_na$sta_id == 0] <- NA\np <- ggplot() +\n  geom_line(data = pam$pressure, aes(x = date, y = obs), col = \"grey\") +\n  geom_line(data = pressure_na, aes(x = date, y = obs, col = as.factor(sta_id))) +\n  geom_point(data = subset(pam$pressure, isoutlier), aes(x = date, y = obs), colour = \"black\") +\n  theme_bw() +\n  scale_y_continuous(name = \"Pressure (hPa)\") +\n  scale_colour_manual(values = rep(RColorBrewer::brewer.pal(9, \"Set1\"), times = 8))\n\nggplotly(p, dynamicTicks = T) %>%\n  layout(\n    showlegend = F,\n    legend = list(orientation = \"h\", x = -0.5),\n    yaxis = list(title = \"Pressure [hPa]\")\n  )"},{"path":"pressure-map.html","id":"compute-pressure-maps","chapter":"1 Pressure map","heading":"1.4 Compute pressure maps","text":"Now clean pressure time series stationary period, ready match one weather reanalysis dataset (ERA5). overcome challenge handling large dataset, GeoPressureR uses API GeoPressure perform computation Google Earth Engine.Initially, easier faster query long stationary periods (example , select periods longer 12hrs). can setting pressure stationary periods wish discard NA.can now query data API geopressure_map(). detailed description parameters can found . take couple minutes run.geopressure_map() returns list two rasters stationary periods. first mean square error (\\(\\textbf{MSE}\\)) pressure time series ERA5 map. second (\\(\\textbf{z}_{thr}\\)) proportion data-points pressure time series correspond altitude falls min max altitude grid cell. Read values computed .","code":"\nsta_id_keep <- pam$sta$sta_id[difftime(pam$sta$end, pam$sta$start, units = \"hours\") > 0]\npam$pressure$sta_id[!(pam$pressure$sta_id %in% sta_id_keep)] <- NA\npressure_maps <- geopressure_map(\n  pam$pressure,\n  extent = c(50, -16, 0, 23), # coordinates of the map to request (N, W, S, E)\n  scale = 2, # request on a 1/2=0.5° grid to make the code faster\n  max_sample = 250, # limit the query to the first 250 data-points.\n  margin = 30 # roughly equivalent to 3hPa\n)"},{"path":"pressure-map.html","id":"compute-probability-maps","chapter":"1 Pressure map","heading":"1.5 Compute probability maps","text":"combine two rasters single probability map using\n\\[\\textbf{P} = \\exp \\left(-w \\frac{\\textbf{MSE}}{s} \\right) [\\textbf{z}_{thr}>thr]\\]\n\\(s\\) standard deviation pressure \\(thr\\) threshold mask. auto-correlation time series accounted equation, use log-linear pooling weight \\(w=\\log(n) - 1\\), \\(n\\) number data-points time series. Probability aggregation describing influence log-linear pooling length time series added later.use leaflet visualize threshold mask, mismatch map, overall probability map single stationary period.can also visualize probability map stationary periods:","code":"\npressure_prob <- geopressure_prob_map(\n  pressure_maps,\n  s = 1, # standard deviation of pressure\n  thr = 0.9 # threshold of the threshold proportion value acceptable\n)\ni_r <- 2\nleaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl() %>%\n  addRasterImage(pressure_prob[[i_r]], opacity = 0.8, colors = \"OrRd\", group = \"Probability\") %>%\n  addRasterImage(pressure_maps[[i_r]][[1]], opacity = 0.8, colors = \"OrRd\", group = \"Mismatch\") %>%\n  addRasterImage(pressure_maps[[i_r]][[2]], opacity = 0.8, colors = \"OrRd\", group = \"Threashold\") %>%\n  # addLegend(pal = pal, values = values(v[[i_s]][[3]]), title = \"Probability\") %>%\n  addLayersControl(\n    overlayGroups = c(\"Probability\", \"Mismatch\", \"Threashold\"),\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(c(\"Mismatch\", \"Threashold\"))\nli_s <- list()\nl <- leaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl()\nfor (i_r in seq_len(length(pressure_prob))) {\n  i_s <- metadata(pressure_prob[[i_r]])$sta_id\n  info <- pam$sta[pam$sta$sta_id == i_s, ]\n  info_str <- paste0(i_s, \" | \", format(info$start, \"%d-%b %H:%M\"), \"->\", format(info$end, \"%d-%b %H:%M\"))\n  li_s <- append(li_s, info_str)\n  l <- l %>% addRasterImage(pressure_prob[[i_r]], opacity = 0.8, colors = \"OrRd\", group = info_str)\n}\nl %>%\n  addLayersControl(\n    overlayGroups = li_s,\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(tail(li_s, length(li_s) - 1))"},{"path":"pressure-map.html","id":"compute-altitude","chapter":"1 Pressure map","heading":"1.6 Compute altitude","text":"second operation can perform GeoPressureR compute exact altitude bird \\(z_{gl}\\) pressure measurement \\(P_{gl}\\) using barometric equation, correcting natural variation pressure temperature.function used \n\\[ z_{gl}(x)=z_{ERA5}(x) + \\frac{T_{ERA5}(x)}{L_b}  \\left( \\frac{P_{gl}}{P_{ERA5}(x)} \\right) ^{\\frac{RL_b}{g M}-1},\\]\n\\(z_{ERA}\\), \\(T_{ERA}\\) \\(P_{ERA}\\) respectively correspond ground level elevation, temperature 2m ground level pressure ERA5, \\(L_b\\) standard temperature lapse rate, \\(R\\) universal gas constant, \\(g\\) gravity constant \\(M\\) molar mass air. See information .illustrate benefit using equation, compute bird’s altitude first stationary period using (1) GeoPressureR (2) barometric equation using standard atmosphere condition.first determine position bird using likely position using geopressure_map2pathAnd call function geopressure_ts() subset pressure containing sta_id==1We can compare altitude produced one computed without correction temperature pressure:visualize comparison:function geopressure_ts() also returns ground level pressure time series ERA5 location specified. useful check whether good match pressure measured geolocator one assumed location. operation typically used check quality manual labelling (see labelling tracks).","code":"\npt <- geopressure_map2path(pressure_prob[1])\npressure_timeserie_1 <- geopressure_ts(pt$lon, pt$lat, pressure = subset(pam$pressure, sta_id == 1))\nLb <- -0.0065\nR <- 8.31432\ng0 <- 9.80665\nM <- 0.0289644\nT0 <- 273.15 + 15\nP0 <- 1013.25\npressure_timeserie_1$altitude_baro <- T0 / Lb * ((pressure_timeserie_1$pressure / P0)^(-R * Lb / g0 / M) - 1)\np <- ggplot() +\n  geom_line(data = as.data.frame(pressure_timeserie_1), aes(x = date, y = altitude, col = as.factor(\"Corrected elevation with ERA5\"))) +\n  geom_line(data = as.data.frame(pressure_timeserie_1), aes(x = date, y = altitude_baro, col = as.factor(\"Uncorrected elevation\"))) +\n  labs(col = \"\") +\n  theme_bw()\n\nggplotly(p) %>%\n  layout(legend = list(orientation = \"h\", x = -0.5))"},{"path":"pressure-map.html","id":"compute-pressure-and-altitude-for-the-path","chapter":"1 Pressure map","heading":"1.7 Compute pressure and altitude for the path","text":"can repeat computation pressure time series stationary periods. First compute likely position probability map pressure.Secondly, can use geopressure_ts_path() basically call geopressure_ts() parallel stationary periods. can additionally request compute altitude next flight flight include_flight = c(0,1). Note position path water, moved closest point onshore.","code":"\npath <- geopressure_map2path(pressure_prob)\npressure_timeserie <- geopressure_ts_path(path, pam$pressure, include_flight = c(0, 1))\np <- ggplot() +\n  geom_line(data = do.call(\"rbind\", pressure_timeserie), aes(x = date, y = altitude)) +\n  theme_bw() +\n  scale_y_continuous(name = \"Altitude (m)\")\nggplotly(p, dynamicTicks = T) %>% layout(showlegend = F)\ncol <- rep(RColorBrewer::brewer.pal(9, \"Set1\"), times = ceiling((nrow(pam$sta) + 1) / 9))\ncol <- col[1:(nrow(pam$sta) + 1)]\nnames(col) <- levels(factor(c(0, pam$sta$sta_id)))\n\np <- ggplot() +\n  geom_line(data = pam$pressure, aes(x = date, y = obs), colour = \"grey\") +\n  geom_point(data = subset(pam$pressure, isoutlier), aes(x = date, y = obs), colour = \"black\") +\n  # geom_line(data = pressure_na, aes(x = date, y = obs, color = factor(sta_id))) +\n  geom_line(data = subset(do.call(\"rbind\", pressure_timeserie), sta_id != 0), aes(x = date, y = pressure0, col = factor(sta_id))) +\n  theme_bw() +\n  scale_colour_manual(values = col) +\n  scale_y_continuous(name = \"Pressure (hPa)\")\n\nggplotly(p, dynamicTicks = T) %>% layout(showlegend = F)"},{"path":"pressure-map.html","id":"save","chapter":"1 Pressure map","heading":"1.8 Save","text":"","code":"\nsave(\n  pressure_timeserie,\n  pressure_prob,\n  pam,\n  file = \"data/1_pressure/18LX_pressure_prob.Rdata\"\n)"},{"path":"light-map.html","id":"light-map","chapter":"2 Light map","heading":"2 Light map","text":"vignette, use light data estimate position Great Reed Warbler (18LCX) stationary period constructing probability map. step can done based various methods: see Marinelle Basson et al.4 Aidan D. Bindoff et al.5Here use approach based simple threshold based method, using calibration zenith angle. thorough introduction geolocation light data can found https://geolocationmanual.vogelwarte.ch/.6We first load data generated Pressure map.calibration light data, need additional information. second calibration short (1 day) 18LX, discard example.","code":"\nload(\"data/1_pressure/18LX_pressure_prob.Rdata\")\nlon_calib <- 17.05\nlat_calib <- 48.9\ntm_calib_1 <- c(pam$sta$start[1], pam$sta$end[1])\n# tm_calib_2 <- c(pam$sta$start[nrow(pam$sta)], pam$sta$end[nrow(pam$sta)])"},{"path":"light-map.html","id":"annotate-twilights","chapter":"2 Light map","heading":"2.1 Annotate twilights","text":"find time twilight, can use find_twilights(), function performing task TwGeos::FindTwilight(), using matrix representation. approach faster less general (e.g., require regularly spaced light data). doesn’t work data, use TwGeos::FindTwilight().default, threshold first last light day (.e., pam$light$obs>0). shift_k argument identical offset GeoLight functions.can visualize twilight TwGeos visualization functions.notice issue centering night figure, specify manually shift_k.manual editing easily performed TRAINSET. case, must label datapoints want delete. Read TRAINSET labelling Labelling tracks.write twilight data csv file can opened edited TRAINSET.labelling finished, export file update deleted field twl.","code":"\nshift_k <- 0\ntwl <- find_twilights(pam$light,\n  shift_k = shift_k\n)\nraw_geolight <- data.frame(\n  Date = pam$light$date,\n  Light = pam$light$obs\n)\nlightImage(\n  tagdata = raw_geolight,\n  offset = shift_k / 60 / 60\n)\ntsimagePoints(twl$twilight, offset = 0, pch = 16, cex = 1.2)\ntsimageDeploymentLines(raw_geolight$Date,\n  lon = lon_calib, lat = lat_calib,\n  offset = shift_k / 60 / 60, lwd = 3, col = adjustcolor(\"orange\", alpha.f = 0.5)\n)\nabline(v = tm_calib_1, lty = c(1, 2), col = \"firebrick\", lwd = 1.5)\nwrite.csv(\n  data.frame(\n    series = ifelse(twl$rise, \"Rise\", \"Set\"),\n    timestamp = strftime(twl$twilight, \"%Y-%m-%dT00:00:00Z\", tz = \"UTC\"),\n    value = (as.numeric(format(twl$twilight, \"%H\")) * 60 + as.numeric(format(twl$twilight, \"%M\")) - shift_k / 60 + 60 * 12) %% (60 * 24),\n    label = ifelse(is.null(twl$delete), \"\", ifelse(twl$delete, \"Delete\", \"\"))\n  ),\n  file = \"data/2_light/labels/18LX_light.csv\",\n  row.names = FALSE\n)\n# browseURL(\"https://trainset.geocene.com/\")\ncsv <- read.csv(paste0(\"data/2_light/labels/18LX_light-labeled.csv\"))\ntwl$deleted <- !csv$label == \"\"\nlightImage(tagdata = raw_geolight, offset = 0)\ntsimagePoints(twl$twilight,\n  offset = 0, pch = 16, cex = 1.2,\n  col = ifelse(twl$deleted, \"grey20\", ifelse(twl$rise, \"firebrick\", \"cornflowerblue\"))\n)\nabline(v = tm_calib_1, lty = c(1, 2), col = \"firebrick\", lwd = 1.5)"},{"path":"light-map.html","id":"calibrate-zenith-angles","chapter":"2 Light map","heading":"2.2 Calibrate zenith angles","text":"Instead calibrating twilight errors terms duration, directly model zenith angle error.First, retrieve twilight calibration period.compute zenith angle (.e., elevation sun) twilight time calibration site.Finally, fit kernel distribution relatively smooth bandwidth account possible bias.adjust parameter allows manually set smooth want fit . zenith angle error model fitted data calibration site using locations bird’s journey, safer assume broader/smoother distribution.","code":"\ntwl_calib <- subset(twl, !deleted & twilight >= tm_calib_1[1] & twilight <= tm_calib_1[2])\nsun <- solar(twl_calib$twilight)\nz <- refracted(zenith(sun, lon_calib, lat_calib))\nfit_z <- density(z, adjust = 1.4, from = 60, to = 120)\nhist(z, freq = F)\nlines(fit_z, col = \"red\")"},{"path":"light-map.html","id":"compute-stationary-periods","chapter":"2 Light map","heading":"2.3 Compute stationary periods","text":"computing probability map, group twilights stationary period using activity classify Pressure map | Identifying stationary periods.","code":"\ntmp <- which(mapply(function(start, end) {\n  start < twl$twilight & twl$twilight < end\n}, pam$sta$start, pam$sta$end), arr.ind = TRUE)\ntwl$sta_id <- 0\ntwl$sta_id[tmp[, 1]] <- tmp[, 2]"},{"path":"light-map.html","id":"compute-probability-map","chapter":"2 Light map","heading":"2.4 Compute probability map","text":"first define grid compute probabilities. ease comparison pressure-derived map, load grid size resolution pressure_prob (computed Pressure map)Selecting unlabeled twilights, compute probability observing zenith angle twilight using calibrated error function grid cell.Aggregating probability map twilight per stationary period requires assumptions independence/correlation twilight errors. Read Probability aggregation. , use log-linear pooling weight \\(w=0.1\\),loop stationary period create raster map aggregated probabilities.Finally, can visualize probability map stationary period.","code":"\ng <- as.data.frame(pressure_prob[[1]], xy = TRUE)\ng$layer <- NA\ntwl_clean <- subset(twl, !deleted)\nsun <- solar(twl_clean$twilight)\npgz <- apply(g, 1, function(x) {\n  z <- refracted(zenith(sun, x[1], x[2]))\n  approx(fit_z$x, fit_z$y, z, yleft = 0, yright = 0)$y\n})\nw <- 0.1\nlight_prob <- c()\nfor (i_s in seq_len(nrow(pam$sta))) {\n  id <- twl_clean$sta_id == pam$sta$sta_id[i_s]\n  if (sum(id) > 1) {\n    g$layer <- exp(colSums(w * log(pgz[id, ]))) # Log-linear equation express in log\n  } else if (sum(id) == 1) {\n    g$layer <- pgz[id, ]\n  } else {\n    g$layer <- 1\n  }\n  gr <- rasterFromXYZ(g)\n  crs(gr) <- \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"\n  metadata(gr) <- list(\n    sta_id = pam$sta$sta_id[i_s],\n    nb_sample = sum(id)\n  )\n  light_prob[[i_s]] <- gr\n}\nli_s <- list()\nl <- leaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl()\nfor (i_r in seq_len(length(light_prob))) {\n  i_s <- metadata(light_prob[[i_r]])$sta_id\n  info <- pam$sta[pam$sta$sta_id == i_s, ]\n  info_str <- paste0(i_s, \" | \", info$start, \"->\", info$end)\n  li_s <- append(li_s, info_str)\n  l <- l %>% addRasterImage(light_prob[[i_r]], opacity = 0.8, colors = \"OrRd\", group = info_str)\n}\nm <- l %>%\n  addCircles(lng = lon_calib, lat = lat_calib, color = \"black\", opacity = 1) %>%\n  addLayersControl(\n    overlayGroups = li_s,\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(tail(li_s, length(li_s) - 1))"},{"path":"light-map.html","id":"save-1","chapter":"2 Light map","heading":"2.5 Save","text":"","code":"\nsave(twl,\n  light_prob,\n  z,\n  fit_z,\n  file = \"data/2_light/18LX_light_prob.Rdata\"\n)"},{"path":"static-map.html","id":"static-map","chapter":"3 Static map","heading":"3 Static map","text":"chapter covers important pre-processing steps ensure modelling trajectory graph possible successful. Firstly, aligned maps pressure light create static_prob variable containing information necessary modeling trajectory (incl. flight info).moving quickly, need carefully check pressure, light flight duration data allow coherent trajectory. possible (even probable) manual editing pressure data labelling required, especially short stopovers.","code":""},{"path":"static-map.html","id":"combine-pressure-and-light","chapter":"3 Static map","heading":"3.1 Combine pressure and light","text":"Start loading data computed Light map Pressure map.first need retrieve pressure light data stationary period.running code first time, recommended start keeping long stationary periods (e.g. thr_sta_dur=5\\*24 hours), check passing, can reduce threshold zero.need keep flights consecutive stationary period separate can estimate wind support correctly.compute static probability product light pressure probability maps, add flight duration metadata. static_prob consolidate variable containing information necessary run graph functions.overwrite probability first last stationary periods known location equipment/retrieval sites.Finally, can retrieve pressure altitude likely position combined map pressure light.","code":"\nload(\"data/1_pressure/18LX_pressure_prob.Rdata\")\nload(\"data/2_light/18LX_light_prob.Rdata\")\nthr_sta_dur <- 0 # in hours\nsta_pres <- unlist(lapply(pressure_prob, function(x) raster::metadata(x)$sta_id))\nsta_light <- unlist(lapply(light_prob, function(x) raster::metadata(x)$sta_id))\nsta_thres <- pam$sta$sta_id[difftime(pam$sta$end, pam$sta$start, units = \"hours\") > thr_sta_dur]\n# Get the sta_id present on all three data sources\nsta_id_keep <- intersect(intersect(sta_pres, sta_light), sta_thres)\n# Filter pressure and light map\npressure_prob <- pressure_prob[sta_pres %in% sta_id_keep]\nlight_prob <- light_prob[sta_light %in% sta_id_keep]\nflight <- list()\nfor (i_f in seq_len(length(sta_id_keep) - 1)) {\n  from_sta_id <- sta_id_keep[i_f]\n  to_sta_id <- sta_id_keep[i_f + 1]\n  flight[[i_f]] <- list(\n    start = pam$sta$end[seq(from_sta_id, to_sta_id - 1)],\n    end = pam$sta$start[seq(from_sta_id + 1, to_sta_id)],\n    sta_id = seq(from_sta_id, to_sta_id - 1)\n  )\n}\nflight[[i_f + 1]] <- list()\nstatic_prob <- mapply(function(light, pressure, flight) {\n  # define static prob as the product of light and pressure prob\n  static_prob <- light * pressure\n\n  # replace na by zero\n  # tmp <- values(static_prob)\n  # tmp[is.na(tmp)] <- 0\n  # values(static_prob) <- tmp\n\n  metadata(static_prob) <- metadata(pressure)\n  metadata(static_prob)$flight <- flight\n\n  return(static_prob)\n}, light_prob, pressure_prob, flight)\nlon_calib <- 17.05\nlat_calib <- 48.9\n\nlat <- seq(raster::ymax(static_prob[[1]]), raster::ymin(static_prob[[1]]), length.out = nrow(static_prob[[1]]) + 1)\nlat <- lat[seq_len(length(lat) - 1)] + diff(lat[1:2]) / 2\nlon <- seq(raster::xmin(static_prob[[1]]), raster::xmax(static_prob[[1]]), length.out = ncol(static_prob[[1]]) + 1)\nlon <- lon[seq_len(length(lon) - 1)] + diff(lon[1:2]) / 2\n\nlon_calib_id <- which.min(abs(lon_calib - lon))\nlat_calib_id <- which.min(abs(lat_calib - lat))\n\ntmp <- as.matrix(static_prob[[1]])\ntmp[!is.na(tmp)] <- 0\ntmp[lat_calib_id, lon_calib_id] <- 1\nvalues(static_prob[[1]]) <- tmp\n\ntmp <- as.matrix(static_prob[[length(static_prob)]])\ntmp[!is.na(tmp)] <- 0\ntmp[lat_calib_id, lon_calib_id] <- 1\nvalues(static_prob[[length(static_prob)]]) <- tmp\npath <- geopressure_map2path(static_prob)\nstatic_timeserie <- geopressure_ts_path(path, pam$pressure)"},{"path":"static-map.html","id":"check-track-with-geopressureviz","chapter":"3 Static map","heading":"3.2 Check track with GeoPressureViz","text":"Now combined pressure light, need verify data coherent.Labelling tracks, already checked pressure timeseries measured geolocator consistent least one location map. However, didn’t check whether locations (1) coherent light data, (2) within reach one another, considering flight duration realistic flight speed.carry checks, can use shiny app GeoPressureViz helps visualize overall trajectory bird well step--step move.Learn app dedicated chapter GeoPressureViz.GeoPressureViz, want check probability map coherent flight distance previous/next location ultimately overal trajectory possible/present data. notice inconsistency, go back labellisation step (pressure light) check .suggest starting selecting long stopovers (24-72 hours depending application), help draw general trajectory followed bird, later adding shorter stopovers raise confusion (best match pressure often completely ).Following recommendation Labelling tracks, want non-outlier pressure stationary period match single elevation timeserie (bottom panel). can check map pressure location seem coherent selecting “pressure” probability map display. Usually, ’s pretty obvious issue map., correct issue, go back trainset edit (1) labelling activity split combine stationary periods (2) labelling pressure timeserie exclude certain datapoints match. good match timeserie essential require several iteration.additional notes:distance computed based assumed average groundspeed. Birds can fly groundspeed 120-150 km/h (wind support) although usual average around 40km/h.default position bird GeoPressureViz based likely position static probability map. (usually) correct location.Bird tend flight directly main destination. detour artifact, really need long stationary period good match pressure.regular issue faced small vertical movement bird 2-8 days stopover. Shorter stopover usually easy bird doesn’t move much species different.Wind data yet included might explain longer flight (sometimes 100km/h).","code":"geopressureviz(\n  pam = pam,\n  pressure_prob = pressure_prob,\n  light_prob = light_prob\n  static_prob = static_prob, \n  pressure_timeserie = static_timeserie \n)"},{"path":"static-map.html","id":"final-checks","chapter":"3 Static map","heading":"3.3 Final checks","text":"checks performed creating graph graph_create(), pedagogical reason, thought better introduce step step also help get better sense specific movement/trajectory bird modeling.","code":""},{"path":"static-map.html","id":"check-1","chapter":"3 Static map","heading":"3.3.1 Check 1","text":"first easy check least one location probability greater 1 stationary period.","code":"\nstatic_prob_n <- lapply(static_prob, function(x) {\n  probt <- raster::as.matrix(x)\n  probt[is.na(probt)] <- 0\n  probt / sum(probt, na.rm = T)\n})\ntmp <- unlist(lapply(static_prob_n, sum)) == 0\nif (any(tmp)) {\n  warning(paste0(\n    \"The `static_prob` provided has a probability map equal to \",\n    \"zero for the stationary period: \", which(tmp)\n  ))\n}"},{"path":"static-map.html","id":"check-2","chapter":"3 Static map","heading":"3.3.2 Check 2","text":"Secondly, check always least one possible transition one stationary period next.","code":"\nfor (i_s in seq_len(length(static_prob) - 1)) {\n  cur <- as.matrix(static_prob[[i_s]]) > 0\n  cur[is.na(cur)] <- F\n  nex <- as.matrix(static_prob[[i_s + 1]]) > 0\n  nex[is.na(nex)] <- F\n\n  mtf <- metadata(static_prob[[i_s]])\n  flight_duration <- as.numeric(sum(difftime(mtf$flight$end, mtf$flight$start, unit = \"hours\"))) # hours\n  resolution <- mean(res(static_prob[[1]])) * 111 # assuming 1°= 111km\n  thr_gs <- 150 # Assuming a max groundspeed of 150km/h\n\n  # Check possible position at next stationary period\n  possible_next <- (EBImage::distmap(!cur) * resolution / flight_duration) < thr_gs\n\n  if (sum(possible_next & nex) == 0) {\n    stop(paste(\"There are no possible transition from stationary period\", i_s, \"to\", i_s + 1, \". Check part 1 process (light and pressure)\", sep = \" \"))\n  }\n}"},{"path":"static-map.html","id":"save-2","chapter":"3 Static map","heading":"3.4 Save","text":"","code":"\nsave(\n  static_prob,\n  static_timeserie,\n  file = \"data/3_static/18LX_static_prob.Rdata\"\n)"},{"path":"basic-graph.html","id":"basic-graph","chapter":"4 Basic graph","heading":"4 Basic graph","text":"chapter, see create mathematical graph model trajectory bird.7 use graph compute three main output: (1) shortest path (.e., likely trajectory, (2) probability maps stationary period (3) simulated paths sampled according likelihood.called basic graph integrate windspeed, make assumption groundspeed distribution bird. chapter Wind graph explain can retrieve wind data improve graph model.already pre-processed light pressure data data chapter Static map. Make sure data passing check moving chapterTo improve computational costs creation graph, might helpful first run model downscale resolution (fact > 1) code . didn’t used example.","code":"\nload(\"data/3_static/18LX_static_prob.Rdata\")\nstatic_prob <- lapply(static_prob, function(raster) {\n  raster_ds <- aggregate(raster, fact = 1, fun = max, na.rm = T, expand = T)\n  # keep metadata\n  metadata(raster_ds) <- metadata(raster)\n  return(raster_ds)\n})"},{"path":"basic-graph.html","id":"create-the-graph","chapter":"4 Basic graph","heading":"4.1 Create the graph","text":"create graph function graph_create(), perform following steps:keep nodes locations within 99% percentile static pressure map. (node uniquely identify latitude, longitude stationary period).keep nodes within reach distance nodes based average groundspeed 150km/h. accounts distance possible nodes previous stationary period next stationary period. computed image binary distance function distmap() EBImage package. step allows eliminate multiple impossible nodes without compute possible transition.build graph based filtered nodes containing edges requiring average groundspeed less 150km/h.Finally, trim graph based flow graph constraint, , nodes must connected equipment node retrieval node. Indeed, filtering, nodes might connected single direction (called dead branch). thus ensure node path connects equipment site retrieval site. operation performed Breadth-first search (BFS) algorithm.duration operation strongly variable depending grid (resolution size), number stationary periods level contains static probability.graph returned list edges graph containing:s: source node (index 3d grid lat-lon-sta),t: target node (index 3d grid lat-lon-sta),gs:average ground speed required make transition (km/h) complex number representing E-W real S-N imaginary.ps: static probability target nodesz: size 3d grid lat-lon-staequipment: node(s) first sta (index 3d grid lat-lon-sta)retrieval: node(s) last sta (index 3d grid lat-lon-sta)flight_duration: list flight duration next sta hourslat: list static_prob latitude cell centerlon: list static_prob longitude cell centerextent: raster geographical extent `static_prob``resolution: raster res static_probtemporal_extent: start end date time retrieved metadata \nstatic_prob","code":"\ngrl <- graph_create(static_prob,\n  thr_prob_percentile = .99,\n  thr_gs = 150\n)"},{"path":"basic-graph.html","id":"compute-the-transition-probability","chapter":"4 Basic graph","heading":"4.2 Compute the transition probability","text":"finally need compute probability transition represented edge graph. use simple gamma distribution model probability groundspeed. bird may flight back forth small distance, give apparent groundspeed smaller 20km/h probability 20 km/h.","code":"\nspeed <- seq(1, 120)\nlow_speed_fix <- 20 # minimum speed allowed\nprob <- flight_prob(speed, method = \"gamma\", shape = 7, scale = 7, low_speed_fix = low_speed_fix)\nplot(speed, prob, type = \"l\", xlab = \"Groundspeed [km/h]\", ylab = \"Probability\")\nabline(v = low_speed_fix)\ngrl$p <- grl$ps * flight_prob(grl$gs, method = \"gamma\", shape = 7, scale = 7, low_speed_fix = low_speed_fix)"},{"path":"basic-graph.html","id":"output-1-shortest-path","chapter":"4 Basic graph","heading":"4.3 Output 1: Shortest path","text":"graph theory, shortest path correspond set nodes whose sum edges weights small possible. weighting edges minus log probability, corresponds finding likely trajectory bird. solve problem igraph packageWe retrieve pressure altitude stationary period likely position.","code":"\ng <- graph_from_data_frame(data.frame(\n  from = grl$s,\n  to = grl$t,\n  weight = -log(grl$p)\n))\n# In case there are no retrieval site, we select the position with the highest probability according to the marginal\n# retrieval <- which.max(as.matrix(static_prob_marginal[[length(static_prob_marginal)]])) + grl$sz[1] * grl$sz[2] * (grl$sz[3] - 1)\nsp <- shortest_paths(g, from = paste(grl$equipment), to = paste(grl$retrieval))\n# Convert igraph representation to lat-lon\nshortest_path <- graph_path2lonlat(as.numeric(sp$vpath[[1]]$name), grl)\nsta_duration <- unlist(lapply(static_prob, function(x) {\n  as.numeric(difftime(metadata(x)$temporal_extent[2], metadata(x)$temporal_extent[1], units = \"days\"))\n}))\nleaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl() %>%\n  addPolylines(lng = shortest_path$lon, lat = shortest_path$lat, opacity = 1, color = \"#808080\", weight = 3) %>%\n  addCircles(lng = shortest_path$lon, lat = shortest_path$lat, opacity = 1, color = \"#000\", weight = sta_duration^(0.3) * 10)\nshortest_path_df <- as.data.frame(shortest_path)\nshortest_path_timeserie <- geopressure_ts_path(shortest_path_df, pam$pressure, include_flight = c(0, 1))"},{"path":"basic-graph.html","id":"output-2-marginal-probability-map","chapter":"4 Basic graph","heading":"4.4 Output 2: Marginal probability map","text":"Estimating position bird stationary period generally sought-output tracking studies. Using graph built, can compute exactly (.e., without iterative approach MCMC). problem computing marginal distribution Markov process can solved mathematically.can use GeoPressureViz check result graph_marginal() compares static_prob.","code":"\nstatic_prob_marginal <- graph_marginal(grl)geopressureviz(\n  pam = pam,\n  pressure_prob = pressure_prob,\n  light_prob = light_prob\n  static_prob = static_prob, \n  pressure_timeserie = shortest_path_timeserie,\n  static_prob_marginal = static_prob_marginal\n)\nli_s <- list()\nl <- leaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl()\nfor (i_r in seq_len(length(static_prob_marginal))) {\n  i_s <- metadata(static_prob[[i_r]])$sta_id\n  info <- metadata(static_prob[[i_r]])$temporal_extent\n  info_str <- paste0(i_s, \" | \", info[1], \"->\", info[2])\n  li_s <- append(li_s, info_str)\n  l <- l %>%\n    addRasterImage(static_prob_marginal[[i_r]], colors = \"OrRd\", opacity = 0.8, group = info_str) %>%\n    addCircles(lng = shortest_path$lon[i_s], lat = shortest_path$lat[i_s], opacity = 1, color = \"#000\", weight = 10, group = info_str)\n}\nm <- l %>%\n  addLayersControl(\n    overlayGroups = li_s,\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(tail(li_s, length(li_s) - 1))"},{"path":"basic-graph.html","id":"output-3-simulated-paths","chapter":"4 Basic graph","heading":"4.5 Output 3: Simulated paths","text":"can compute simulation paths. independent without error, don’t need many, although computation request almost .","code":"\nnj <- 10 # Number of simulation\npath_sim <- graph_simulation(grl, nj = nj)\ncol <- rep(RColorBrewer::brewer.pal(9, \"Set1\"), times = ceiling(grl$sz[3] / 9))\nm <- leaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl()\nfor (i in seq_len(nj)) {\n  m <- m %>%\n    addPolylines(lng = path_sim$lon[i, ], lat = path_sim$lat[i, ], opacity = 0.7, weight = 1, color = \"#808080\")\n}\nfor (i in seq_len(grl$sz[3])) {\n  m <- m %>%\n    addCircles(lng = path_sim$lon[, i], lat = path_sim$lat[, i], opacity = .4, weight = 10, color = col[i])\n}\n# m <- m %>% addLegend(position=\"bottomright\", colors = col[1:grl$sz[3]], labels = seq_len(grl$sz[3]), title = \"stationary period\", opacity = 1 )"},{"path":"basic-graph.html","id":"save-3","chapter":"4 Basic graph","heading":"4.6 Save","text":"","code":"\nsave( # grl, we are excluding grl because of its size on this repo. Feel free to keep it in your own project\n  path_sim,\n  shortest_path,\n  static_prob_marginal,\n  shortest_path_timeserie,\n  file = \"data/4_basic_graph/18LX_basic_graph.Rdata\"\n)"},{"path":"wind-graph.html","id":"wind-graph","chapter":"5 Wind graph","heading":"5 Wind graph","text":"final chapter, add wind data graph refine transition probability based assumed airspeed bird rather groundspeed.8First load static probability map.","code":"\nload(\"data/1_pressure/18LX_pressure_prob.Rdata\")\nload(\"data/3_static/18LX_static_prob.Rdata\")"},{"path":"wind-graph.html","id":"download-wind-data","chapter":"5 Wind graph","heading":"5.1 Download wind data","text":"Wind data available high resolution (1hr, 0.25°, 37 pressure level) ERA5 hourly data pressure levels. data easily accessible ecmwfr package.first step setup-CDS access. need create account https://cds.climate.copernicus.eu/ generate API key uid number. can stored .Rprofile commented code.allow retrieve whenever need withAs flight short duration, suggest download file flight, can done automatically graph_download_wind uses wf_request_batch() make requests parallel.can monitor requests https://cds.climate.copernicus.eu/cdsapp#!/yourrequests.case lot tracks need download data don’t want block console, might consider using RStudio background job can easily called jrstudioapi::jobRunScript job package:","code":"\nSys.setenv(cds_key = \"Insert_your_CDS_API_KEY_here\")\nSys.setenv(cds_user = \"Insert_your_CDS_UID_here\")\nusethis::edit_r_environ()\nSys.getenv(\"cds_key\")\nSys.getenv(\"cds_user\")\ngraph_download_wind(pam,\n  area = static_prob, # area accept also c(50, -16, 0, 23)\n)\njob::job({\n  graph_download_wind(pam,\n    area = static_prob,\n  )\n})"},{"path":"wind-graph.html","id":"create-graph","chapter":"5 Wind graph","heading":"5.2 Create graph","text":"first create graph identically basic graph","code":"\ngrl <- graph_create(static_prob, thr_prob_percentile = .99, thr_gs = 150)"},{"path":"wind-graph.html","id":"add-wind-to-graph","chapter":"5 Wind graph","heading":"5.3 Add wind to graph","text":"can compute windspeed experienced bird flew possible transition (.e. edge graph). Based windspeed groundspeed, also compute airspeed. stored complex value real part representing E-W component imaginary part corresponding N-S.","code":"\ngrl <- graph_add_wind(grl,\n  pressure = pam$pressure,\n  filename = \"data/5_wind_graph/18LX/18LX_\",\n  thr_as = 100\n)"},{"path":"wind-graph.html","id":"compute-the-transition-probability-1","chapter":"5 Wind graph","heading":"5.4 Compute the transition probability","text":"Now computed airspeed required performing transition edge, can improve computation probability modeling probability airspeed rather groundspeed.first search morphological information Great Reed Warbler using AVONET database. can also overwrite value know . See flight_bird() details.Using bird created, can convert airspeed probability using power method function flight_prob(). See Basic graph information flight_prob().\nexample, can plot probability airspeed ranging 0 80 km/h.can compute probability transition graph.","code":"\nbird <- flight_bird(\"Acrocephalus arundinaceus\")\nbird## $species_name\n## [1] \"Acrocephalus arundinaceus\"\n## \n## $mass\n## [1] 0.03\n## \n## $body_frontal_area\n## [1] 0.001498105\n## \n## $wing_span\n## [1] 0.242256\n## \n## $wing_aspect\n## [1] 7.114714\nspeed <- seq(0, 80)\nprob <- flight_prob(speed,\n  method = \"power\",\n  bird = bird,\n  low_speed_fix = 10,\n  fun_power = function(power) {\n    (1 / power)^3\n  }\n)\nplot(speed, prob, type = \"l\", xlab = \"Airspeed [km/h]\", ylab = \"Probability\")\ngrl$p <- grl$ps * flight_prob(grl$as, method = \"power\", bird = bird, low_speed_fix = 10)"},{"path":"wind-graph.html","id":"output-1-shortest-path-1","chapter":"5 Wind graph","heading":"5.5 Output 1: Shortest path","text":"Basic graphWe can visualize shortest path windpseed direction (arrow) magnitude (color) experienced particular flight","code":"\ng <- graph_from_data_frame(data.frame(\n  from = grl$s,\n  to = grl$t,\n  weight = -log(grl$p)\n))\nsp <- shortest_paths(g, from = paste(grl$equipment), to = paste(grl$retrieval))\n\n# Convert igraph representation to lat-lon\ngrl$shortest_path <- graph_path2lonlat(as.numeric(sp$vpath[[1]]$name), grl)\nfun_marker_color <- function(norm) {\n  if (norm < 20) {\n    \"darkpurple\"\n  } else if (norm < 35) {\n    \"darkblue\"\n  } else if (norm < 50) {\n    \"lightblue\"\n  } else if (norm < 60) {\n    \"lightgreen\"\n  } else if (norm < 80) {\n    \"yellow\"\n  } else if (norm < 100) {\n    \"lightred\"\n  } else {\n    \"darkred\"\n  }\n}\nfun_NSEW <- function(angle) {\n  angle <- angle %% (pi * 2)\n  angle <- angle * 180 / pi\n  if (angle < 45 / 2) {\n    \"E\"\n  } else if (angle < 45 * 3 / 2) {\n    \"NE\"\n  } else if (angle < 45 * 5 / 2) {\n    \"N\"\n  } else if (angle < 45 * 7 / 2) {\n    \"NW\"\n  } else if (angle < 45 * 9 / 2) {\n    \"W\"\n  } else if (angle < 45 * 11 / 2) {\n    \"SW\"\n  } else if (angle < 45 * 13 / 2) {\n    \"S\"\n  } else if (angle < 45 * 15 / 2) {\n    \"SE\"\n  } else {\n    \"E\"\n  }\n}\n\nsta_duration <- unlist(lapply(static_prob, function(x) {\n  as.numeric(difftime(metadata(x)$temporal_extent[2], metadata(x)$temporal_extent[1], units = \"days\"))\n}))\n\nm <- leaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl() %>%\n  addPolylines(lng = grl$shortest_path$lon, lat = grl$shortest_path$lat, opacity = 1, color = \"#808080\", weight = 3) %>%\n  addCircles(lng = grl$shortest_path$lon, lat = grl$shortest_path$lat, opacity = 1, color = \"#000\", weight = sta_duration^(0.3) * 10)\n\nfor (i_s in seq_len(grl$sz[3] - 1)) {\n  if (grl$flight_duration[i_s] > 5) {\n    edge <- which(grl$s == grl$shortest_path$id[i_s] & grl$t == grl$shortest_path$id[i_s + 1])\n\n    label <- paste0(\n      i_s, \": \", grl$flight[[i_s]]$start, \" - \", grl$flight[[i_s]]$end, \"<br>\",\n      \"F. dur.: \", round(grl$flight_duration[i_s]), \" h <br>\",\n      \"GS: \", round(abs(grl$gs[edge])), \" km/h, \", fun_NSEW(Arg(grl$gs[edge])), \"<br>\",\n      \"WS: \", round(abs(grl$ws[edge])), \" km/h, \", fun_NSEW(Arg(grl$ws[edge])), \"<br>\",\n      \"AS: \", round(abs(grl$as[edge])), \" km/h, \", fun_NSEW(Arg(grl$as[edge])), \"<br>\"\n    )\n\n    iconArrow <- makeAwesomeIcon(\n      icon = \"arrow-up\",\n      library = \"fa\",\n      iconColor = \"#FFF\",\n      iconRotate = (90 - Arg(grl$ws[edge]) / pi * 180) %% 360,\n      squareMarker = TRUE,\n      markerColor = fun_marker_color(abs(grl$ws[edge]))\n    )\n\n    m <- m %>% addAwesomeMarkers(\n      lng = (grl$shortest_path$lon[i_s] + grl$shortest_path$lon[i_s + 1]) / 2,\n      lat = (grl$shortest_path$lat[i_s] + grl$shortest_path$lat[i_s + 1]) / 2,\n      icon = iconArrow, popup = label\n    )\n  }\n}"},{"path":"wind-graph.html","id":"output-2-marginal-probability-map-1","chapter":"5 Wind graph","heading":"5.6 Output 2: Marginal probability map","text":"Basic graph","code":"\ngrl_marginal <- graph_marginal(grl)\nli_s <- list()\nl <- leaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl()\nfor (i_r in seq_len(length(grl_marginal))) {\n  i_s <- metadata(static_prob[[i_r]])$sta_id\n  info <- metadata(static_prob[[i_r]])$temporal_extent\n  info_str <- paste0(i_s, \" | \", info[1], \"->\", info[2])\n  li_s <- append(li_s, info_str)\n  l <- l %>%\n    addRasterImage(grl_marginal[[i_r]], colors = \"OrRd\", opacity = 0.8, group = info_str) %>%\n    addCircles(lng = grl$shortest_path$lon[i_s], lat = grl$shortest_path$lat[i_s], opacity = 1, color = \"#000\", weight = 10, group = info_str)\n}\nm <- l %>%\n  addPolylines(lng = grl$shortest_path$lon, lat = grl$shortest_path$lat, opacity = .5, color = \"#808080\", weight = 0.5) %>%\n  addCircles(lng = grl$shortest_path$lon, lat = grl$shortest_path$lat, opacity = .5, color = \"#000\", weight = sta_duration^(0.3) * 10) %>%\n  addLayersControl(\n    overlayGroups = li_s,\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(tail(li_s, length(li_s) - 1))"},{"path":"wind-graph.html","id":"output-3-simulated-paths-1","chapter":"5 Wind graph","heading":"5.7 Output 3: Simulated paths","text":"Basic graph.","code":"\nnj <- 100 # Number of simulation\npath_sim <- graph_simulation(grl, nj = nj)"},{"path":"wind-graph.html","id":"run-geopressureviz","chapter":"5 Wind graph","heading":"5.8 Run GeoPressureViz","text":"can also visualize shortest path marginal map GeoPressureViz. First, need query pressure timeserie shortest path location.","code":"\nshortest_path <- as.data.frame(grl$shortest_path)\nshortest_path_timeserie <- geopressure_ts_path(shortest_path, pam$pressure)\ngeopressureviz(\n  pam = pam,\n  pressure_prob = pressure_prob,\n  light_prob = light_prob,\n  static_prob = static_prob,\n  pressure_timeserie = shortest_path_timeserie,\n  static_prob_marginal = grl_marginal\n)"},{"path":"wind-graph.html","id":"compute-flight-energy","chapter":"5 Wind graph","heading":"5.9 Compute flight energy","text":"can compute energy [Joules] expense flight birdAnd compare histogram ground, wind, airspeed, flight duration energy simulation.","code":"\nedge <- t(graph_path2edge(path_sim$id, grl))\n\n# Convert airpseed from km/hr to m/s and use the bird constructure earlier to compute the mechanical power [W=J/s]\np_mech <- flight_power(abs(grl$as[edge]) * 1000 / 60 / 60, bird = bird)\n\n# Convert the power into energy [J]\nenergy <- p_mech * rep(head(grl$flight_duration, -1) * 60 * 60, nj)\ndim(energy) <- dim(edge)\nenergy_df <- data.frame(\n  energy = as.vector(energy),\n  as = abs(grl$as[edge]),\n  gs = abs(grl$gs[edge]),\n  ws = abs(grl$ws[edge]),\n  sta_id_s = rep(head(grl$sta_id, -1), nj),\n  sta_id_t = rep(tail(grl$sta_id, -1), nj),\n  flight_duration = rep(head(grl$flight_duration, -1), nj)\n)\nenergy_df$name <- paste(energy_df$sta_id_s, energy_df$sta_id_t, sep = \"-\")\n\nplot1 <- ggplot(energy_df, aes(reorder(name, sta_id_s), gs)) +\n  theme_bw() +\n  geom_boxplot()\nplot2 <- ggplot(energy_df, aes(reorder(name, sta_id_s), ws)) +\n  theme_bw() +\n  geom_boxplot()\nplot3 <- ggplot(energy_df, aes(reorder(name, sta_id_s), as)) +\n  theme_bw() +\n  geom_boxplot()\nplot4 <- ggplot(energy_df, aes(reorder(name, sta_id_s), flight_duration)) +\n  theme_bw() +\n  geom_point()\nplot5 <- ggplot(energy_df, aes(reorder(name, sta_id_s), energy)) +\n  theme_bw() +\n  geom_boxplot()\n# grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow=5)\n\nsubplot(ggplotly(plot1), ggplotly(plot2), ggplotly(plot3), ggplotly(plot4), ggplotly(plot5), nrows = 5, titleY = TRUE)"},{"path":"wind-graph.html","id":"save-4","chapter":"5 Wind graph","heading":"5.10 Save","text":"","code":"\nsave(\n  path_sim,\n  shortest_path,\n  static_prob_marginal,\n  shortest_path_timeserie,\n  file = \"data/5_wind_graph/18LX_wind_graph.Rdata\"\n)"},{"path":"export-and-visual.html","id":"export-and-visual","chapter":"6 Export and Visual","heading":"6 Export and Visual","text":"extra chapter see create additional figure export data","code":""},{"path":"export-and-visual.html","id":"geopressuretemplate","chapter":"6 Export and Visual","heading":"6.1 GeoPressureTemplate","text":"Basic TrajectoryWind TrajectoryBasic Trajectory","code":""},{"path":"export-and-visual.html","id":"movevis","chapter":"6 Export and Visual","heading":"6.2 MoveVis","text":"Let’s try create amazing visual trajectory MoveVisWe’ll need pam structure know time path (lat, lon) can come previously computed ones (simulations, shortes path, etc). ’ll use shortest path wind graph resultBecause path encode position entire stationary period, need produce data.frame position start end stationary period (.e., thebird moved ). can function.worth checking frame looks like generating entire gif (taking around 10 min) frames[[100]]. ’re satisfy, , go !map! Check moveVis examples idea","code":"\nload(\"data/1_pressure/18LX_pressure_prob.Rdata\")\nload(\"data/5_wind_graph/18LX_wind_graph.Rdata\")\npath <- shortest_path\ndf <- path2df(pam, path)\nframes <- df2move(df, CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84\"),\n             x = \"lon\", y = \"lat\", time = \"time\", track_id = \"track_id\") %>% \n  align_move(res = 24, unit = \"hours\", digit = 12) %>%  # Use midday position rather than midnight (while the bird could be flying)\n  subset_move(from = pam$sta$end[1]-3*60*60*24, to = tail(pam$sta$start, 1)+0*60*60*24) %>% # remove the long equipement and retrival period duration\n  frames_spatial(equidistant = T, \n                 ext = extent(static_prob[[1]])) %>% # \n  add_labels(x = NULL, y = NULL) %>% # add some customizations, such as axis labels\n  add_timestamps(type = \"label\", size = 6) %>%\n  add_progress()## Checking temporal alignment...\n## Processing movement data...\n## Approximated animation duration: ≈ 10.88s at 25 fps for 272 frames\n## Retrieving and compositing basemap imagery...\n## Assigning raster maps to frames...\n## Creating frames...\nanimate_frames(frames, out_file = paste0(\"assets/movevis_18LX.gif\"), height = 1000, width = 1000, overwrite = T)"},{"path":"labelling-tracks.html","id":"labelling-tracks","chapter":"A Labelling tracks","heading":"A Labelling tracks","text":"vignette, explore label track files (activity pressure) provide tips make exercise efficient. see exercise fits overall process, see vignette use GeoPressureR.","code":"\nload(\"data/1_pressure/18LX_pressure_prob.Rdata\")"},{"path":"labelling-tracks.html","id":"labelling-principles","chapter":"A Labelling tracks","heading":"A.1 Labelling principles","text":"Labelling (manually) tracks imperative geopressure requires highly precise well-defined pressure timeseries fixed/constant location horizontal (geographical: +/- 10-50km) vertical (altitude: +/- 2m).procedure involves labelling (1) activity data bird migrating (2) identifying pressure datapoints discarded matching exercise.Activity labelling defines stationary periods flight duration. stationary periods defined period bird considered static relative size grid (~10-50km). start end stationary period used define pressure timeseries matched. Since flight duration key input movement model, accurate flight duration critical correctly estimate distance traveled bird two stationary periods.Activity labelling defines stationary periods flight duration. stationary periods defined period bird considered static relative size grid (~10-50km). start end stationary period used define pressure timeseries matched. Since flight duration key input movement model, accurate flight duration critical correctly estimate distance traveled bird two stationary periods.Pressure labelling allows eliminate vertical (altitudinal) movement bird. pressure timeseries matching algorithm sensitive pressure variation hPa, even altitudinal movement couple meters can throw estimation map short stationary period. Since reanalysis data matched provided single pressure level, must discard data points geolocator pressure data corresponding different elevation.Pressure labelling allows eliminate vertical (altitudinal) movement bird. pressure timeseries matching algorithm sensitive pressure variation hPa, even altitudinal movement couple meters can throw estimation map short stationary period. Since reanalysis data matched provided single pressure level, must discard data points geolocator pressure data corresponding different elevation.species’ migration behaviour specific manual editing remains fastest option. Indeed, small movement corresponding small change pressure high activity can correspond local movement (birds essentially stays location) slow migration. Expertise bird expected migration style essential correctly label tracks.Manual editing also provides sense bird . learn bird moving (e.g. long continuous high altitude flight, short flights multiple days, alternation short migration flights stopovers, etc.). also provides sense uncertainty classification, useful understand interpret results.said, still worth starting manual editing automatically labeled timeseries. pam_classify() defines migratory flight activity high long period. Refer possible classification methods PAMLr manual.Finally, labelling iterative process need check validity pressure timeseries stationary period reanalysis data (later). can expect spend 30sec (e.g. Mangrove Kingfisher) 10min (e.g. Eurasian Nightjar) per track depending species’ migrating complexity.","code":"\npam <- pam_classify(pam, min_duration = 30)\ntrainset_write(pam, pathname = system.file(\"extdata\", package = \"GeoPressureR\"), filename = \"18LX_act_pres-labeled-v1.csv\")"},{"path":"labelling-tracks.html","id":"introduction-to-trainset","chapter":"A Labelling tracks","heading":"A.2 Introduction to TRAINSET","text":"suggesting use TRAINSET, web based graphical tool labelling time series. can read TRAINSET www.trainset.geocene.com Github repository.tool interface quite intuitive. Start uploading .csv file (e.g., 18IC_act_pres.csv).Initial view TRAINSET uploading fileA tips:Keyboard shortcuts can considerably speed navigation (zoom /, move left/right) labelling (add/remove label), specifically SHIFT.large number datapoints, keeping narrow temporal window avoid browser becoming slow irresponsive.Change Active Seties Reference Series depending labelling use timeseries time figure bird might .Adapt y-axis range stationary period properly see small (essential) pressure variations visible full viewTRAINSET offers flexibility label required: can add remove label values (bottom-right page). order trainset_read() work, change/edit/add label, simply use ones offered : TRUE FALSE.","code":""},{"path":"labelling-tracks.html","id":"four-tests-to-check-labelling","chapter":"A Labelling tracks","heading":"A.3 Four tests to check labelling","text":"improve evaluate quality labelling, can use four tests.","code":""},{"path":"labelling-tracks.html","id":"test-1-duration-of-stationary-periods-and-flights","chapter":"A Labelling tracks","heading":"A.3.1 Test 1: Duration of stationary periods and flights","text":"first test consists checking duration flights stationary periods.Depending specific species, may want check activity labelling short flight (<1-2hr) well activity labelling short stationary periods (<1-10 hours). Note last row next_flight_duration 0 last stationary period. Repeat test satisfy result.","code":"\npam <- trainset_read(pam, pathname = \"data/1_pressure/labels/\", filename = \"18LX_act_pres-labeled-v1.csv\")\npam <- pam_sta(pam)\npam$sta$duration <- difftime(pam$sta$end, pam$sta$start, units = \"days\")\npam$sta$next_flight_duration <- c(difftime(tail(pam$sta$start, length(pam$sta$start) - 1),\n  head(pam$sta$end, length(pam$sta$end) - 1),\n  units = \"hours\"\n), 0)\nknitr::kable(subset(pam$sta, duration < 0.25 | next_flight_duration < 1))"},{"path":"labelling-tracks.html","id":"test-2-pressure-timeseries","chapter":"A Labelling tracks","heading":"A.3.2 Test 2: Pressure timeseries","text":"second check, visually inspect pressure timeseries stationary period (1) correctly groups (2) includes pressure outlier (altitudinal movement).Ploting figure Plotly allows zoom-pan check timeseries correctly grouped. Make sure stationary period include pressure measurement flight (e.g. 1-Sep-2017 figure ). might spot anomalies temporal variation pressure. cases, can already label pressure timeseries remove .","code":"\npam <- trainset_read(pam, pathname = \"data/1_pressure/labels/\", filename = \"18LX_act_pres-labeled-v2.csv\")\npam <- pam_sta(pam)\n\n# Set colorscale\ncol <- rep(RColorBrewer::brewer.pal(9, \"Set1\"), times = ceiling((nrow(pam$sta) + 1) / 9))\ncol <- col[1:(nrow(pam$sta) + 1)]\nnames(col) <- levels(factor(c(0, pam$sta$sta_id)))\n\npressure_na <- pam$pressure\npressure_na$obs[pressure_na$isoutlier | pressure_na$sta_id == 0] <- NA\np <- ggplot() +\n  geom_line(data = pam$pressure, aes(x = date, y = obs), col = \"grey\") +\n  geom_line(data = pressure_na, aes(x = date, y = obs, col = factor(sta_id))) +\n  geom_point(data = subset(pam$pressure, isoutlier), aes(x = date, y = obs), colour = \"black\") +\n  theme_bw() +\n  scale_colour_manual(values = col) +\n  scale_y_continuous(name = \"Pressure (hPa)\")\n\nggplotly(p, dynamicTicks = T) %>% layout(showlegend = F)"},{"path":"labelling-tracks.html","id":"test-3-pressure-timeseries-match","chapter":"A Labelling tracks","heading":"A.3.3 Test 3: Pressure timeseries match","text":"far, checked pressure timeseries correctly labeled respective stationary periods look relatively smooth. stage, timeseries good enough matched reanalysis data. third test consists comparing pressure timeseries geolocator ERA5 location best match. allows distinguish bird movements natural variations pressure. difficult step, multiple iterations necessary achieve best results.Note location best match can wrong short stationary periods. point exercise identify vertical movement bird thus location doesn’t really matter.can estimate probability map stationary period following code. cover fours functions details vignette Pressure Map. stationary period, locate best match query pressure timeseries geopressure_ts() location.can now look similar figure pressure timeseries, time comparing geolocator data best match reanalysis data.can use figure identify periods mismatch geolocator ERA5, usually indicative altitudinal movement bird. Depending situation, multiple way labelling mismatch. easier case, bird simply flew within stationary site (<10-50km) short time came back location. case, can simply label pressure timeserie temporary change altitude. bird changed altitude never came back elevation, different way solving . can either considered new altitude new stationary period label activity data. Otherwise, can label pressure timeserie shorter period. essential resulting pressure timeserie matches ERA5 pressure everywhere. Matches usually better longer periods. Looking activity data period can also help understand bird .example, removing pressure datapoints can improve match, especially short stopover (e.g. 2017-9-11). See final labeled file.","code":"\npam <- trainset_read(pam, pathname = \"data/1_pressure/labels/\", filename = \"18LX_act_pres-labeled-v3.csv\")\npam <- pam_sta(pam)\n\nsta_id_keep <- pam$sta$sta_id[difftime(pam$sta$end, pam$sta$start, units = \"hours\") > 12]\npam$pressure$sta_id[!(pam$pressure$sta_id %in% sta_id_keep)] <- NA\nmessage(\"Number of stationary period to query: \", length(sta_id_keep))## Number of stationary period to query: 27\npressure_maps <- geopressure_map(pam$pressure, extent = c(50, -16, 0, 23), scale = 10, max_sample = 100)\npressure_prob <- geopressure_prob_map(pressure_maps)\npath <- geopressure_map2path(pressure_prob)\npressure_timeserie <- geopressure_ts_path(path, pam$pressure)\np <- ggplot() +\n  geom_line(data = pam$pressure, aes(x = date, y = obs), colour = \"grey\") +\n  geom_point(data = subset(pam$pressure, isoutlier), aes(x = date, y = obs), colour = \"black\") +\n  geom_line(data = subset(do.call(\"rbind\", pressure_timeserie), sta_id != 0), aes(x = date, y = pressure0, col = factor(sta_id))) +\n  theme_bw() +\n  scale_colour_manual(values = col) +\n  scale_y_continuous(name = \"Pressure (hPa)\")\n\nggplotly(p, dynamicTicks = T) %>% layout(showlegend = F)\npam <- trainset_read(pam, pathname = \"data/1_pressure/labels/\", filename = \"18LX_act_pres-labeled.csv\")\npam <- pam_sta(pam)\n\np <- ggplot() +\n  geom_line(data = pam$pressure, aes(x = date, y = obs), colour = \"grey\") +\n  geom_point(data = subset(pam$pressure, isoutlier), aes(x = date, y = obs), colour = \"black\") +\n  geom_line(data = subset(do.call(\"rbind\", pressure_timeserie), sta_id != 0), aes(x = date, y = pressure0, col = factor(sta_id))) +\n  theme_bw() +\n  theme_bw() +\n  scale_colour_manual(values = col) +\n  scale_y_continuous(name = \"Pressure (hPa)\")\n\nggplotly(p, dynamicTicks = T) %>% layout(showlegend = F)"},{"path":"labelling-tracks.html","id":"test-4-histogram-of-pressure-error","chapter":"A Labelling tracks","heading":"A.3.4 Test 4: Histogram of pressure error","text":"Finally, can also look histogram pressure error (geolocator-ERA5).\nlong stationary periods (5 days), want check single mode distribution. Two modes indicate bird spending time two different altitudes. usual birds day site night roost different elevations.\nmight also want check spread distribution. value can guide setting standard deviation parameter s geopressure_prob_map().","code":"\npar(mfrow = c(5, 6), mar = c(1, 1, 3, 1))\nfor (i_r in seq_along(pressure_timeserie)) {\n  if (!is.null(pressure_timeserie[[i_r]])) {\n    i_s <- unique(pressure_timeserie[[i_r]]$sta_id)\n    df3 <- merge(pressure_timeserie[[i_r]], subset(pam$pressure, !isoutlier & sta_id == i_s), by = c(\"date\",\"obs\",\"isoutlier\",\"sta_id\"))\n    df3$error <- df3$pressure0 - df3$obs\n    hist(df3$error, main = i_s, xlab = \"\", ylab = \"\")\n    abline(v = 0, col = \"red\")\n  }\n}"},{"path":"labelling-tracks.html","id":"common-challenges-and-tips-to-address-them","chapter":"A Labelling tracks","heading":"A.4 Common challenges and tips to address them","text":"following section, use examples illustrate common challenges may encountered manual editing, offer suggestions address .","code":""},{"path":"labelling-tracks.html","id":"outliers-during-flights-due-to-low-bird-activity","chapter":"A Labelling tracks","heading":"A.4.1 Outliers during flights due to low bird activity","text":"flight, single activity measurements can display low activity due e.g. short gliding flights flapping. automatic labelling activity KNN classifier may mislabel points stationary periods, illustrated example night 31st August. single mislabeled point can incorrectly split flight multiple short flights. error highlighted Test #1 described . However, birds may also display lower activity beginning end flight, often miss-classified, illustrated three nights example picked Test #1.However, low activity happens well bird reaches ground, illustrated example , low pressure measurement flight included stationary period. error can sometimes pick-Test #2. Yet worth checking flights activity assess case--case basis whether datapoints included flight .","code":""},{"path":"labelling-tracks.html","id":"importance-of-zooming-in-before-editing-outliers","chapter":"A Labelling tracks","heading":"A.4.2 Importance of zooming in before editing outliers","text":"Anomalies pressure timeseries might obvious first sight.Zooming narrower pressure range helps understand happening. example, Tawny Pipit breeding near mine site rough topography. breeding, looks like staying relatively constant elevation, sudden drop pressure towards end indicates bird changed altitude.cases, aim discard pressure datapoints recorded bird different altitude. may always obvious distinguish temporal variation pressure bird actually changes altitude. suggest keeping datapoints confident (, first part timeseries ) running Test #3.long timeseries one, Test #3 easily pick right location timeseries want match. can simply de-select datapoints end timeseries fit ERA5 green line. shorter timeseries, might need several iterations pick correct match.","code":""},{"path":"labelling-tracks.html","id":"short-stationary-halts-between-flights","chapter":"A Labelling tracks","heading":"A.4.3 Short stationary halts between flights","text":"Interpreting bird behaviour defining stationary periods can difficult, example birds extend migration day lower intensity, end flight clear.cases, bird stops couple hours seems active . low-intensity migratory movement, short break followed migratory flight, landing stopover location, relocating early morning light.question whether label halts stationary periods .Referring pressure timeseries can help assess whether bird changes location. example, low activity followed high activity accompanied pressure change, can consider bird changed location, label low activity stationary period.However, bird may also land complete local flights within stopover location (little pressure variation), case want avoid creating two different stationary periods.Test #3 helps ensure local vertical movements took place.","code":""},{"path":"labelling-tracks.html","id":"mountainous-species","chapter":"A Labelling tracks","heading":"A.4.4 Mountainous species","text":"Mountainous species display specific behaviour regular altitudinal changes.clear Ring Ouzel’s timeseries, displays daily occurring movements, though regular enough make process automatic, sometimes changing altitude. scale, difficult assess temporal variation pressure, 790hPa 900hPa pressure level might work, difficult know points discard.Eurasian Hoopoe presents challenge moves continuously throughout day, showing sinosoidal pattern.\nSeveral iterations lead relatively smooth pressure timeseries. Note order estimate uncertainty correctly cases, standard deviation s increased. Thankfully, behaviour restricted breeding ground.cases, finding single timeseries impossible, wintering site Ring Ouzel, never returning elevation. cases, discard entire timeseries use mask absolute pressure values.Luckily, definition mountainous species live specific areas, restricts possible locations. case, based previous stationary periods can establish bird Morocco, low pressure (.e. high elevation), Atlas mountains fit pressure mask.","code":""},{"path":"labelling-tracks.html","id":"examples","chapter":"A Labelling tracks","heading":"A.5 Examples","text":"View full screen","code":""},{"path":"geopressureviz.html","id":"geopressureviz","chapter":"B GeoPressureViz","heading":"B GeoPressureViz","text":"GeoPressureR includes Shiny app called GeoPressureViz helps visualize overall trajectory bird well step--step move. Note visualization tool , change/modify anything data. main goal check issue labeling pressure secondary goal give intuitive sense bird moving. can useful platform discuss bird trajectory collaborators.Screenshot GeoPressureViz demo showing estimated position one stationary period Great Reed Warbler 18LX, based (1) pressure light match (map colorscale timeserie) (2) potential flight distances previous next stationary period (circles).","code":""},{"path":"geopressureviz.html","id":"navigate-geopressureviz","chapter":"B GeoPressureViz","heading":"B.1 Navigate GeoPressureViz","text":"Open demo 18LXOpen demo 18LXThe viewer three panels:\nmaps showing trajectory bird. size circles indicates duration stopover (hover get info).\nbottom panel showing pressure timeserie. grey line raw day (pam$pressure), black dots pressure labeled outlier, colored lines normalized pressure best match (.e., static_timeserie$pressure0) color match map dots.\nside panel provides key information helps navigates app\nviewer three panels:maps showing trajectory bird. size circles indicates duration stopover (hover get info).maps showing trajectory bird. size circles indicates duration stopover (hover get info).bottom panel showing pressure timeserie. grey line raw day (pam$pressure), black dots pressure labeled outlier, colored lines normalized pressure best match (.e., static_timeserie$pressure0) color match map dots.bottom panel showing pressure timeserie. grey line raw day (pam$pressure), black dots pressure labeled outlier, colored lines normalized pressure best match (.e., static_timeserie$pressure0) color match map dots.side panel provides key information helps navigates appThe side panel provides key information helps navigates appA central parameter play carefully “Minimum duration”. filter entire dataset replot map figure select stopover duration higher. Try changing value wait bit figure update. shorter stationary period less certain, position often wrong. ’s ok now.central parameter play carefully “Minimum duration”. filter entire dataset replot map figure select stopover duration higher. Try changing value wait bit figure update. shorter stationary period less certain, position often wrong. ’s ok now.Toggle “Full Track” button move stationary period view. side panel change provides options.Toggle “Full Track” button move stationary period view. side panel change provides options.Change stationary period drop previous/next button. Except first sta., three dots, two lines two circle appears map, pressure timeserie update zoom exactly stationary period. color timeserie informs dots map current stationary period, two others begin previous next one.Change stationary period drop previous/next button. Except first sta., three dots, two lines two circle appears map, pressure timeserie update zoom exactly stationary period. color timeserie informs dots map current stationary period, two others begin previous next one.circles indicates distance previous last stationary period location based speed slider side panel (default 40km/h). can edit speed see impact distances.circles indicates distance previous last stationary period location based speed slider side panel (default 40km/h). can edit speed see impact distances.can choose display probability map pressure (pressure_prob) , light (light_prob) combined (static_prob).can choose display probability map pressure (pressure_prob) , light (light_prob) combined (static_prob).location likely path can completely (hence need trajectory model), might helpful change temporarily location check coherence distance next/previous stationary period. Use button “Start Editing” . Every time click map, update position. ’re happy position, can click button disable editing mode.location likely path can completely (hence need trajectory model), might helpful change temporarily location check coherence distance next/previous stationary period. Use button “Start Editing” . Every time click map, update position. ’re happy position, can click button disable editing mode.Finally, can also check pressure timeserie new position ’ve edited button “Query pressure”. runs geopressure_ts() background, slow (especially long stationary period). feature quite unstable, use carefully, aware might restart app crashes (submit issue reproducible example).Finally, can also check pressure timeserie new position ’ve edited button “Query pressure”. runs geopressure_ts() background, slow (especially long stationary period). feature quite unstable, use carefully, aware might restart app crashes (submit issue reproducible example).","code":""},{"path":"geopressureviz.html","id":"run-geopressureviz-1","chapter":"B GeoPressureViz","heading":"B.2 Run GeoPressureViz","text":"run visualization, use geopressureviz() function. minimum information needed pam static_prob, see difference light pressure, can also add light_prob pressure_prob. see match pressure timeserie bottom panel, add pressure_timeserie. visualization display stationary period present static_prob.Note close app browser, return path interactively created data.frame.","code":"\npath_modified <- geopressureviz(\n  pam = pam, # required\n  pressure_prob = pressure_prob, # optional\n  light_prob = light_prob, # optional\n  static_prob = static_prob, # required. You can use pressure_prob here.\n  static_prob_marginal = grl_marginal, # optional\n  pressure_timeserie = static_timeserie # optional. Could be either: pressure_timeserie, static_timeserie, shortest_path_timeserie\n)"},{"path":"probability-aggregation.html","id":"probability-aggregation","chapter":"C Probability aggregation","heading":"C Probability aggregation","text":"core GeoPressure, try estimate position bird based pressure mismatch geolocator weather reanalysis dataset (ERA5). major challenge process transformation map errors (mismatch) probability.vignette, explore challenge, look theory behind explore possible solution using Great Reed Warbler (18IC) example.","code":""},{"path":"probability-aggregation.html","id":"problem-presentation","chapter":"C Probability aggregation","heading":"C.1 Problem presentation","text":"stationary period, estimate probability position \\(\\textbf{x}\\) bird based pressure timeseries measured geolocator \\(P_{gl}[t] \\quad \\forall t \\[1,\\ldots,n]\\), Bayesian framework can written ,\n\\[p(\\textbf{x}\\mid P_{gl}[1],\\ldots,P_{gl}[n]) \\propto p(P_{gl}[1],\\ldots,P_{gl}[n] \\mid \\textbf{x}) p(\\textbf{x}).\\]interested determining likelihood term \\(p(P_{gl} \\mid \\textbf{x})\\) represents probability observing timeseries \\(P_{gl}\\) knowing bird location \\(\\textbf{x}\\). quantify probability, look mismatch \\(P_{gl}\\) pressure timeseries ERA5 database \\(P_{ERA5}(\\textbf{x})\\) extracted location \\(\\textbf{x}\\). can reformulate likelihood probability function \\(f\\) error term \\(\\varepsilon(\\textbf{x})\\) measures distance \\(P_{gl}\\) \\(P_{ERA5}(\\textbf{x})\\)\n\\[p(P_{gl} \\mid \\textbf{x}) = f(\\varepsilon[1],\\ldots,\\varepsilon[n])\\]formulation problem helps us split problem two: first defining error term \\(\\varepsilon[t]\\) secondly defining likelihood function \\(f\\).","code":""},{"path":"probability-aggregation.html","id":"error-term","chapter":"C Probability aggregation","heading":"C.1.1 Error term","text":"cases, expect measure error term simple difference \\(P_{ERA5}(\\textbf{x})[t]-P_{gl}[t].\\) However, within ERA5 grid cell 9-30km, can expect wide range altitude bird can located. offset two timeseries might due nothing difference altitude.solve issue, remove mean pressure difference, essentially ignoring absolute value pressure (altitude) error term quantify mismatch temporal variation,\n\\[\\varepsilon[t] = \\left( P_{ERA5}(\\textbf{x})[t]-P_{gl}[t]\\right) - \\left( \\frac{1}{n}\\sum_{=1}^{n} P_{ERA5}(\\textbf{x})[]-P_{gl}[] \\right) .\\]way building error term important consequences. timeseries one datapoint always yield zero error locations, resulting equally probable map. number datapoints increases, error term become able distinguish “good” “bad” locations.","code":""},{"path":"probability-aggregation.html","id":"error-term-for-the-great-reed-warbler","chapter":"C Probability aggregation","heading":"C.1.2 Error term for the Great Reed Warbler","text":"Let’s load data data filterWe using GeoPressure API geopressure_map() function measure mismatch pressure series. API can realistically return single map per stationary period, aggregates error timeseries Mean Squared Error (MSE),\n\\[\\mathit{MSE} = \\frac{1}{n}\\sum_{t=1}^{n} \\varepsilon[t]^2.\\]can post-process data get back basic metadata, number datapoints stationay period used. also compute position minimum MSE","code":"\nload(\"data/1_pressure/18LX_pressure_prob.Rdata\")\nsta_id_keep <- pam$sta$sta_id[difftime(pam$sta$end, pam$sta$start, units = \"hours\") > 12]\npam$pressure$sta_id[!(pam$pressure$sta_id %in% sta_id_keep)] <- NA\nsta <- data.frame()\nraster_mse_list <- c()\nfor (i_s in 1:length(pressure_maps)) {\n  # get MSE layer\n  raster_mse_list[[i_s]] <- pressure_maps[[i_s]][[1]]\n  # change 0 (water) in NA\n  raster_mse_list[[i_s]][raster_mse_list[[i_s]] == 0] <- NA\n\n  # Acess geotiff metadata\n  mt <- raster::metadata(pressure_maps[[i_s]])\n\n  mt$start <- mt$extend_sample[1]\n  mt$end <- mt$extend_sample[2]\n  tmp <- as.data.frame(raster_mse_list[[i_s]][[1]], xy = T)\n  mt$lon <- tmp$x[which.min(tmp[, 3])]\n  mt$lat <- tmp$y[which.min(tmp[, 3])]\n\n  sta <- rbind(sta, as.data.frame(mt[-4]))\n}\nknitr::kable(head(sta))"},{"path":"probability-aggregation.html","id":"gaussian-likelihood-function","chapter":"C Probability aggregation","heading":"C.2 Gaussian likelihood function","text":"order find appropriate likelihood function, first need assume distribution error. sources errors (1) sensor measurement error, (2) ERA5 reanalysis error (3) attitudinal movement bird time. removing mean error, can ignore long-term errors (e.g., constant temporal error ERA5 biases geolocator sensor).figure shows error distribution known location equipment retrieval.Therefore, assuming Gaussian distribution error, Gaussian likelikhood multivariate normal distribution given \n\\[ f(\\boldsymbol{\\varepsilon})={\\frac {1}{(2\\pi)^{n/2} \\sqrt{\\det(\\boldsymbol{\\Sigma})}}}\\exp \\left(-\\frac{1}{2} \\boldsymbol{\\varepsilon} \\boldsymbol{\\Sigma}^{-1} \\boldsymbol{\\varepsilon} \\right).\\]\nvector notation \\(\\boldsymbol{\\varepsilon }=[\\varepsilon[1],\\ldots,\\varepsilon[n]]\\) covariance matrix \\(\\boldsymbol{\\Sigma}\\) contains variance two datapoints \\(\\boldsymbol{\\Sigma}_{t_1,t_2} = \\operatorname {E}[ \\varepsilon[t_1] \\varepsilon[t_2] ]\\).","code":"\ns <- 0.5"},{"path":"probability-aggregation.html","id":"independance-of-errors","chapter":"C Probability aggregation","heading":"C.2.1 Independance of errors","text":"covariance difficult quantify explicitly, can first look strong assumption independance error, \\(\\varepsilon_t \\overset{..d.}{\\sim} \\mathcal{N}(0,\\sigma)\\). case, Gaussian likelikhood function \\(f_{ind}\\) simply product normal probability density function error \\(\\varepsilon[t]\\),\n\\[ f_{ind}(\\boldsymbol{\\varepsilon})=\\prod _{t=1}^{n}f_\\mathcal{N}(\\varepsilon[t])=\\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{n/2}\\exp \\left(-{\\frac {\\sum _{t=1}^{n}\\varepsilon[t]^2}{2\\sigma ^2}}\\right).\\]can re-write equation function MSE\n\\[ f_{ind}(\\boldsymbol{\\varepsilon})=\\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{n/2}\\exp \\left(-n{\\frac {\\mathit{MSE}}{2\\sigma ^2}}\\right).\\]Using equation, can compute probability stationary periods. code , define likelihood function f_prob function \\(n\\), \\(\\sigma\\) MSE.define function display MSE probability 8 stationary periods based likelihood function. function used later compare likelihood function.Assuming independance, Gaussian likelihood transforms MSE probability narrow ranges uncertainties. narrow long stationary period (i_s=1 17), entire map 0.comes multiplication probability assumed independence case (see equation ). underlying assuming multiplication operator conjunction probabilities, aggregating two information done operator: \\(P(~\\text{}~B) = P()\\times P(B)\\). information content overlapping every datapoint information kept.","code":"\nf_prob <- function(n, s, MSE) {\n  (1 / (2 * pi * s^2))^(n / 2) * exp(-n * MSE / 2 / s^2)\n}\nfun_plot_prob <- function(f_prob, sta, pressure_maps) {\n  raster_prob_list <- c()\n  for (i_s in 1:length(pressure_maps)) {\n    n <- sta$nb_sample[i_s]\n    raster_prob_list[[i_s]] <- f_prob(n, s, raster_mse_list[[i_s]])\n  }\n  iis <- c(1, 2, 5, 17, 24, 26)\n  sta[iis, ]\n  dl <- 5\n  par(mfcol = c(2, length(iis)), mar = c(0, 0, 7, 0), mai = c(0, 0, .1, 0))\n  for (i_s in iis) {\n    plot(raster_mse_list[[i_s]],\n      main = paste0(\"MSE|i_s=\", i_s, \"|n=\", sta$nb_sample[i_s]),\n      horizontal = TRUE,\n      axes = FALSE,\n      legend.shrink = .8,\n      xlim = c(sta$lon[i_s] - dl, sta$lon[i_s] + dl), ylim = c(sta$lat[i_s] - dl, sta$lat[i_s] + dl)\n    )\n    points(sta$lon[i_s], sta$lat[i_s])\n  }\n  for (i_s in iis) {\n    plot(raster_prob_list[[i_s]],\n      main = \"Prob\",\n      horizontal = TRUE, axes = FALSE, legend.shrink = .8,\n      xlim = c(sta$lon[i_s] - dl, sta$lon[i_s] + dl), ylim = c(sta$lat[i_s] - dl, sta$lat[i_s] + dl)\n    )\n    points(sta$lon[i_s], sta$lat[i_s])\n  }\n}\nfun_plot_prob(f_prob, sta, pressure_maps)"},{"path":"probability-aggregation.html","id":"quantification-of-the-errors-dependance","chapter":"C Probability aggregation","heading":"C.2.2 Quantification of the errors dependance","text":"Ploting auto-covariance calibration site species allow us see temporal pattern error. bird, can see clear daily fluctuation certainly due bird daily movement commute feeding roosting site. auto-covariance approaching 0 birds, expected removed mean value. However, sill reached 6hours 12 hours depending birds (Hoopoe doesn’t reach 3 days!).Auto-covariance error termFrom observation, one option construct covariance matrix based auto-covariance. look like cleanest way , two issues.first one absence stationarity. Indeed, auto-covariance amplitude (potentially shape) strongly influenced vertical displacement bird, strongly correlated topography. instance, Eurasian Hoopoe high variance large temporal range breeds feet Alps. rest year, lives rather flat area. Therefore, covariance built breeding site appropriate sites.second issue definition error term different duration stationary period.","code":""},{"path":"probability-aggregation.html","id":"probability-aggregation-1","chapter":"C Probability aggregation","heading":"C.3 Probability aggregation","text":"rest vignette, take different angle, re-framing problem differently exploring options compute likelihood.field probability aggregation, problem combining sources information overlapping/redundant content frame finding pooling operator \\(F\\) ,\n\\[p(\\textbf{x}\\mid \\varepsilon[1],\\ldots,\\varepsilon[n]) \\approx F(p(\\textbf{x} \\mid \\varepsilon[1]) ,\\ldots,p(\\textbf{x} \\mid \\varepsilon[n])),\\]\n, Gaussian assumption, can written,\n\\[ F(f(\\varepsilon[1]),\\ldots,f(\\varepsilon[n]))=F(\\boldsymbol{\\varepsilon})\\]","code":""},{"path":"probability-aggregation.html","id":"introduction-to-log-linear-pooling","chapter":"C Probability aggregation","heading":"C.3.1 Introduction to Log-linear pooling","text":"popular aggregation function log-linear pooling,\\[F(\\boldsymbol{\\varepsilon}) \\propto \\prod_{t=1}^n f(\\varepsilon[t])^{w_t}\\]equation also relies principle conjunction probability, uses weight \\(w_t\\) related new information brought additional \\(\\varepsilon[t]\\). Formally, can defined \n\\[w_t=\\frac{\\ln p(\\varepsilon[t] \\mid \\boldsymbol{x},\\varepsilon[1],\\ldots \\varepsilon[t-1])}{\\ln p(\\varepsilon[t] \\mid \\boldsymbol{x})}.\\]\nDenis Allard, . Comunian, Philippe Renard9 great resource learn probability aggregation log linear pooling.log-linear pooling aggregation simplifies case Gaussian independence \\(w_t=1\\). already explored case earlier.general case, using Gaussian probability density function formula, can write,\n\\[f(\\varepsilon[t])^{w_t} = \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{w_t/2}\\exp \\left(-w_t{\\frac {\\varepsilon[t]^2}{2\\sigma ^2}}\\right).\\], assume weight constant \\(w_t=w\\), can rewrite pooling aggregator \n\\[F(\\boldsymbol{\\varepsilon}) \\propto \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{\\frac{wn}{2}} \\exp \\left(-{\\frac {w}{2\\sigma ^2}}\\sum _{t=1}^{n}\\varepsilon[t]^2\\right),\\]even write function MSE,\n\\[F(\\boldsymbol{\\varepsilon}) \\propto \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{\\frac{wn}{2}} \\exp \\left(-{\\frac {wn}{2\\sigma ^2}}\\textit{MSE}\\right).\\]","code":""},{"path":"probability-aggregation.html","id":"log-linear-pooling-w1n","chapter":"C Probability aggregation","heading":"C.3.2 Log-linear pooling, \\(w=1/n\\)","text":"interesting case \\(w=1/n\\), \\(\\sum_t w_t=1\\). simplify log-linear pooling aggregator \n\\[ F(\\boldsymbol{\\varepsilon})={\\frac {1}{\\sigma\\sqrt{2\\pi} }}\\exp \\left(-{\\frac {1}{2\\sigma ^2}\\mathit{MSE}}\\right),\\]\ncan interpreted Gaussian probability distributions MSE. length timeseries \\(n\\) disappeared equation, aggregation dependence mean square errors, regardless many datapoints.can try see influence probability map.expected disappearance n, uncertainty now completely independent duration stationary period.obviously want, shows extreme log-linear pooling.","code":"\nf_prob <- function(n, s, x) {\n  w <- 1 / n\n  (1 / (2 * pi * s^2))^(n * w / 2) * exp(-w * n / 2 / (s^2) * x)\n}\nfun_plot_prob(f_prob, sta, pressure_maps)"},{"path":"probability-aggregation.html","id":"log-linear-pooling-w-lognn","chapter":"C Probability aggregation","heading":"C.3.3 Log-linear pooling, \\(w = \\log(n)/n\\)","text":"study, chose use \\(w=\\frac{\\log(n)}{n}\\), result pooling aggregation\\[F(\\boldsymbol{\\varepsilon}) \\propto \\left({\\frac {1}{2\\pi \\sigma ^{2}}}\\right)^{\\frac{w\\log(n)}{2}} \\exp \\left(-{\\frac {\\log(n)}{2\\sigma ^2}}\\textit{MSE}\\right).\\]scheme designed minimize strength \\(1/n\\)","code":"\nf_prob <- function(n, s, x) {\n  w <- log(n) / n\n  (1 / (2 * pi * s^2))^(n * w / 2) * exp(-w * n / 2 / (s^2) * x)\n}\nfun_plot_prob(f_prob, sta, pressure_maps)"},{"path":"probability-aggregation.html","id":"validation","chapter":"C Probability aggregation","heading":"C.3.4 Validation","text":"Validation uncertainty estimation relatively difficult, especially datapoints assume behaviour bird might differ calibration sites (equipment retrieval) rest journey.figure , examples uncertainty estimate shown. Ideally, want colored area small (low uncertainty), assessing uncertainty, also want red cross fall within colored area. , red cross often outside, estimator confident.Furthermore, shape uncertainty can strongly anisotropic (e.g., hoopoe bottom right) making distance likely point (blue) true value (red cross) poor measure uncertainty.Uncertainty pressure mismatch (colorscale) equipment period showing true equipment sire (red cross) within probability map estimated likely valueAssessing uncertainty relies checking red cross distributed according uncertainty shape. formal way quantifiying uncertainty quantile true value \\(q=p(\\boldsymbol{x}\\leq \\boldsymbol{x}_{true})\\), corresponds probability variable less equal true value. , true value belongs distribution, distribution quantile uniform.can visualize empirical cumulative distribution quantiles fall 1:1 line (like qq-plot). two extreme cases (\\(w=1\\) \\(w=1/n\\)) show overconfidence (line) underconfidence (line) respectively. Indeed, distribution quantile using \\(w=1/n\\) method shows lot quantile values 0.9-1, indicates true value within 90% uncertainty contour (underconfident).method chosen (\\(w=\\log(n)/n\\)) better , still general underconfident. calibration validation performed rather long temporal serie (equipment retrieval), one can expect labelisation pressure better/easier places. Thus, seems appropriate slightly underconfident method developed.covariance aggregation scheme implemented computing covariance matrix multi-variate Gaussian distribution. covariance function build using exact variogram species. , theory, correct method, looks overconfident. Thus didn’t use now.Looking forward, calibration highly dependant local topography ability bird move . Manual edition/labelling also strong impact.","code":""},{"path":"gridded-gibbs-sampler.html","id":"gridded-gibbs-sampler","chapter":"D Gridded Gibbs sampler","heading":"D Gridded Gibbs sampler","text":"chapter, present alternative approach graph (see chapter Basic graph) using Gibb’s sampler. Compared graph approach, (1) simpler implement, (2) can faster situation (3) can solve potential memory issue (1) approximation (MCMC sampler), (2) account wind data (least, easily).aim produce possible migration trajectory bird considering information (1) light, (2) pressure (3) flight distance.","code":""},{"path":"gridded-gibbs-sampler.html","id":"introduction-and-background","chapter":"D Gridded Gibbs sampler","heading":"D.1 Introduction and background","text":"Gibb’s sampler special case Metropolis hasting states Markov chains re-sampled iteratively conditional others, thus reducing probability sample conditional probability. full conditional probability known, can sampled exactly, resulting proposal always accepted traditional Metropolis Hasting framework. approach thus requires able compute probability map position one stationary period conditional previous next stationary period.bird trajectory model, conditional probability simple compute (1) static probability part (pressure light) dependent destination position can easily pre-computed map (see part 1) (2) transitional probability (.e., movement model) just based distance departure destination, can computed efficiently grid either departure destination known.\nimplemented gridded gibbs approach following procedure:\n1. Initial chain following path:\n- Create path highest probability static probability (light pressure)\n- Use known equipment/retrieval site first /last states path\n- stationary period shorter 24hours, interpolate position based position.\n2. Loop stationary period produce new simulated path. stationary period,\n- Compute probability position conditional position bird previous next stationary period current path. conditional probability product (1) static probability pressure light current stationary period, (2) probability movement model based position previous stationary period previous flight duration (3) probability movement model based position next stationary period next flight duration (see Figure 7).\n- Update current state path position sampled probability map computed.Illustration gridded gibbs sampler 6th stationary period specific iteration. one hand, can compute static probability based combinaison pressure light. hand, can compute conditional proability transition based position previous next stationary period (green dot). Based information, can sample possible position (small white dots).gibbs samples presents several advantages compare traditional MH. First, accepting propositions, generally faster run. Second, simple implement easier setup step size necessary. Thirdly, can sample discontinuous probability space easily, thus allowing “jump” sea.\nHowever, Gibbs samples remains sensitive local minimun case consecutive states correlated. typically case several short flights follows long flight (e.g. pre-breeding stopover Lybia 18IC inFigure 8). next flight constrains much position, gibbs sampler explore correctly space.solved using block gibbs sampler, position stationary periods separated short flights re-sampled together.","code":""},{"path":"gridded-gibbs-sampler.html","id":"stationary-probability","chapter":"D Gridded Gibbs sampler","heading":"D.2 Stationary probability","text":"already pre-processed light pressure data data chapter Static mapWe first normalize static probability (light pressure combine) ensure sum probabilities map 1.Instead considering grids cell map, pre-select grid cell stationary period possible according static probability . ‘Possible’ defined grid cells whose cumulative sum probability 99%.","code":"\nload(\"data/3_static/18LX_static_prob.Rdata\")\nstatic_prob_n <- lapply(static_prob, function(x) {\n  probt <- raster::as.matrix(x)\n  probt[is.na(probt)] <- 0\n  probt / sum(probt, na.rm = T)\n})\nthr_prob_percentile <- .99\nnds_id <- lapply(static_prob_n, function(probi) {\n  # First, compute the threshold of prob corresponding to percentile\n  probis <- sort(probi)\n  id_prob_percentile <- sum(cumsum(probis) <= (1 - thr_prob_percentile))\n  thr_prob <- probis[id_prob_percentile + 1]\n\n  # filter the pixels above the threashold\n  nds <- probi >= thr_prob\n  # return\n  which(nds)\n})"},{"path":"gridded-gibbs-sampler.html","id":"movement-model","chapter":"D Gridded Gibbs sampler","heading":"D.3 Movement model","text":"movement model, define function convert groundspeed [km/h] probability value. use standard gamma distribution. Note graph approach, use windspeed sot movement model defined airspeed.pre-compute position center grid cell.Extract flight duration metadata static_prob raster data.Create function compute distance point pt location grid id return probability bird flew distances particular stationary period i_s.","code":"\nmvt_pdf <- function(x) {\n  dgamma(x, shape = 7, scale = 7)\n}\nlat <- seq(raster::ymax(static_prob[[1]]), raster::ymin(static_prob[[1]]), length.out = nrow(static_prob[[1]]) + 1)\nlat <- lat[seq_len(length(lat) - 1)] + diff(lat[1:2]) / 2\nlon <- seq(raster::xmin(static_prob[[1]]), raster::xmax(static_prob[[1]]), length.out = ncol(static_prob[[1]]) + 1)\nlon <- lon[seq_len(length(lon) - 1)] + diff(lon[1:2]) / 2\n\nlatlon <- expand.grid(lat = lat, lon = lon)\nflight_duration <- unlist(lapply(static_prob, function(x) {\n  mtf <- metadata(x)\n  as.numeric(sum(difftime(mtf$flight$end, mtf$flight$start, units = \"hours\")))\n}))\nprob_mvt <- function(pt, i_s, id) {\n  gs <- geosphere::distGeo(latlon[pt, ], latlon[id, ]) / 1000 / flight_duration[i_s]\n  mvt_pdf(gs)\n}"},{"path":"gridded-gibbs-sampler.html","id":"initialize-the-path","chapter":"D Gridded Gibbs sampler","heading":"D.4 Initialize the path","text":"Metropolis-hasting, need provide initial path sampler., let’s set constantInitialize first path likely position stationary period. Yet position unlikely reliable short stationary period. fix , linearly interpolate position short stationary period. first identify remove position short stationary period (1 day)., set position first last stationary period (equipment retrieval) simulated path.Visualize initial pathWe can set/get stationary period simulate","code":"\nnj <- 100 # number of iteration/samples\nnsta <- length(static_prob) # number of stationary period\nnll <- dim(static_prob[[1]])[1:2] # number of grid cell\npath <- matrix(ncol = nsta, nrow = nj)\npath[1, ] <- geopressure_map2path(static_prob, interp = 1, format = \"ind\")$ind\npath[, 1] <- which(as.matrix(static_prob[[1]]) == 1)\npath[, nsta] <- which(as.matrix(static_prob[[nsta]]) == 1)\npath_ll <- arrayInd(path[1, ], nll)\nleaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl() %>%\n  addPolylines(lng = lon[path_ll[, 2]], lat = lat[path_ll[, 1]], opacity = 1, color = \"#808080\", weight = 3) %>%\n  addCircles(lng = lon[path_ll[, 2]], lat = lat[path_ll[, 1]], opacity = 1, color = \"#000\", weight = 10)\nss <- which(is.na(path[2, ]))"},{"path":"gridded-gibbs-sampler.html","id":"run-the-gibbs-sampler","chapter":"D Gridded Gibbs sampler","heading":"D.5 Run the Gibbs sampler","text":"Now preparation done, can perform simulation simply iterating nj","code":"\nfor (j in seq(from = 2, to = nj)) {\n  # Looping through the stationay period to simulate\n  for (i_s in ss) {\n    # get the probability from the position of the current path for the previous stationary period to all possible location of the current stationary period\n    prob_prev <- prob_mvt(path[j, i_s - 1], i_s - 1, nds_id[[i_s]])\n    # get the probability from all possible location of the current stationary period to the position of the previous path for the next stationary period\n    prob_next <- prob_mvt(path[j - 1, i_s + 1], i_s, nds_id[[i_s]])\n\n    # Compute the probability as the product of the static probability and the dynamic probability\n    prob <- static_prob_n[[i_s]][nds_id[[i_s]]] * prob_next * prob_prev\n\n    # Ransom sample a position according to the proability computed\n    path[j, i_s] <- nds_id[[i_s]][sum(stats::runif(1) > cumsum(prob) / sum(prob)) + 1]\n  }\n}"},{"path":"gridded-gibbs-sampler.html","id":"illustration","chapter":"D Gridded Gibbs sampler","heading":"D.6 Illustration","text":"Illustration simulation 10 pathsCompare simulated position stationary period corresponding static probability.","code":"\nm <- leaflet(width = \"100%\") %>%\n  leaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl()\nfor (i in seq(from = 50, to = nj, length.out = 10)) {\n  path_ll <- arrayInd(path[i, ], nll)\n  m <- m %>%\n    addPolylines(lng = lon[path_ll[, 2]], lat = lat[path_ll[, 1]], opacity = 0.7, weight = 1, color = \"#808080\") %>%\n    addCircles(lng = lon[path_ll[, 2]], lat = lat[path_ll[, 1]], opacity = 1, weight = 1, color = \"#000\")\n}\nm\nli_s <- list()\nl <- leaflet(width = \"100%\") %>%\n  addProviderTiles(providers$Stamen.TerrainBackground) %>%\n  addFullscreenControl()\nfor (i_r in seq_len(length(static_prob))) {\n  i_s <- metadata(static_prob[[i_r]])$sta_id\n  info <- metadata(static_prob[[i_r]])$extend_sample\n  info_str <- paste0(i_s, \" | \", info[1], \"->\", info[2])\n  li_s <- append(li_s, info_str)\n\n  path_ll <- arrayInd(path[, i_r], nll)\n  l <- l %>%\n    addRasterImage(static_prob[[i_r]], opacity = 0.8, colors = \"OrRd\", group = info_str) %>%\n    addCircles(lng = lon[path_ll[, 2]], lat = lat[path_ll[, 1]], opacity = .1, color = \"#000\", group = info_str)\n}\nl %>%\n  addLayersControl(\n    overlayGroups = li_s,\n    options = layersControlOptions(collapsed = FALSE)\n  ) %>%\n  hideGroup(tail(li_s, length(li_s) - 1))"},{"path":"resources.html","id":"resources","chapter":"E Resources","heading":"E Resources","text":"","code":""},{"path":"resources.html","id":"publications","chapter":"E Resources","heading":"E.1 Publications","text":"Raphaël Nussbaumer, Mathieu Gravey, Martins Briedis, Felix Liechti. Global positioning animal-borne pressure sensors, 5 October 2022, PREPRINT (Version 3) available Research Square https://doi.org/10.21203/rs.3.rs-1381915/v3Raphaël Nussbaumer, Mathieu Gravey, Martins Briedis, Felix Liechti. Inferring bird’s trajectory multi-sensor geolocators remote sensing graphical model, 25 May 2022, PREPRINT (Version 1) available Research Square https://doi.org/10.21203/rs.3.rs-1693751/v1","code":""},{"path":"resources.html","id":"presentations","chapter":"E Resources","heading":"E.2 Presentations","text":"Raphaël Nussbaumer, Mathieu Gravey, Martins Briedis, Felix Liechti. Leveraging light, pressure, activity, wind data improve geolocator positioning. August 2022. 28th International Ornithological Congress. PRESENTATION available Youtube.Raphaël Nussbaumer, Mathieu Gravey, Felix Liechti. Improving spatial accuracy multi-sensor geolocators’ position using atmospheric surface pressure. October 2021. 7th International Bio-logging Science Symposium. PRESENTATION available Youtube.","code":""},{"path":"resources.html","id":"projects-using-geopressurer","chapter":"E Resources","heading":"E.3 Projects using GeoPressureR","text":"List research projects using GeoPressureR links code used analyse create figures. might helpful get idea analyse data borrow code sections project. Feel free contact ’d like appear list.","code":""}]
